
VehicleController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f0  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009944  08009944  0000a944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009984  08009984  0000b00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009984  08009984  0000a984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800998c  0800998c  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800998c  0800998c  0000a98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009990  08009990  0000a990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08009994  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  080099a0  0000b00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080099a0  0000b1c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018890  00000000  00000000  0000b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299b  00000000  00000000  000238d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00026270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fae  00000000  00000000  00027650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c275  00000000  00000000  000285fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c2e  00000000  00000000  00054873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ca77  00000000  00000000  0006e4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018af18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005650  00000000  00000000  0018af5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001905ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	0800992c 	.word	0x0800992c

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	0800992c 	.word	0x0800992c

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b9b0 	b.w	800060c <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ca:	4688      	mov	r8, r1
 80002cc:	4604      	mov	r4, r0
 80002ce:	468e      	mov	lr, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14a      	bne.n	800036a <__udivmoddi4+0xa6>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4617      	mov	r7, r2
 80002d8:	d95f      	bls.n	800039a <__udivmoddi4+0xd6>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	b14e      	cbz	r6, 80002f4 <__udivmoddi4+0x30>
 80002e0:	f1c6 0320 	rsb	r3, r6, #32
 80002e4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	40b4      	lsls	r4, r6
 80002ec:	fa20 f303 	lsr.w	r3, r0, r3
 80002f0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f8:	fa1f fc87 	uxth.w	ip, r7
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fbbe f1f8 	udiv	r1, lr, r8
 8000302:	fb08 ee11 	mls	lr, r8, r1, lr
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x5e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f101 30ff 	add.w	r0, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x5c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 8154 	bhi.w	80005c8 <__udivmoddi4+0x304>
 8000320:	4601      	mov	r1, r0
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	b2a2      	uxth	r2, r4
 8000326:	fbb3 f0f8 	udiv	r0, r3, r8
 800032a:	fb08 3310 	mls	r3, r8, r0, r3
 800032e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000332:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000336:	4594      	cmp	ip, r2
 8000338:	d90b      	bls.n	8000352 <__udivmoddi4+0x8e>
 800033a:	18ba      	adds	r2, r7, r2
 800033c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000340:	bf2c      	ite	cs
 8000342:	2401      	movcs	r4, #1
 8000344:	2400      	movcc	r4, #0
 8000346:	4594      	cmp	ip, r2
 8000348:	d902      	bls.n	8000350 <__udivmoddi4+0x8c>
 800034a:	2c00      	cmp	r4, #0
 800034c:	f000 813f 	beq.w	80005ce <__udivmoddi4+0x30a>
 8000350:	4618      	mov	r0, r3
 8000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000356:	eba2 020c 	sub.w	r2, r2, ip
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa2>
 800035e:	40f2      	lsrs	r2, r6
 8000360:	2300      	movs	r3, #0
 8000362:	e9c5 2300 	strd	r2, r3, [r5]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xb6>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb0>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa2>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d14e      	bne.n	8000420 <__udivmoddi4+0x15c>
 8000382:	4543      	cmp	r3, r8
 8000384:	f0c0 8112 	bcc.w	80005ac <__udivmoddi4+0x2e8>
 8000388:	4282      	cmp	r2, r0
 800038a:	f240 810f 	bls.w	80005ac <__udivmoddi4+0x2e8>
 800038e:	4608      	mov	r0, r1
 8000390:	2d00      	cmp	r5, #0
 8000392:	d0e8      	beq.n	8000366 <__udivmoddi4+0xa2>
 8000394:	e9c5 4e00 	strd	r4, lr, [r5]
 8000398:	e7e5      	b.n	8000366 <__udivmoddi4+0xa2>
 800039a:	2a00      	cmp	r2, #0
 800039c:	f000 80ac 	beq.w	80004f8 <__udivmoddi4+0x234>
 80003a0:	fab2 f682 	clz	r6, r2
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	f040 80bb 	bne.w	8000520 <__udivmoddi4+0x25c>
 80003aa:	1a8b      	subs	r3, r1, r2
 80003ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b0:	b2bc      	uxth	r4, r7
 80003b2:	2101      	movs	r1, #1
 80003b4:	0c02      	lsrs	r2, r0, #16
 80003b6:	b280      	uxth	r0, r0
 80003b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80003bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003c4:	fb04 f20c 	mul.w	r2, r4, ip
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d90e      	bls.n	80003ea <__udivmoddi4+0x126>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d2:	bf2c      	ite	cs
 80003d4:	f04f 0901 	movcs.w	r9, #1
 80003d8:	f04f 0900 	movcc.w	r9, #0
 80003dc:	429a      	cmp	r2, r3
 80003de:	d903      	bls.n	80003e8 <__udivmoddi4+0x124>
 80003e0:	f1b9 0f00 	cmp.w	r9, #0
 80003e4:	f000 80ec 	beq.w	80005c0 <__udivmoddi4+0x2fc>
 80003e8:	46c4      	mov	ip, r8
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003f4:	fb04 f408 	mul.w	r4, r4, r8
 80003f8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003fc:	4294      	cmp	r4, r2
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x154>
 8000400:	18ba      	adds	r2, r7, r2
 8000402:	f108 33ff 	add.w	r3, r8, #4294967295
 8000406:	bf2c      	ite	cs
 8000408:	2001      	movcs	r0, #1
 800040a:	2000      	movcc	r0, #0
 800040c:	4294      	cmp	r4, r2
 800040e:	d902      	bls.n	8000416 <__udivmoddi4+0x152>
 8000410:	2800      	cmp	r0, #0
 8000412:	f000 80d1 	beq.w	80005b8 <__udivmoddi4+0x2f4>
 8000416:	4698      	mov	r8, r3
 8000418:	1b12      	subs	r2, r2, r4
 800041a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 800041e:	e79d      	b.n	800035c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa08 f401 	lsl.w	r4, r8, r1
 800042a:	fa00 f901 	lsl.w	r9, r0, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa28 f806 	lsr.w	r8, r8, r6
 8000436:	408a      	lsls	r2, r1
 8000438:	431f      	orrs	r7, r3
 800043a:	fa20 f306 	lsr.w	r3, r0, r6
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	4323      	orrs	r3, r4
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fbb8 fef0 	udiv	lr, r8, r0
 800044c:	fb00 881e 	mls	r8, r0, lr, r8
 8000450:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000454:	fb0e f80c 	mul.w	r8, lr, ip
 8000458:	45a0      	cmp	r8, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1b6>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a0      	cmp	r8, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b4>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 80b8 	beq.w	80005e8 <__udivmoddi4+0x324>
 8000478:	46d6      	mov	lr, sl
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fa1f f883 	uxth.w	r8, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d90e      	bls.n	80004b4 <__udivmoddi4+0x1f0>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	bf2c      	ite	cs
 800049e:	f04f 0801 	movcs.w	r8, #1
 80004a2:	f04f 0800 	movcc.w	r8, #0
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d903      	bls.n	80004b2 <__udivmoddi4+0x1ee>
 80004aa:	f1b8 0f00 	cmp.w	r8, #0
 80004ae:	f000 809f 	beq.w	80005f0 <__udivmoddi4+0x32c>
 80004b2:	4603      	mov	r3, r0
 80004b4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b8:	eba4 040c 	sub.w	r4, r4, ip
 80004bc:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c0:	4564      	cmp	r4, ip
 80004c2:	4673      	mov	r3, lr
 80004c4:	46e0      	mov	r8, ip
 80004c6:	d302      	bcc.n	80004ce <__udivmoddi4+0x20a>
 80004c8:	d107      	bne.n	80004da <__udivmoddi4+0x216>
 80004ca:	45f1      	cmp	r9, lr
 80004cc:	d205      	bcs.n	80004da <__udivmoddi4+0x216>
 80004ce:	ebbe 0302 	subs.w	r3, lr, r2
 80004d2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	46e0      	mov	r8, ip
 80004da:	b15d      	cbz	r5, 80004f4 <__udivmoddi4+0x230>
 80004dc:	ebb9 0203 	subs.w	r2, r9, r3
 80004e0:	eb64 0408 	sbc.w	r4, r4, r8
 80004e4:	fa04 f606 	lsl.w	r6, r4, r6
 80004e8:	fa22 f301 	lsr.w	r3, r2, r1
 80004ec:	40cc      	lsrs	r4, r1
 80004ee:	431e      	orrs	r6, r3
 80004f0:	e9c5 6400 	strd	r6, r4, [r5]
 80004f4:	2100      	movs	r1, #0
 80004f6:	e736      	b.n	8000366 <__udivmoddi4+0xa2>
 80004f8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004fc:	0c01      	lsrs	r1, r0, #16
 80004fe:	4614      	mov	r4, r2
 8000500:	b280      	uxth	r0, r0
 8000502:	4696      	mov	lr, r2
 8000504:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000508:	2620      	movs	r6, #32
 800050a:	4690      	mov	r8, r2
 800050c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000510:	4610      	mov	r0, r2
 8000512:	fbb1 f1f2 	udiv	r1, r1, r2
 8000516:	eba3 0308 	sub.w	r3, r3, r8
 800051a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051e:	e74b      	b.n	80003b8 <__udivmoddi4+0xf4>
 8000520:	40b7      	lsls	r7, r6
 8000522:	f1c6 0320 	rsb	r3, r6, #32
 8000526:	fa01 f206 	lsl.w	r2, r1, r6
 800052a:	fa21 f803 	lsr.w	r8, r1, r3
 800052e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000532:	fa20 f303 	lsr.w	r3, r0, r3
 8000536:	b2bc      	uxth	r4, r7
 8000538:	40b0      	lsls	r0, r6
 800053a:	4313      	orrs	r3, r2
 800053c:	0c02      	lsrs	r2, r0, #16
 800053e:	0c19      	lsrs	r1, r3, #16
 8000540:	b280      	uxth	r0, r0
 8000542:	fbb8 f9fe 	udiv	r9, r8, lr
 8000546:	fb0e 8819 	mls	r8, lr, r9, r8
 800054a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	4588      	cmp	r8, r1
 8000554:	d951      	bls.n	80005fa <__udivmoddi4+0x336>
 8000556:	1879      	adds	r1, r7, r1
 8000558:	f109 3cff 	add.w	ip, r9, #4294967295
 800055c:	bf2c      	ite	cs
 800055e:	f04f 0a01 	movcs.w	sl, #1
 8000562:	f04f 0a00 	movcc.w	sl, #0
 8000566:	4588      	cmp	r8, r1
 8000568:	d902      	bls.n	8000570 <__udivmoddi4+0x2ac>
 800056a:	f1ba 0f00 	cmp.w	sl, #0
 800056e:	d031      	beq.n	80005d4 <__udivmoddi4+0x310>
 8000570:	eba1 0108 	sub.w	r1, r1, r8
 8000574:	fbb1 f9fe 	udiv	r9, r1, lr
 8000578:	fb09 f804 	mul.w	r8, r9, r4
 800057c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000580:	b29b      	uxth	r3, r3
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	4543      	cmp	r3, r8
 8000588:	d235      	bcs.n	80005f6 <__udivmoddi4+0x332>
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000590:	bf2c      	ite	cs
 8000592:	f04f 0a01 	movcs.w	sl, #1
 8000596:	f04f 0a00 	movcc.w	sl, #0
 800059a:	4543      	cmp	r3, r8
 800059c:	d2bb      	bcs.n	8000516 <__udivmoddi4+0x252>
 800059e:	f1ba 0f00 	cmp.w	sl, #0
 80005a2:	d1b8      	bne.n	8000516 <__udivmoddi4+0x252>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e7b4      	b.n	8000516 <__udivmoddi4+0x252>
 80005ac:	1a84      	subs	r4, r0, r2
 80005ae:	eb68 0203 	sbc.w	r2, r8, r3
 80005b2:	2001      	movs	r0, #1
 80005b4:	4696      	mov	lr, r2
 80005b6:	e6eb      	b.n	8000390 <__udivmoddi4+0xcc>
 80005b8:	443a      	add	r2, r7
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	e72b      	b.n	8000418 <__udivmoddi4+0x154>
 80005c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c4:	443b      	add	r3, r7
 80005c6:	e710      	b.n	80003ea <__udivmoddi4+0x126>
 80005c8:	3902      	subs	r1, #2
 80005ca:	443b      	add	r3, r7
 80005cc:	e6a9      	b.n	8000322 <__udivmoddi4+0x5e>
 80005ce:	443a      	add	r2, r7
 80005d0:	3802      	subs	r0, #2
 80005d2:	e6be      	b.n	8000352 <__udivmoddi4+0x8e>
 80005d4:	eba7 0808 	sub.w	r8, r7, r8
 80005d8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005dc:	4441      	add	r1, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c9      	b.n	800057c <__udivmoddi4+0x2b8>
 80005e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e744      	b.n	800047a <__udivmoddi4+0x1b6>
 80005f0:	3b02      	subs	r3, #2
 80005f2:	443c      	add	r4, r7
 80005f4:	e75e      	b.n	80004b4 <__udivmoddi4+0x1f0>
 80005f6:	4649      	mov	r1, r9
 80005f8:	e78d      	b.n	8000516 <__udivmoddi4+0x252>
 80005fa:	eba1 0108 	sub.w	r1, r1, r8
 80005fe:	46cc      	mov	ip, r9
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7b8      	b.n	800057c <__udivmoddi4+0x2b8>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <VL6180X_SimpleInit>:



// Init sequentie op basis van datasheet
void VL6180X_SimpleInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    VL6180X_WriteReg(0x0207, 0x01);
 8000614:	2101      	movs	r1, #1
 8000616:	f240 2007 	movw	r0, #519	@ 0x207
 800061a:	f000 f8a9 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0208, 0x01);
 800061e:	2101      	movs	r1, #1
 8000620:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8000624:	f000 f8a4 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0096, 0x00);
 8000628:	2100      	movs	r1, #0
 800062a:	2096      	movs	r0, #150	@ 0x96
 800062c:	f000 f8a0 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0097, 0xfd);
 8000630:	21fd      	movs	r1, #253	@ 0xfd
 8000632:	2097      	movs	r0, #151	@ 0x97
 8000634:	f000 f89c 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e3, 0x00);
 8000638:	2100      	movs	r1, #0
 800063a:	20e3      	movs	r0, #227	@ 0xe3
 800063c:	f000 f898 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e4, 0x04);
 8000640:	2104      	movs	r1, #4
 8000642:	20e4      	movs	r0, #228	@ 0xe4
 8000644:	f000 f894 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e5, 0x02);
 8000648:	2102      	movs	r1, #2
 800064a:	20e5      	movs	r0, #229	@ 0xe5
 800064c:	f000 f890 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e6, 0x01);
 8000650:	2101      	movs	r1, #1
 8000652:	20e6      	movs	r0, #230	@ 0xe6
 8000654:	f000 f88c 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00e7, 0x03);
 8000658:	2103      	movs	r1, #3
 800065a:	20e7      	movs	r0, #231	@ 0xe7
 800065c:	f000 f888 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00f5, 0x02);
 8000660:	2102      	movs	r1, #2
 8000662:	20f5      	movs	r0, #245	@ 0xf5
 8000664:	f000 f884 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00d9, 0x05);
 8000668:	2105      	movs	r1, #5
 800066a:	20d9      	movs	r0, #217	@ 0xd9
 800066c:	f000 f880 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00db, 0xce);
 8000670:	21ce      	movs	r1, #206	@ 0xce
 8000672:	20db      	movs	r0, #219	@ 0xdb
 8000674:	f000 f87c 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00dc, 0x03);
 8000678:	2103      	movs	r1, #3
 800067a:	20dc      	movs	r0, #220	@ 0xdc
 800067c:	f000 f878 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00dd, 0xf8);
 8000680:	21f8      	movs	r1, #248	@ 0xf8
 8000682:	20dd      	movs	r0, #221	@ 0xdd
 8000684:	f000 f874 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x009f, 0x00);
 8000688:	2100      	movs	r1, #0
 800068a:	209f      	movs	r0, #159	@ 0x9f
 800068c:	f000 f870 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00a3, 0x3c);
 8000690:	213c      	movs	r1, #60	@ 0x3c
 8000692:	20a3      	movs	r0, #163	@ 0xa3
 8000694:	f000 f86c 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00b7, 0x00);
 8000698:	2100      	movs	r1, #0
 800069a:	20b7      	movs	r0, #183	@ 0xb7
 800069c:	f000 f868 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00bb, 0x3c);
 80006a0:	213c      	movs	r1, #60	@ 0x3c
 80006a2:	20bb      	movs	r0, #187	@ 0xbb
 80006a4:	f000 f864 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00b2, 0x09);
 80006a8:	2109      	movs	r1, #9
 80006aa:	20b2      	movs	r0, #178	@ 0xb2
 80006ac:	f000 f860 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00ca, 0x09);
 80006b0:	2109      	movs	r1, #9
 80006b2:	20ca      	movs	r0, #202	@ 0xca
 80006b4:	f000 f85c 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0198, 0x01);
 80006b8:	2101      	movs	r1, #1
 80006ba:	f44f 70cc 	mov.w	r0, #408	@ 0x198
 80006be:	f000 f857 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01b0, 0x17);
 80006c2:	2117      	movs	r1, #23
 80006c4:	f44f 70d8 	mov.w	r0, #432	@ 0x1b0
 80006c8:	f000 f852 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01ad, 0x00);
 80006cc:	2100      	movs	r1, #0
 80006ce:	f240 10ad 	movw	r0, #429	@ 0x1ad
 80006d2:	f000 f84d 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00ff, 0x05);
 80006d6:	2105      	movs	r1, #5
 80006d8:	20ff      	movs	r0, #255	@ 0xff
 80006da:	f000 f849 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0100, 0x05);
 80006de:	2105      	movs	r1, #5
 80006e0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80006e4:	f000 f844 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x00ff, 0x00);
 80006e8:	2100      	movs	r1, #0
 80006ea:	20ff      	movs	r0, #255	@ 0xff
 80006ec:	f000 f840 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x010a, 0x30);
 80006f0:	2130      	movs	r1, #48	@ 0x30
 80006f2:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 80006f6:	f000 f83b 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x003f, 0x46);
 80006fa:	2146      	movs	r1, #70	@ 0x46
 80006fc:	203f      	movs	r0, #63	@ 0x3f
 80006fe:	f000 f837 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01e3, 0xff);
 8000702:	21ff      	movs	r1, #255	@ 0xff
 8000704:	f240 10e3 	movw	r0, #483	@ 0x1e3
 8000708:	f000 f832 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01e4, 0x01);
 800070c:	2101      	movs	r1, #1
 800070e:	f44f 70f2 	mov.w	r0, #484	@ 0x1e4
 8000712:	f000 f82d 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x01e5, 0x00);
 8000716:	2100      	movs	r1, #0
 8000718:	f240 10e5 	movw	r0, #485	@ 0x1e5
 800071c:	f000 f828 	bl	8000770 <VL6180X_WriteReg>

    VL6180X_WriteReg(0x0011, 0x10);
 8000720:	2110      	movs	r1, #16
 8000722:	2011      	movs	r0, #17
 8000724:	f000 f824 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x010a, 0x30);
 8000728:	2130      	movs	r1, #48	@ 0x30
 800072a:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 800072e:	f000 f81f 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x003f, 0x46);
 8000732:	2146      	movs	r1, #70	@ 0x46
 8000734:	203f      	movs	r0, #63	@ 0x3f
 8000736:	f000 f81b 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0031, 0xFF);
 800073a:	21ff      	movs	r1, #255	@ 0xff
 800073c:	2031      	movs	r0, #49	@ 0x31
 800073e:	f000 f817 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0041, 0x63);
 8000742:	2163      	movs	r1, #99	@ 0x63
 8000744:	2041      	movs	r0, #65	@ 0x41
 8000746:	f000 f813 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x002e, 0x01);
 800074a:	2101      	movs	r1, #1
 800074c:	202e      	movs	r0, #46	@ 0x2e
 800074e:	f000 f80f 	bl	8000770 <VL6180X_WriteReg>

    VL6180X_WriteReg(0x001b, 0x09);
 8000752:	2109      	movs	r1, #9
 8000754:	201b      	movs	r0, #27
 8000756:	f000 f80b 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x003e, 0x31);
 800075a:	2131      	movs	r1, #49	@ 0x31
 800075c:	203e      	movs	r0, #62	@ 0x3e
 800075e:	f000 f807 	bl	8000770 <VL6180X_WriteReg>
    VL6180X_WriteReg(0x0014, 0x24);
 8000762:	2124      	movs	r1, #36	@ 0x24
 8000764:	2014      	movs	r0, #20
 8000766:	f000 f803 	bl	8000770 <VL6180X_WriteReg>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <VL6180X_WriteReg>:

void VL6180X_WriteReg(uint16_t reg, uint8_t val)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af04      	add	r7, sp, #16
 8000776:	4603      	mov	r3, r0
 8000778:	460a      	mov	r2, r1
 800077a:	80fb      	strh	r3, [r7, #6]
 800077c:	4613      	mov	r3, r2
 800077e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Mem_Write(&hi2c1, VL6180X_I2C_ADDR, reg, I2C_MEMADD_SIZE_16BIT, &val, 1, HAL_MAX_DELAY);
 8000780:	88fa      	ldrh	r2, [r7, #6]
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	2301      	movs	r3, #1
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	1d7b      	adds	r3, r7, #5
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2302      	movs	r3, #2
 8000792:	2152      	movs	r1, #82	@ 0x52
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <VL6180X_WriteReg+0x34>)
 8000796:	f001 faf9 	bl	8001d8c <HAL_I2C_Mem_Write>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000028 	.word	0x20000028

080007a8 <VL6180X_ReadReg>:

uint8_t VL6180X_ReadReg(uint16_t reg)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af04      	add	r7, sp, #16
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
    uint8_t val;
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, VL6180X_ADDR, reg, I2C_MEMADD_SIZE_16BIT, &val, 1, HAL_MAX_DELAY);
 80007b2:	88fa      	ldrh	r2, [r7, #6]
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	9302      	str	r3, [sp, #8]
 80007ba:	2301      	movs	r3, #1
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	f107 030e 	add.w	r3, r7, #14
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2302      	movs	r3, #2
 80007c6:	2152      	movs	r1, #82	@ 0x52
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <VL6180X_ReadReg+0x34>)
 80007ca:	f001 fbf3 	bl	8001fb4 <HAL_I2C_Mem_Read>
 80007ce:	4603      	mov	r3, r0
 80007d0:	73fb      	strb	r3, [r7, #15]

    return val;
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000028 	.word	0x20000028

080007e0 <VL6180X_ReadRange>:
            break;
    }
}

uint8_t VL6180X_ReadRange(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
    VL6180X_WriteReg(0x0018, 0x01);  // SYSRANGE__START
 80007e6:	2101      	movs	r1, #1
 80007e8:	2018      	movs	r0, #24
 80007ea:	f7ff ffc1 	bl	8000770 <VL6180X_WriteReg>

    uint8_t status;
    uint32_t timeout = 1000;
 80007ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f2:	60fb      	str	r3, [r7, #12]

    uint32_t startTick = HAL_GetTick();
 80007f4:	f000 fd76 	bl	80012e4 <HAL_GetTick>
 80007f8:	60b8      	str	r0, [r7, #8]
    while ((VL6180X_ReadReg(0x004F) & 0x07) != 0x04) {
 80007fa:	e009      	b.n	8000810 <VL6180X_ReadRange+0x30>
        if (HAL_GetTick() - startTick > 1000) {
 80007fc:	f000 fd72 	bl	80012e4 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800080a:	d901      	bls.n	8000810 <VL6180X_ReadRange+0x30>
            return 255;
 800080c:	23ff      	movs	r3, #255	@ 0xff
 800080e:	e016      	b.n	800083e <VL6180X_ReadRange+0x5e>
    while ((VL6180X_ReadReg(0x004F) & 0x07) != 0x04) {
 8000810:	204f      	movs	r0, #79	@ 0x4f
 8000812:	f7ff ffc9 	bl	80007a8 <VL6180X_ReadReg>
 8000816:	4603      	mov	r3, r0
 8000818:	f003 0307 	and.w	r3, r3, #7
 800081c:	2b04      	cmp	r3, #4
 800081e:	d1ed      	bne.n	80007fc <VL6180X_ReadRange+0x1c>
        }
    }

    uint8_t range = VL6180X_ReadReg(0x0062);  // RESULT__RANGE_VAL
 8000820:	2062      	movs	r0, #98	@ 0x62
 8000822:	f7ff ffc1 	bl	80007a8 <VL6180X_ReadReg>
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]

    VL6180X_WriteReg(0x0015, 0x07);          // SYSTEM__INTERRUPT_CLEAR
 800082a:	2107      	movs	r1, #7
 800082c:	2015      	movs	r0, #21
 800082e:	f7ff ff9f 	bl	8000770 <VL6180X_WriteReg>

    uint8_t rangeStatus = VL6180X_ReadReg(0x0063);
 8000832:	2063      	movs	r0, #99	@ 0x63
 8000834:	f7ff ffb8 	bl	80007a8 <VL6180X_ReadReg>
 8000838:	4603      	mov	r3, r0
 800083a:	71bb      	strb	r3, [r7, #6]
    if (rangeStatus != 0x00) {
//        printf("Foutstatus: 0x%02X\r\n", rangeStatus);
    }

    return range;
 800083c:	79fb      	ldrb	r3, [r7, #7]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f000 fc98 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 f832 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000854:	f000 f9ca 	bl	8000bec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000858:	f000 f8a0 	bl	800099c <MX_I2C1_Init>
  MX_TIM2_Init();
 800085c:	f000 f8de 	bl	8000a1c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000860:	f000 f978 	bl	8000b54 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000864:	f000 f928 	bl	8000ab8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000868:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <main+0x5c>)
 800086a:	f006 fa6d 	bl	8006d48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800086e:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <main+0x60>)
 8000870:	f006 fa6a 	bl	8006d48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  TCA9548A_SelectChannel(4);    // Selecteer kanaal 4
 8000874:	2004      	movs	r0, #4
 8000876:	f000 f9e3 	bl	8000c40 <TCA9548A_SelectChannel>
  HAL_Delay(10);
 800087a:	200a      	movs	r0, #10
 800087c:	f000 fd3e 	bl	80012fc <HAL_Delay>
  VL6180X_SimpleInit();
 8000880:	f7ff fec6 	bl	8000610 <VL6180X_SimpleInit>

  while (1)
  {
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)&dataFromMainProcessor, sizeof(dataFromMainProcessor));
 8000884:	2206      	movs	r2, #6
 8000886:	4909      	ldr	r1, [pc, #36]	@ (80008ac <main+0x64>)
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <main+0x68>)
 800088a:	f007 f92b 	bl	8007ae4 <HAL_UART_Receive_IT>

	    if (sendDataFlag) {
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <main+0x6c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0f5      	beq.n	8000884 <main+0x3c>
	        sendDataFlag = false;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <main+0x6c>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
	        SendSerialData();
 800089e:	f000 f9eb 	bl	8000c78 <SendSerialData>
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)&dataFromMainProcessor, sizeof(dataFromMainProcessor));
 80008a2:	e7ef      	b.n	8000884 <main+0x3c>
 80008a4:	2000007c 	.word	0x2000007c
 80008a8:	200000c8 	.word	0x200000c8
 80008ac:	200001b8 	.word	0x200001b8
 80008b0:	20000114 	.word	0x20000114
 80008b4:	200001be 	.word	0x200001be

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	@ 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2250      	movs	r2, #80	@ 0x50
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f009 f804 	bl	80098d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008de:	4b2d      	ldr	r3, [pc, #180]	@ (8000994 <SystemClock_Config+0xdc>)
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000994 <SystemClock_Config+0xdc>)
 80008e4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008e8:	6113      	str	r3, [r2, #16]
 80008ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <SystemClock_Config+0xdc>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f6:	bf00      	nop
 80008f8:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <SystemClock_Config+0xdc>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	2b08      	cmp	r3, #8
 8000902:	d1f9      	bne.n	80008f8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000904:	2310      	movs	r3, #16
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800090c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800090e:	2320      	movs	r3, #32
 8000910:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000916:	2302      	movs	r3, #2
 8000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 800091e:	232a      	movs	r3, #42	@ 0x2a
 8000920:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000922:	2302      	movs	r3, #2
 8000924:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800092e:	2308      	movs	r3, #8
 8000930:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000932:	2300      	movs	r3, #0
 8000934:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4618      	mov	r0, r3
 8000940:	f001 ffac 	bl	800289c <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800094a:	f000 f9f9 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	231f      	movs	r3, #31
 8000950:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2303      	movs	r3, #3
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fbcd 	bl	800310c <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000978:	f000 f9e2 	bl	8000d40 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <SystemClock_Config+0xe0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <SystemClock_Config+0xe0>)
 8000986:	f043 0320 	orr.w	r3, r3, #32
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	3770      	adds	r7, #112	@ 0x70
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	44020800 	.word	0x44020800
 8000998:	40022000 	.word	0x40022000

0800099c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a14 <MX_I2C1_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A0A4F8;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <MX_I2C1_Init+0x7c>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d6:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009d8:	f001 f848 	bl	8001a6c <HAL_I2C_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009e2:	f000 f9ad 	bl	8000d40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009ea:	f001 febf 	bl	800276c <HAL_I2CEx_ConfigAnalogFilter>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f000 f9a4 	bl	8000d40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009fc:	f001 ff01 	bl	8002802 <HAL_I2CEx_ConfigDigitalFilter>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f99b 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000028 	.word	0x20000028
 8000a14:	40005400 	.word	0x40005400
 8000a18:	10a0a4f8 	.word	0x10a0a4f8

08000a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a44:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a64:	4813      	ldr	r0, [pc, #76]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a66:	f006 f917 	bl	8006c98 <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 f966 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a82:	f006 fb5f 	bl	8007144 <HAL_TIM_ConfigClockSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a8c:	f000 f958 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_TIM2_Init+0x98>)
 8000a9e:	f006 fe1d 	bl	80076dc <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000aa8:	f000 f94a 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000007c 	.word	0x2000007c

08000ab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <MX_TIM3_Init+0x98>)
 8000ada:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000ade:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000ae2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000aec:	2263      	movs	r2, #99	@ 0x63
 8000aee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000afe:	f006 f8cb 	bl	8006c98 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b08:	f000 f91a 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000b1a:	f006 fb13 	bl	8007144 <HAL_TIM_ConfigClockSource>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b24:	f000 f90c 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_TIM3_Init+0x94>)
 8000b36:	f006 fdd1 	bl	80076dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f8fe 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000c8 	.word	0x200000c8
 8000b50:	40000400 	.word	0x40000400

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b5a:	4a23      	ldr	r2, [pc, #140]	@ (8000be8 <MX_USART2_UART_Init+0x94>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9c:	4811      	ldr	r0, [pc, #68]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b9e:	f006 feb3 	bl	8007908 <HAL_UART_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f8ca 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bb0:	f008 fdc5 	bl	800973e <HAL_UARTEx_SetTxFifoThreshold>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f000 f8c1 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bc2:	f008 fdfa 	bl	80097ba <HAL_UARTEx_SetRxFifoThreshold>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f000 f8b8 	bl	8000d40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bd2:	f008 fd7b 	bl	80096cc <HAL_UARTEx_DisableFifoMode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 f8b0 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000114 	.word	0x20000114
 8000be8:	40004400 	.word	0x40004400

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_GPIO_Init+0x50>)
 8000bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bf8:	4a10      	ldr	r2, [pc, #64]	@ (8000c3c <MX_GPIO_Init+0x50>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_GPIO_Init+0x50>)
 8000c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <MX_GPIO_Init+0x50>)
 8000c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c16:	4a09      	ldr	r2, [pc, #36]	@ (8000c3c <MX_GPIO_Init+0x50>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_GPIO_Init+0x50>)
 8000c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	44020c00 	.word	0x44020c00

08000c40 <TCA9548A_SelectChannel>:
  	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
  	return ch;
}

void TCA9548A_SelectChannel(uint8_t channel)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
    uint8_t command = (1 << channel);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, TCA9548A_ADDR, &command, 1, HAL_MAX_DELAY);
 8000c56:	f107 020f 	add.w	r2, r7, #15
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	21e0      	movs	r1, #224	@ 0xe0
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <TCA9548A_SelectChannel+0x34>)
 8000c66:	f000 ff9d 	bl	8001ba4 <HAL_I2C_Master_Transmit>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000028 	.word	0x20000028

08000c78 <SendSerialData>:

void SendSerialData() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
//	if (VL6180X_IsReady()) {
		uint8_t afstand = VL6180X_ReadRange();
 8000c7e:	f7ff fdaf 	bl	80007e0 <VL6180X_ReadRange>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
		dataToMainProcessor.disMmSideFront = afstand;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <SendSerialData+0x80>)
 8000c8c:	80da      	strh	r2, [r3, #6]
//	}

    dataToMainProcessor.voltageBattery = 25.0;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <SendSerialData+0x80>)
 8000c90:	4a1a      	ldr	r2, [pc, #104]	@ (8000cfc <SendSerialData+0x84>)
 8000c92:	601a      	str	r2, [r3, #0]

    dataToMainProcessor.disMmFront = 15;
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <SendSerialData+0x80>)
 8000c96:	220f      	movs	r2, #15
 8000c98:	809a      	strh	r2, [r3, #4]

//    SelectTCA9548A(5);
    dataToMainProcessor.disMmSideBack = 2;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <SendSerialData+0x80>)
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	811a      	strh	r2, [r3, #8]

    dataToMainProcessor.potMeterValue = 8;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <SendSerialData+0x80>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	815a      	strh	r2, [r3, #10]
//    dataToMainProcessor.disMmSideFront = VL6180X_ReadRange();

//    dataToMainProcessor.flags = 0;
//    dataToMainProcessor.flags |= (1 << 0);
    dataToMainProcessor.flags ^= (1 << 0); // Wissel bit 0
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <SendSerialData+0x80>)
 8000ca8:	7b1b      	ldrb	r3, [r3, #12]
 8000caa:	f083 0301 	eor.w	r3, r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <SendSerialData+0x80>)
 8000cb2:	731a      	strb	r2, [r3, #12]
  // send data to Processor

  struct DataToMainProcessor tempDataToProcessor = { dataToMainProcessor.voltageBattery,
 8000cb4:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <SendSerialData+0x80>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	603b      	str	r3, [r7, #0]
                                              dataToMainProcessor.disMmFront,
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <SendSerialData+0x80>)
 8000cbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  struct DataToMainProcessor tempDataToProcessor = { dataToMainProcessor.voltageBattery,
 8000cc0:	80bb      	strh	r3, [r7, #4]
                                              dataToMainProcessor.disMmSideFront,
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <SendSerialData+0x80>)
 8000cc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  struct DataToMainProcessor tempDataToProcessor = { dataToMainProcessor.voltageBattery,
 8000cc8:	80fb      	strh	r3, [r7, #6]
											  dataToMainProcessor.disMmSideBack,
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <SendSerialData+0x80>)
 8000ccc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  struct DataToMainProcessor tempDataToProcessor = { dataToMainProcessor.voltageBattery,
 8000cd0:	813b      	strh	r3, [r7, #8]
                                              dataToMainProcessor.potMeterValue,
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <SendSerialData+0x80>)
 8000cd4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
  struct DataToMainProcessor tempDataToProcessor = { dataToMainProcessor.voltageBattery,
 8000cd8:	817b      	strh	r3, [r7, #10]
                                              dataToMainProcessor.flags };
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <SendSerialData+0x80>)
 8000cdc:	7b1b      	ldrb	r3, [r3, #12]
  struct DataToMainProcessor tempDataToProcessor = { dataToMainProcessor.voltageBattery,
 8000cde:	733b      	strb	r3, [r7, #12]

  HAL_UART_Transmit(&huart2, (uint8_t*)&tempDataToProcessor, sizeof(tempDataToProcessor), HAL_MAX_DELAY);
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	220d      	movs	r2, #13
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <SendSerialData+0x88>)
 8000cea:	f006 fe5d 	bl	80079a8 <HAL_UART_Transmit>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001a8 	.word	0x200001a8
 8000cfc:	41c80000 	.word	0x41c80000
 8000d00:	20000114 	.word	0x20000114

08000d04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if (htim->Instance == TIM2){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d28:	d102      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x18>
	  sendDataFlag = true;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
  }
  if (htim->Instance == TIM3){
//	    VL6180X_Process();
  }

}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	200001be 	.word	0x200001be

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <Error_Handler+0x8>

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0be      	sub	sp, #248	@ 0xf8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	22d0      	movs	r2, #208	@ 0xd0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f008 fda9 	bl	80098d4 <memset>
  if(hi2c->Instance==I2C1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a26      	ldr	r2, [pc, #152]	@ (8000e20 <HAL_I2C_MspInit+0xc4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d145      	bne.n	8000e18 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fcf4 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000dae:	f7ff ffc7 	bl	8000d40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd0:	23c0      	movs	r3, #192	@ 0xc0
 8000dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <HAL_I2C_MspInit+0xcc>)
 8000df6:	f000 fcdb 	bl	80017b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e00:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e06:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_I2C_MspInit+0xc8>)
 8000e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e18:	bf00      	nop
 8000e1a:	37f8      	adds	r7, #248	@ 0xf8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40005400 	.word	0x40005400
 8000e24:	44020c00 	.word	0x44020c00
 8000e28:	42020400 	.word	0x42020400

08000e2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e3c:	d117      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x84>)
 8000e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e44:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x84>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x84>)
 8000e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	202d      	movs	r0, #45	@ 0x2d
 8000e62:	f000 fb27 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e66:	202d      	movs	r0, #45	@ 0x2d
 8000e68:	f000 fb3e 	bl	80014e8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e6c:	e01b      	b.n	8000ea6 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x88>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d116      	bne.n	8000ea6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e78:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x84>)
 8000e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x84>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000e88:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x84>)
 8000e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	202e      	movs	r0, #46	@ 0x2e
 8000e9c:	f000 fb0a 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ea0:	202e      	movs	r0, #46	@ 0x2e
 8000ea2:	f000 fb21 	bl	80014e8 <HAL_NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	44020c00 	.word	0x44020c00
 8000eb4:	40000400 	.word	0x40000400

08000eb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0be      	sub	sp, #248	@ 0xf8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	22d0      	movs	r2, #208	@ 0xd0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f008 fcfb 	bl	80098d4 <memset>
  if(huart->Instance==USART2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_UART_MspInit+0xd4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d14c      	bne.n	8000f82 <HAL_UART_MspInit+0xca>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee8:	f04f 0202 	mov.w	r2, #2
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 fc47 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000f08:	f7ff ff1a 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0c:	4b20      	ldr	r3, [pc, #128]	@ (8000f90 <HAL_UART_MspInit+0xd8>)
 8000f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f12:	4a1f      	ldr	r2, [pc, #124]	@ (8000f90 <HAL_UART_MspInit+0xd8>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <HAL_UART_MspInit+0xd8>)
 8000f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <HAL_UART_MspInit+0xd8>)
 8000f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f30:	4a17      	ldr	r2, [pc, #92]	@ (8000f90 <HAL_UART_MspInit+0xd8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_UART_MspInit+0xd8>)
 8000f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f48:	230c      	movs	r3, #12
 8000f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f60:	2307      	movs	r3, #7
 8000f62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <HAL_UART_MspInit+0xdc>)
 8000f6e:	f000 fc1f 	bl	80017b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	203b      	movs	r0, #59	@ 0x3b
 8000f78:	f000 fa9c 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f7c:	203b      	movs	r0, #59	@ 0x3b
 8000f7e:	f000 fab3 	bl	80014e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f82:	bf00      	nop
 8000f84:	37f8      	adds	r7, #248	@ 0xf8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40004400 	.word	0x40004400
 8000f90:	44020c00 	.word	0x44020c00
 8000f94:	42020000 	.word	0x42020000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <NMI_Handler+0x4>

08000fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <MemManage_Handler+0x4>

08000fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fee:	f000 f965 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <TIM2_IRQHandler+0x10>)
 8000ffe:	f005 ff51 	bl	8006ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000007c 	.word	0x2000007c

0800100c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <TIM3_IRQHandler+0x10>)
 8001012:	f005 ff47 	bl	8006ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000c8 	.word	0x200000c8

08001020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <USART2_IRQHandler+0x10>)
 8001026:	f006 fdbf 	bl	8007ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000114 	.word	0x20000114

08001034 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800103a:	4b35      	ldr	r3, [pc, #212]	@ (8001110 <SystemInit+0xdc>)
 800103c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001040:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <SystemInit+0xdc>)
 8001042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001046:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800104a:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <SystemInit+0xe0>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001050:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <SystemInit+0xe0>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001056:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <SystemInit+0xe0>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800105c:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <SystemInit+0xe0>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	492c      	ldr	r1, [pc, #176]	@ (8001114 <SystemInit+0xe0>)
 8001062:	4b2d      	ldr	r3, [pc, #180]	@ (8001118 <SystemInit+0xe4>)
 8001064:	4013      	ands	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001068:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <SystemInit+0xe0>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800106e:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <SystemInit+0xe0>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001074:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <SystemInit+0xe0>)
 8001076:	2200      	movs	r2, #0
 8001078:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <SystemInit+0xe0>)
 800107c:	4a27      	ldr	r2, [pc, #156]	@ (800111c <SystemInit+0xe8>)
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <SystemInit+0xe0>)
 8001082:	2200      	movs	r2, #0
 8001084:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <SystemInit+0xe0>)
 8001088:	4a24      	ldr	r2, [pc, #144]	@ (800111c <SystemInit+0xe8>)
 800108a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800108c:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <SystemInit+0xe0>)
 800108e:	2200      	movs	r2, #0
 8001090:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <SystemInit+0xe0>)
 8001094:	4a21      	ldr	r2, [pc, #132]	@ (800111c <SystemInit+0xe8>)
 8001096:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001098:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <SystemInit+0xe0>)
 800109a:	2200      	movs	r2, #0
 800109c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <SystemInit+0xe0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001114 <SystemInit+0xe0>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <SystemInit+0xe0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <SystemInit+0xdc>)
 80010b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010b6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80010b8:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <SystemInit+0xec>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80010c0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80010c8:	d003      	beq.n	80010d2 <SystemInit+0x9e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80010d0:	d117      	bne.n	8001102 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <SystemInit+0xec>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <SystemInit+0xec>)
 80010e0:	4a10      	ldr	r2, [pc, #64]	@ (8001124 <SystemInit+0xf0>)
 80010e2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <SystemInit+0xec>)
 80010e6:	4a10      	ldr	r2, [pc, #64]	@ (8001128 <SystemInit+0xf4>)
 80010e8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <SystemInit+0xec>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <SystemInit+0xec>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <SystemInit+0xec>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <SystemInit+0xec>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	61d3      	str	r3, [r2, #28]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	44020c00 	.word	0x44020c00
 8001118:	eae2eae3 	.word	0xeae2eae3
 800111c:	01010280 	.word	0x01010280
 8001120:	40022000 	.word	0x40022000
 8001124:	08192a3b 	.word	0x08192a3b
 8001128:	4c5d6e7f 	.word	0x4c5d6e7f

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800112c:	480d      	ldr	r0, [pc, #52]	@ (8001164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800112e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001130:	f7ff ff80 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopForever+0xe>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800115a:	f008 fbc3 	bl	80098e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115e:	f7ff fb73 	bl	8000848 <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   r0, =_estack
 8001164:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001170:	08009994 	.word	0x08009994
  ldr r2, =_sbss
 8001174:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001178:	200001c4 	.word	0x200001c4

0800117c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_IRQHandler>
	...

08001180 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f98a 	bl	800149e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800118a:	f002 f977 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800118e:	4602      	mov	r2, r0
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <HAL_Init+0x44>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	490b      	ldr	r1, [pc, #44]	@ (80011c8 <HAL_Init+0x48>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
 80011a0:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <HAL_Init+0x4c>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011a4:	2004      	movs	r0, #4
 80011a6:	f000 f9cf 	bl	8001548 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f810 	bl	80011d0 <HAL_InitTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e002      	b.n	80011c0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ba:	f7ff fdc7 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	44020c00 	.word	0x44020c00
 80011c8:	08009944 	.word	0x08009944
 80011cc:	20000000 	.word	0x20000000

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80011dc:	4b33      	ldr	r3, [pc, #204]	@ (80012ac <HAL_InitTick+0xdc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e05c      	b.n	80012a2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80011e8:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <HAL_InitTick+0xe0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d10c      	bne.n	800120e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80011f4:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <HAL_InitTick+0xe4>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <HAL_InitTick+0xdc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	e037      	b.n	800127e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800120e:	f000 f9f3 	bl	80015f8 <HAL_SYSTICK_GetCLKSourceConfig>
 8001212:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d023      	beq.n	8001262 <HAL_InitTick+0x92>
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d82d      	bhi.n	800127c <HAL_InitTick+0xac>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_InitTick+0x5e>
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d00d      	beq.n	8001248 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800122c:	e026      	b.n	800127c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800122e:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <HAL_InitTick+0xe4>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <HAL_InitTick+0xdc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4619      	mov	r1, r3
 8001238:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800123c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	60fb      	str	r3, [r7, #12]
        break;
 8001246:	e01a      	b.n	800127e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_InitTick+0xdc>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001252:	fbb3 f3f2 	udiv	r3, r3, r2
 8001256:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	60fb      	str	r3, [r7, #12]
        break;
 8001260:	e00d      	b.n	800127e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_InitTick+0xdc>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001270:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001274:	fbb2 f3f3 	udiv	r3, r2, r3
 8001278:	60fb      	str	r3, [r7, #12]
        break;
 800127a:	e000      	b.n	800127e <HAL_InitTick+0xae>
        break;
 800127c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f940 	bl	8001504 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e009      	b.n	80012a2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128e:	2200      	movs	r2, #0
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f04f 30ff 	mov.w	r0, #4294967295
 8001296:	f000 f90d 	bl	80014b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800129a:	4a07      	ldr	r2, [pc, #28]	@ (80012b8 <HAL_InitTick+0xe8>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	e000e010 	.word	0xe000e010
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	200001c0 	.word	0x200001c0

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200001c0 	.word	0x200001c0

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	@ (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ff4c 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c2:	f7ff ff63 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	6978      	ldr	r0, [r7, #20]
 80014ce:	f7ff ffb3 	bl	8001438 <NVIC_EncodePriority>
 80014d2:	4602      	mov	r2, r0
 80014d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff82 	bl	80013e4 <__NVIC_SetPriority>
}
 80014e0:	bf00      	nop
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff56 	bl	80013a8 <__NVIC_EnableIRQ>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001514:	d301      	bcc.n	800151a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001516:	2301      	movs	r3, #1
 8001518:	e00d      	b.n	8001536 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_SYSTICK_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_SYSTICK_Config+0x40>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_SYSTICK_Config+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <HAL_SYSTICK_Config+0x40>)
 800152e:	f043 0303 	orr.w	r3, r3, #3
 8001532:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d844      	bhi.n	80015e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001556:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	0800157f 	.word	0x0800157f
 8001560:	0800159d 	.word	0x0800159d
 8001564:	080015bf 	.word	0x080015bf
 8001568:	080015e1 	.word	0x080015e1
 800156c:	08001571 	.word	0x08001571
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6013      	str	r3, [r2, #0]
      break;
 800157c:	e031      	b.n	80015e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1b      	ldr	r2, [pc, #108]	@ (80015f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800158c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001590:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001592:	f023 030c 	bic.w	r3, r3, #12
 8001596:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800159a:	e022      	b.n	80015e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015ae:	f023 030c 	bic.w	r3, r3, #12
 80015b2:	4a10      	ldr	r2, [pc, #64]	@ (80015f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80015bc:	e011      	b.n	80015e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015d0:	f023 030c 	bic.w	r3, r3, #12
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80015de:	e000      	b.n	80015e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80015e0:	bf00      	nop
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010
 80015f4:	44020c00 	.word	0x44020c00

080015f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800160a:	2304      	movs	r3, #4
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	e01e      	b.n	800164e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001612:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b08      	cmp	r3, #8
 8001620:	d00f      	beq.n	8001642 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b08      	cmp	r3, #8
 8001626:	d80f      	bhi.n	8001648 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d003      	beq.n	800163c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001634:	e008      	b.n	8001648 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
        break;
 800163a:	e008      	b.n	800164e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800163c:	2301      	movs	r3, #1
 800163e:	607b      	str	r3, [r7, #4]
        break;
 8001640:	e005      	b.n	800164e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001642:	2302      	movs	r3, #2
 8001644:	607b      	str	r3, [r7, #4]
        break;
 8001646:	e002      	b.n	800164e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
        break;
 800164c:	bf00      	nop
    }
  }
  return systick_source;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e010 	.word	0xe000e010
 8001660:	44020c00 	.word	0x44020c00

08001664 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800166c:	f7ff fe3a 	bl	80012e4 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e06b      	b.n	8001754 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d008      	beq.n	800169a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2220      	movs	r2, #32
 800168c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e05c      	b.n	8001754 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0204 	orr.w	r2, r2, #4
 80016a8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2205      	movs	r2, #5
 80016ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80016b2:	e020      	b.n	80016f6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80016b4:	f7ff fe16 	bl	80012e4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d919      	bls.n	80016f6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2203      	movs	r2, #3
 80016d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e6:	2201      	movs	r2, #1
 80016e8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e02e      	b.n	8001754 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0d7      	beq.n	80016b4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0202 	orr.w	r2, r2, #2
 8001712:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2204      	movs	r2, #4
 8001718:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001724:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800173e:	2201      	movs	r2, #1
 8001740:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e019      	b.n	80017a2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d004      	beq.n	8001784 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2220      	movs	r2, #32
 800177e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e00e      	b.n	80017a2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2204      	movs	r2, #4
 8001788:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80017be:	e142      	b.n	8001a46 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8134 	beq.w	8001a40 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x38>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b12      	cmp	r3, #18
 80017e6:	d125      	bne.n	8001834 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	f003 020f 	and.w	r2, r3, #15
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	6979      	ldr	r1, [r7, #20]
 8001830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4013      	ands	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0203 	and.w	r2, r3, #3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4313      	orrs	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d00b      	beq.n	8001888 <HAL_GPIO_Init+0xd8>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d007      	beq.n	8001888 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800187c:	2b11      	cmp	r3, #17
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d130      	bne.n	80018ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018be:	2201      	movs	r2, #1
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4013      	ands	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f003 0201 	and.w	r2, r3, #1
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d109      	bne.n	800190a <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d11b      	bne.n	800193a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d017      	beq.n	800193a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4013      	ands	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d07c      	beq.n	8001a40 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001946:	4a47      	ldr	r2, [pc, #284]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3318      	adds	r3, #24
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	4013      	ands	r3, r2
 8001968:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	0a9a      	lsrs	r2, r3, #10
 800196e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a68 <HAL_GPIO_Init+0x2b8>)
 8001970:	4013      	ands	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	f002 0203 	and.w	r2, r2, #3
 8001978:	00d2      	lsls	r2, r2, #3
 800197a:	4093      	lsls	r3, r2
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001982:	4938      	ldr	r1, [pc, #224]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3318      	adds	r3, #24
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001990:	4b34      	ldr	r3, [pc, #208]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4013      	ands	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80019b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4013      	ands	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80019de:	4a21      	ldr	r2, [pc, #132]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 80019e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4013      	ands	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001a0a:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 8001a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a18:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4013      	ands	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001a38:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_GPIO_Init+0x2b4>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	3301      	adds	r3, #1
 8001a44:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f aeb5 	bne.w	80017c0 <HAL_GPIO_Init+0x10>
  }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	44022000 	.word	0x44022000
 8001a68:	002f7f7f 	.word	0x002f7f7f

08001a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e08d      	b.n	8001b9a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff f962 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2224      	movs	r2, #36	@ 0x24
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d108      	bne.n	8001b0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	e007      	b.n	8001b1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69d9      	ldr	r1, [r3, #28]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	817b      	strh	r3, [r7, #10]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	f040 80da 	bne.w	8001d7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_I2C_Master_Transmit+0x30>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e0d3      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bdc:	f7ff fb82 	bl	80012e4 <HAL_GetTick>
 8001be0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2319      	movs	r3, #25
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fbc6 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0be      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2221      	movs	r2, #33	@ 0x21
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	893a      	ldrh	r2, [r7, #8]
 8001c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2bff      	cmp	r3, #255	@ 0xff
 8001c2e:	d90e      	bls.n	8001c4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	22ff      	movs	r2, #255	@ 0xff
 8001c34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	8979      	ldrh	r1, [r7, #10]
 8001c3e:	4b51      	ldr	r3, [pc, #324]	@ (8001d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fd5e 	bl	8002708 <I2C_TransferConfig>
 8001c4c:	e06c      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	8979      	ldrh	r1, [r7, #10]
 8001c60:	4b48      	ldr	r3, [pc, #288]	@ (8001d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fd4d 	bl	8002708 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c6e:	e05b      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6a39      	ldr	r1, [r7, #32]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fbdc 	bl	8002432 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e07b      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d034      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d130      	bne.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	@ 0x80
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 fb55 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e04d      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2bff      	cmp	r3, #255	@ 0xff
 8001ce8:	d90e      	bls.n	8001d08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	22ff      	movs	r2, #255	@ 0xff
 8001cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fd01 	bl	8002708 <I2C_TransferConfig>
 8001d06:	e00f      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	8979      	ldrh	r1, [r7, #10]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fcf0 	bl	8002708 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d19e      	bne.n	8001c70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	6a39      	ldr	r1, [r7, #32]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fbc2 	bl	80024c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e01a      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_I2C_Master_Transmit+0x1e4>)
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	80002000 	.word	0x80002000
 8001d88:	fe00e800 	.word	0xfe00e800

08001d8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	817b      	strh	r3, [r7, #10]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	813b      	strh	r3, [r7, #8]
 8001da2:	4613      	mov	r3, r2
 8001da4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	f040 80f9 	bne.w	8001fa6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_I2C_Mem_Write+0x34>
 8001dba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0ed      	b.n	8001fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_I2C_Mem_Write+0x4e>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e0e6      	b.n	8001fa8 <HAL_I2C_Mem_Write+0x21c>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001de2:	f7ff fa7f 	bl	80012e4 <HAL_GetTick>
 8001de6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2319      	movs	r3, #25
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fac3 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d1      	b.n	8001fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2221      	movs	r2, #33	@ 0x21
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2240      	movs	r2, #64	@ 0x40
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a3a      	ldr	r2, [r7, #32]
 8001e1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e2c:	88f8      	ldrh	r0, [r7, #6]
 8001e2e:	893a      	ldrh	r2, [r7, #8]
 8001e30:	8979      	ldrh	r1, [r7, #10]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f9d3 	bl	80021e8 <I2C_RequestMemoryWrite>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0a9      	b.n	8001fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2bff      	cmp	r3, #255	@ 0xff
 8001e5c:	d90e      	bls.n	8001e7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	22ff      	movs	r2, #255	@ 0xff
 8001e62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	8979      	ldrh	r1, [r7, #10]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 fc47 	bl	8002708 <I2C_TransferConfig>
 8001e7a:	e00f      	b.n	8001e9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	8979      	ldrh	r1, [r7, #10]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 fc36 	bl	8002708 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fac6 	bl	8002432 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e07b      	b.n	8001fa8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d034      	beq.n	8001f54 <HAL_I2C_Mem_Write+0x1c8>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d130      	bne.n	8001f54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2180      	movs	r1, #128	@ 0x80
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fa3f 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e04d      	b.n	8001fa8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2bff      	cmp	r3, #255	@ 0xff
 8001f14:	d90e      	bls.n	8001f34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	22ff      	movs	r2, #255	@ 0xff
 8001f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	8979      	ldrh	r1, [r7, #10]
 8001f24:	2300      	movs	r3, #0
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fbeb 	bl	8002708 <I2C_TransferConfig>
 8001f32:	e00f      	b.n	8001f54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	8979      	ldrh	r1, [r7, #10]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fbda 	bl	8002708 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d19e      	bne.n	8001e9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 faac 	bl	80024c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e01a      	b.n	8001fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2220      	movs	r2, #32
 8001f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <HAL_I2C_Mem_Write+0x224>)
 8001f86:	400b      	ands	r3, r1
 8001f88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	fe00e800 	.word	0xfe00e800

08001fb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	817b      	strh	r3, [r7, #10]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	813b      	strh	r3, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	f040 80fd 	bne.w	80021d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <HAL_I2C_Mem_Read+0x34>
 8001fe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0f1      	b.n	80021d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_Mem_Read+0x4e>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0ea      	b.n	80021d8 <HAL_I2C_Mem_Read+0x224>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800200a:	f7ff f96b 	bl	80012e4 <HAL_GetTick>
 800200e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2319      	movs	r3, #25
 8002016:	2201      	movs	r2, #1
 8002018:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f9af 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0d5      	b.n	80021d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2222      	movs	r2, #34	@ 0x22
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a3a      	ldr	r2, [r7, #32]
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800204c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002054:	88f8      	ldrh	r0, [r7, #6]
 8002056:	893a      	ldrh	r2, [r7, #8]
 8002058:	8979      	ldrh	r1, [r7, #10]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	4603      	mov	r3, r0
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f913 	bl	8002290 <I2C_RequestMemoryRead>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0ad      	b.n	80021d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	2bff      	cmp	r3, #255	@ 0xff
 8002084:	d90e      	bls.n	80020a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	22ff      	movs	r2, #255	@ 0xff
 800208a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002090:	b2da      	uxtb	r2, r3
 8002092:	8979      	ldrh	r1, [r7, #10]
 8002094:	4b52      	ldr	r3, [pc, #328]	@ (80021e0 <HAL_I2C_Mem_Read+0x22c>)
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fb33 	bl	8002708 <I2C_TransferConfig>
 80020a2:	e00f      	b.n	80020c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	8979      	ldrh	r1, [r7, #10]
 80020b6:	4b4a      	ldr	r3, [pc, #296]	@ (80021e0 <HAL_I2C_Mem_Read+0x22c>)
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fb22 	bl	8002708 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ca:	2200      	movs	r2, #0
 80020cc:	2104      	movs	r1, #4
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f956 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07c      	b.n	80021d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d034      	beq.n	8002184 <HAL_I2C_Mem_Read+0x1d0>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d130      	bne.n	8002184 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002128:	2200      	movs	r2, #0
 800212a:	2180      	movs	r1, #128	@ 0x80
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f927 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e04d      	b.n	80021d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	2bff      	cmp	r3, #255	@ 0xff
 8002144:	d90e      	bls.n	8002164 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	22ff      	movs	r2, #255	@ 0xff
 800214a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002150:	b2da      	uxtb	r2, r3
 8002152:	8979      	ldrh	r1, [r7, #10]
 8002154:	2300      	movs	r3, #0
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fad3 	bl	8002708 <I2C_TransferConfig>
 8002162:	e00f      	b.n	8002184 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002172:	b2da      	uxtb	r2, r3
 8002174:	8979      	ldrh	r1, [r7, #10]
 8002176:	2300      	movs	r3, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fac2 	bl	8002708 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d19a      	bne.n	80020c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f994 	bl	80024c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e01a      	b.n	80021d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2220      	movs	r2, #32
 80021a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_I2C_Mem_Read+0x230>)
 80021b6:	400b      	ands	r3, r1
 80021b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e000      	b.n	80021d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021d6:	2302      	movs	r3, #2
  }
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	80002400 	.word	0x80002400
 80021e4:	fe00e800 	.word	0xfe00e800

080021e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	817b      	strh	r3, [r7, #10]
 80021fa:	460b      	mov	r3, r1
 80021fc:	813b      	strh	r3, [r7, #8]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	8979      	ldrh	r1, [r7, #10]
 8002208:	4b20      	ldr	r3, [pc, #128]	@ (800228c <I2C_RequestMemoryWrite+0xa4>)
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fa79 	bl	8002708 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	69b9      	ldr	r1, [r7, #24]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f909 	bl	8002432 <I2C_WaitOnTXISFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e02c      	b.n	8002284 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002230:	893b      	ldrh	r3, [r7, #8]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	629a      	str	r2, [r3, #40]	@ 0x28
 800223a:	e015      	b.n	8002268 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800223c:	893b      	ldrh	r3, [r7, #8]
 800223e:	0a1b      	lsrs	r3, r3, #8
 8002240:	b29b      	uxth	r3, r3
 8002242:	b2da      	uxtb	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f8ef 	bl	8002432 <I2C_WaitOnTXISFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e012      	b.n	8002284 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800225e:	893b      	ldrh	r3, [r7, #8]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2200      	movs	r2, #0
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f884 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	80002000 	.word	0x80002000

08002290 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	817b      	strh	r3, [r7, #10]
 80022a2:	460b      	mov	r3, r1
 80022a4:	813b      	strh	r3, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	8979      	ldrh	r1, [r7, #10]
 80022b0:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <I2C_RequestMemoryRead+0xa4>)
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fa26 	bl	8002708 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	69b9      	ldr	r1, [r7, #24]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f8b6 	bl	8002432 <I2C_WaitOnTXISFlagUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e02c      	b.n	800232a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d105      	bne.n	80022e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022d6:	893b      	ldrh	r3, [r7, #8]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	629a      	str	r2, [r3, #40]	@ 0x28
 80022e0:	e015      	b.n	800230e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022e2:	893b      	ldrh	r3, [r7, #8]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f89c 	bl	8002432 <I2C_WaitOnTXISFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e012      	b.n	800232a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002304:	893b      	ldrh	r3, [r7, #8]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	@ 0x40
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f831 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	80002000 	.word	0x80002000

08002338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d103      	bne.n	8002356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d007      	beq.n	8002374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	619a      	str	r2, [r3, #24]
  }
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	e03b      	b.n	800240a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f8d6 	bl	8002548 <I2C_IsErrorOccurred>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e041      	b.n	800242a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d02d      	beq.n	800240a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7fe ff99 	bl	80012e4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d122      	bne.n	800240a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4013      	ands	r3, r2
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d113      	bne.n	800240a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	f043 0220 	orr.w	r2, r3, #32
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e00f      	b.n	800242a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4013      	ands	r3, r2
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	429a      	cmp	r2, r3
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	429a      	cmp	r2, r3
 8002426:	d0b4      	beq.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800243e:	e033      	b.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f87f 	bl	8002548 <I2C_IsErrorOccurred>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e031      	b.n	80024b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d025      	beq.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245c:	f7fe ff42 	bl	80012e4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	429a      	cmp	r2, r3
 800246a:	d302      	bcc.n	8002472 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11a      	bne.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b02      	cmp	r3, #2
 800247e:	d013      	beq.n	80024a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002484:	f043 0220 	orr.w	r2, r3, #32
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d1c4      	bne.n	8002440 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024cc:	e02f      	b.n	800252e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f838 	bl	8002548 <I2C_IsErrorOccurred>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e02d      	b.n	800253e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7fe feff 	bl	80012e4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11a      	bne.n	800252e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b20      	cmp	r3, #32
 8002504:	d013      	beq.n	800252e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f043 0220 	orr.w	r2, r3, #32
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e007      	b.n	800253e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b20      	cmp	r3, #32
 800253a:	d1c8      	bne.n	80024ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	@ 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d068      	beq.n	8002646 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2210      	movs	r2, #16
 800257a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800257c:	e049      	b.n	8002612 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d045      	beq.n	8002612 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002586:	f7fe fead 	bl	80012e4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	d302      	bcc.n	800259c <I2C_IsErrorOccurred+0x54>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d13a      	bne.n	8002612 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025be:	d121      	bne.n	8002604 <I2C_IsErrorOccurred+0xbc>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025c6:	d01d      	beq.n	8002604 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d01a      	beq.n	8002604 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025de:	f7fe fe81 	bl	80012e4 <HAL_GetTick>
 80025e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025e4:	e00e      	b.n	8002604 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025e6:	f7fe fe7d 	bl	80012e4 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b19      	cmp	r3, #25
 80025f2:	d907      	bls.n	8002604 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f043 0320 	orr.w	r3, r3, #32
 80025fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002602:	e006      	b.n	8002612 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d1e9      	bne.n	80025e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b20      	cmp	r3, #32
 800261e:	d003      	beq.n	8002628 <I2C_IsErrorOccurred+0xe0>
 8002620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0aa      	beq.n	800257e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2220      	movs	r2, #32
 8002636:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002668:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800268a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80026b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01c      	beq.n	80026f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff fe3b 	bl	8002338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <I2C_IsErrorOccurred+0x1bc>)
 80026ce:	400b      	ands	r3, r1
 80026d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3728      	adds	r7, #40	@ 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	fe00e800 	.word	0xfe00e800

08002708 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	817b      	strh	r3, [r7, #10]
 8002716:	4613      	mov	r3, r2
 8002718:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800271a:	897b      	ldrh	r3, [r7, #10]
 800271c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002720:	7a7b      	ldrb	r3, [r7, #9]
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002728:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	4313      	orrs	r3, r2
 8002732:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002736:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	0d5b      	lsrs	r3, r3, #21
 8002742:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002746:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <I2C_TransferConfig+0x60>)
 8002748:	430b      	orrs	r3, r1
 800274a:	43db      	mvns	r3, r3
 800274c:	ea02 0103 	and.w	r1, r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	03ff63ff 	.word	0x03ff63ff

0800276c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	d138      	bne.n	80027f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800278c:	2302      	movs	r3, #2
 800278e:	e032      	b.n	80027f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2224      	movs	r2, #36	@ 0x24
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b20      	cmp	r3, #32
 8002816:	d139      	bne.n	800288c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002822:	2302      	movs	r3, #2
 8002824:	e033      	b.n	800288e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2224      	movs	r2, #36	@ 0x24
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002854:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f000 bc28 	b.w	8003100 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b0:	4b94      	ldr	r3, [pc, #592]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f003 0318 	and.w	r3, r3, #24
 80028b8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80028ba:	4b92      	ldr	r3, [pc, #584]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05b      	beq.n	8002988 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d005      	beq.n	80028e2 <HAL_RCC_OscConfig+0x46>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	2b18      	cmp	r3, #24
 80028da:	d114      	bne.n	8002906 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d111      	bne.n	8002906 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f000 bc08 	b.w	8003100 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80028f0:	4b84      	ldr	r3, [pc, #528]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	4981      	ldr	r1, [pc, #516]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002900:	4313      	orrs	r3, r2
 8002902:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002904:	e040      	b.n	8002988 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d023      	beq.n	8002956 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800290e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7c      	ldr	r2, [pc, #496]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fce3 	bl	80012e4 <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002922:	f7fe fcdf 	bl	80012e4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e3e5      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002934:	4b73      	ldr	r3, [pc, #460]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002940:	4b70      	ldr	r3, [pc, #448]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	496d      	ldr	r1, [pc, #436]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002950:	4313      	orrs	r3, r2
 8002952:	618b      	str	r3, [r1, #24]
 8002954:	e018      	b.n	8002988 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002956:	4b6b      	ldr	r3, [pc, #428]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6a      	ldr	r2, [pc, #424]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 800295c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe fcbf 	bl	80012e4 <HAL_GetTick>
 8002966:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800296a:	f7fe fcbb 	bl	80012e4 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e3c1      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800297c:	4b61      	ldr	r3, [pc, #388]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a0 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2b10      	cmp	r3, #16
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_OscConfig+0x10c>
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b18      	cmp	r3, #24
 80029a0:	d109      	bne.n	80029b6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 8092 	bne.w	8002ad6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e3a4      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x132>
 80029c0:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e058      	b.n	8002a80 <HAL_RCC_OscConfig+0x1e4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <HAL_RCC_OscConfig+0x160>
 80029d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a4a      	ldr	r2, [pc, #296]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b48      	ldr	r3, [pc, #288]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a47      	ldr	r2, [pc, #284]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80029e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b45      	ldr	r3, [pc, #276]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a44      	ldr	r2, [pc, #272]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 80029f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e041      	b.n	8002a80 <HAL_RCC_OscConfig+0x1e4>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a04:	d112      	bne.n	8002a2c <HAL_RCC_OscConfig+0x190>
 8002a06:	4b3f      	ldr	r3, [pc, #252]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b3c      	ldr	r3, [pc, #240]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3b      	ldr	r2, [pc, #236]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a18:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b39      	ldr	r3, [pc, #228]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a38      	ldr	r2, [pc, #224]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e029      	b.n	8002a80 <HAL_RCC_OscConfig+0x1e4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002a34:	d112      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1c0>
 8002a36:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a32      	ldr	r2, [pc, #200]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b30      	ldr	r3, [pc, #192]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2f      	ldr	r2, [pc, #188]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2c      	ldr	r2, [pc, #176]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e011      	b.n	8002a80 <HAL_RCC_OscConfig+0x1e4>
 8002a5c:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a28      	ldr	r2, [pc, #160]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b26      	ldr	r3, [pc, #152]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a25      	ldr	r2, [pc, #148]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b23      	ldr	r3, [pc, #140]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a22      	ldr	r2, [pc, #136]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002a7a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fc2c 	bl	80012e4 <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fc28 	bl	80012e4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e32e      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa2:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x1f4>
 8002aae:	e012      	b.n	8002ad6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fc18 	bl	80012e4 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fc14 	bl	80012e4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	@ 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e31a      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_RCC_OscConfig+0x268>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 809a 	beq.w	8002c18 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x25a>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b18      	cmp	r3, #24
 8002aee:	d149      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d146      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e2fe      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
 8002b02:	bf00      	nop
 8002b04:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002b0e:	4b9a      	ldr	r3, [pc, #616]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0218 	and.w	r2, r3, #24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d014      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002b1e:	4b96      	ldr	r3, [pc, #600]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0218 	bic.w	r2, r3, #24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	4993      	ldr	r1, [pc, #588]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002b30:	f000 fdd0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b34:	4b91      	ldr	r3, [pc, #580]	@ (8002d7c <HAL_RCC_OscConfig+0x4e0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fb49 	bl	80011d0 <HAL_InitTick>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e2db      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fbcc 	bl	80012e4 <HAL_GetTick>
 8002b4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b50:	f7fe fbc8 	bl	80012e4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e2ce      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b62:	4b85      	ldr	r3, [pc, #532]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002b6e:	4b82      	ldr	r3, [pc, #520]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	041b      	lsls	r3, r3, #16
 8002b7c:	497e      	ldr	r1, [pc, #504]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002b82:	e049      	b.n	8002c18 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002b8c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 0218 	bic.w	r2, r3, #24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	4977      	ldr	r1, [pc, #476]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002b9e:	4b76      	ldr	r3, [pc, #472]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a75      	ldr	r2, [pc, #468]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe fb9b 	bl	80012e4 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002bb2:	f7fe fb97 	bl	80012e4 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e29d      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002bd0:	4b69      	ldr	r3, [pc, #420]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	4966      	ldr	r1, [pc, #408]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	610b      	str	r3, [r1, #16]
 8002be4:	e018      	b.n	8002c18 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b64      	ldr	r3, [pc, #400]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a63      	ldr	r2, [pc, #396]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fb77 	bl	80012e4 <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fb73 	bl	80012e4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e279      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d03c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2c:	4b52      	ldr	r3, [pc, #328]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c32:	4a51      	ldr	r2, [pc, #324]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002c34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fb52 	bl	80012e4 <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002c44:	f7fe fb4e 	bl	80012e4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e254      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002c56:	4b48      	ldr	r3, [pc, #288]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ef      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3a8>
 8002c64:	e01b      	b.n	8002c9e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c66:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c6c:	4a42      	ldr	r2, [pc, #264]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002c6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe fb35 	bl	80012e4 <HAL_GetTick>
 8002c7a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fb31 	bl	80012e4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e237      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002c90:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ef      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 80d2 	beq.w	8002e50 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002cac:	4b34      	ldr	r3, [pc, #208]	@ (8002d80 <HAL_RCC_OscConfig+0x4e4>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d118      	bne.n	8002cea <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002cb8:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_OscConfig+0x4e4>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	4a30      	ldr	r2, [pc, #192]	@ (8002d80 <HAL_RCC_OscConfig+0x4e4>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fb0e 	bl	80012e4 <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ccc:	f7fe fb0a 	bl	80012e4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e210      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002cde:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <HAL_RCC_OscConfig+0x4e4>)
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d108      	bne.n	8002d04 <HAL_RCC_OscConfig+0x468>
 8002cf2:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d02:	e074      	b.n	8002dee <HAL_RCC_OscConfig+0x552>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d118      	bne.n	8002d3e <HAL_RCC_OscConfig+0x4a2>
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d12:	4a19      	ldr	r2, [pc, #100]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d1c:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d22:	4a15      	ldr	r2, [pc, #84]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d2c:	4b12      	ldr	r3, [pc, #72]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d32:	4a11      	ldr	r2, [pc, #68]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d3c:	e057      	b.n	8002dee <HAL_RCC_OscConfig+0x552>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d11e      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4e8>
 8002d46:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d5c:	4a06      	ldr	r2, [pc, #24]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d66:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d6c:	4a02      	ldr	r2, [pc, #8]	@ (8002d78 <HAL_RCC_OscConfig+0x4dc>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x552>
 8002d78:	44020c00 	.word	0x44020c00
 8002d7c:	20000004 	.word	0x20000004
 8002d80:	44020800 	.word	0x44020800
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b85      	cmp	r3, #133	@ 0x85
 8002d8a:	d118      	bne.n	8002dbe <HAL_RCC_OscConfig+0x522>
 8002d8c:	4ba2      	ldr	r3, [pc, #648]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d92:	4aa1      	ldr	r2, [pc, #644]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d9c:	4b9e      	ldr	r3, [pc, #632]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002da2:	4a9d      	ldr	r2, [pc, #628]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dac:	4b9a      	ldr	r3, [pc, #616]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002dae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002db2:	4a99      	ldr	r2, [pc, #612]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dbc:	e017      	b.n	8002dee <HAL_RCC_OscConfig+0x552>
 8002dbe:	4b96      	ldr	r3, [pc, #600]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dc4:	4a94      	ldr	r2, [pc, #592]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dce:	4b92      	ldr	r3, [pc, #584]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dd4:	4a90      	ldr	r2, [pc, #576]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002dd6:	f023 0304 	bic.w	r3, r3, #4
 8002dda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002dde:	4b8e      	ldr	r3, [pc, #568]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002de4:	4a8c      	ldr	r2, [pc, #560]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe fa75 	bl	80012e4 <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fa71 	bl	80012e4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e175      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e14:	4b80      	ldr	r3, [pc, #512]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ed      	beq.n	8002dfe <HAL_RCC_OscConfig+0x562>
 8002e22:	e015      	b.n	8002e50 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fa5e 	bl	80012e4 <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fa5a 	bl	80012e4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e15e      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e42:	4b75      	ldr	r3, [pc, #468]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ed      	bne.n	8002e2c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d036      	beq.n	8002eca <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d019      	beq.n	8002e98 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e64:	4b6c      	ldr	r3, [pc, #432]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002e6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe fa38 	bl	80012e4 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002e78:	f7fe fa34 	bl	80012e4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e13a      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e8a:	4b63      	ldr	r3, [pc, #396]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x5dc>
 8002e96:	e018      	b.n	8002eca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e98:	4b5f      	ldr	r3, [pc, #380]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002e9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fa1e 	bl	80012e4 <HAL_GetTick>
 8002ea8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002eac:	f7fe fa1a 	bl	80012e4 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e120      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ebe:	4b56      	ldr	r3, [pc, #344]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8115 	beq.w	80030fe <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b18      	cmp	r3, #24
 8002ed8:	f000 80af 	beq.w	800303a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	f040 8086 	bne.w	8002ff2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a4b      	ldr	r2, [pc, #300]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002eec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f9f7 	bl	80012e4 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002efa:	f7fe f9f3 	bl	80012e4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0f9      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f0c:	4b42      	ldr	r3, [pc, #264]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002f18:	4b3f      	ldr	r3, [pc, #252]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f20:	f023 0303 	bic.w	r3, r3, #3
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f2c:	0212      	lsls	r2, r2, #8
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	4939      	ldr	r1, [pc, #228]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	3b01      	subs	r3, #1
 8002f46:	025b      	lsls	r3, r3, #9
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f50:	3b01      	subs	r3, #1
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002f66:	492c      	ldr	r1, [pc, #176]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	4a29      	ldr	r2, [pc, #164]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f72:	f023 0310 	bic.w	r3, r3, #16
 8002f76:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7c:	4a26      	ldr	r2, [pc, #152]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002f82:	4b25      	ldr	r3, [pc, #148]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	4a24      	ldr	r2, [pc, #144]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f88:	f043 0310 	orr.w	r3, r3, #16
 8002f8c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002f8e:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	f023 020c 	bic.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	491f      	ldr	r1, [pc, #124]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	f023 0220 	bic.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fac:	491a      	ldr	r1, [pc, #104]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fb2:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb6:	4a18      	ldr	r2, [pc, #96]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002fbe:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002fc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe f98b 	bl	80012e4 <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe f987 	bl	80012e4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e08d      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x736>
 8002ff0:	e085      	b.n	80030fe <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <HAL_RCC_OscConfig+0x77c>)
 8002ff8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe f971 	bl	80012e4 <HAL_GetTick>
 8003002:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003006:	f7fe f96d 	bl	80012e4 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d903      	bls.n	800301c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e073      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
 8003018:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800301c:	4b3a      	ldr	r3, [pc, #232]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ee      	bne.n	8003006 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003028:	4b37      	ldr	r3, [pc, #220]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	4a36      	ldr	r2, [pc, #216]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 800302e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	6293      	str	r3, [r2, #40]	@ 0x28
 8003038:	e061      	b.n	80030fe <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800303a:	4b33      	ldr	r3, [pc, #204]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003040:	4b31      	ldr	r3, [pc, #196]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 8003042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003044:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	2b01      	cmp	r3, #1
 800304c:	d031      	beq.n	80030b2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d12a      	bne.n	80030b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d122      	bne.n	80030b2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d11a      	bne.n	80030b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	0a5b      	lsrs	r3, r3, #9
 8003080:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d111      	bne.n	80030b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d108      	bne.n	80030b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	0e1b      	lsrs	r3, r3, #24
 80030a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e024      	b.n	8003100 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 80030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ba:	08db      	lsrs	r3, r3, #3
 80030bc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d01a      	beq.n	80030fe <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80030c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 80030ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 80030ce:	f023 0310 	bic.w	r3, r3, #16
 80030d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe f906 	bl	80012e4 <HAL_GetTick>
 80030d8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80030da:	bf00      	nop
 80030dc:	f7fe f902 	bl	80012e4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d0f9      	beq.n	80030dc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ec:	4a06      	ldr	r2, [pc, #24]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80030f2:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	4a04      	ldr	r2, [pc, #16]	@ (8003108 <HAL_RCC_OscConfig+0x86c>)
 80030f8:	f043 0310 	orr.w	r3, r3, #16
 80030fc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	44020c00 	.word	0x44020c00

0800310c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e19e      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b83      	ldr	r3, [pc, #524]	@ (8003330 <HAL_RCC_ClockConfig+0x224>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b80      	ldr	r3, [pc, #512]	@ (8003330 <HAL_RCC_ClockConfig+0x224>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 020f 	bic.w	r2, r3, #15
 8003136:	497e      	ldr	r1, [pc, #504]	@ (8003330 <HAL_RCC_ClockConfig+0x224>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b7c      	ldr	r3, [pc, #496]	@ (8003330 <HAL_RCC_ClockConfig+0x224>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e186      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	4b74      	ldr	r3, [pc, #464]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800316a:	429a      	cmp	r2, r3
 800316c:	d909      	bls.n	8003182 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800316e:	4b71      	ldr	r3, [pc, #452]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	496d      	ldr	r1, [pc, #436]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 800317e:	4313      	orrs	r3, r2
 8003180:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	4b68      	ldr	r3, [pc, #416]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800319c:	429a      	cmp	r2, r3
 800319e:	d909      	bls.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80031a0:	4b64      	ldr	r3, [pc, #400]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	4961      	ldr	r1, [pc, #388]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d908      	bls.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80031d0:	4b58      	ldr	r3, [pc, #352]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4955      	ldr	r1, [pc, #340]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	4b50      	ldr	r3, [pc, #320]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d908      	bls.n	8003210 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80031fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 020f 	bic.w	r2, r3, #15
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	494a      	ldr	r1, [pc, #296]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 800320c:	4313      	orrs	r3, r2
 800320e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8093 	beq.w	8003344 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003226:	4b43      	ldr	r3, [pc, #268]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d121      	bne.n	8003276 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e113      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800323e:	4b3d      	ldr	r3, [pc, #244]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d115      	bne.n	8003276 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e107      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003256:	4b37      	ldr	r3, [pc, #220]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0fb      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003266:	4b33      	ldr	r3, [pc, #204]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0f3      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003276:	4b2f      	ldr	r3, [pc, #188]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	492c      	ldr	r1, [pc, #176]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 8003284:	4313      	orrs	r3, r2
 8003286:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fe f82c 	bl	80012e4 <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d112      	bne.n	80032bc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f7fe f824 	bl	80012e4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0d7      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ae:	4b21      	ldr	r3, [pc, #132]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 0318 	and.w	r3, r3, #24
 80032b6:	2b18      	cmp	r3, #24
 80032b8:	d1ee      	bne.n	8003298 <HAL_RCC_ClockConfig+0x18c>
 80032ba:	e043      	b.n	8003344 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d112      	bne.n	80032ea <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032c6:	f7fe f80d 	bl	80012e4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0c0      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032dc:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 0318 	and.w	r3, r3, #24
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d1ee      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x1ba>
 80032e8:	e02c      	b.n	8003344 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d122      	bne.n	8003338 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032f4:	f7fd fff6 	bl	80012e4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0a9      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_RCC_ClockConfig+0x228>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f003 0318 	and.w	r3, r3, #24
 8003312:	2b08      	cmp	r3, #8
 8003314:	d1ee      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x1e8>
 8003316:	e015      	b.n	8003344 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fd ffe4 	bl	80012e4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d906      	bls.n	8003338 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e097      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
 800332e:	bf00      	nop
 8003330:	40022000 	.word	0x40022000
 8003334:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003338:	4b4b      	ldr	r3, [pc, #300]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f003 0318 	and.w	r3, r3, #24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e9      	bne.n	8003318 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d010      	beq.n	8003372 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	4b44      	ldr	r3, [pc, #272]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	429a      	cmp	r2, r3
 800335e:	d208      	bcs.n	8003372 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003360:	4b41      	ldr	r3, [pc, #260]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 020f 	bic.w	r2, r3, #15
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	493e      	ldr	r1, [pc, #248]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003372:	4b3e      	ldr	r3, [pc, #248]	@ (800346c <HAL_RCC_ClockConfig+0x360>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d210      	bcs.n	80033a2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003380:	4b3a      	ldr	r3, [pc, #232]	@ (800346c <HAL_RCC_ClockConfig+0x360>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 020f 	bic.w	r2, r3, #15
 8003388:	4938      	ldr	r1, [pc, #224]	@ (800346c <HAL_RCC_ClockConfig+0x360>)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003390:	4b36      	ldr	r3, [pc, #216]	@ (800346c <HAL_RCC_ClockConfig+0x360>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e05d      	b.n	800345e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d208      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80033be:	4b2a      	ldr	r3, [pc, #168]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4927      	ldr	r1, [pc, #156]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d012      	beq.n	8003402 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	4b21      	ldr	r3, [pc, #132]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d209      	bcs.n	8003402 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80033ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	491a      	ldr	r1, [pc, #104]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d012      	beq.n	8003434 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800341c:	429a      	cmp	r2, r3
 800341e:	d209      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003420:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	490e      	ldr	r1, [pc, #56]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003434:	f000 f822 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <HAL_RCC_ClockConfig+0x35c>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	490b      	ldr	r1, [pc, #44]	@ (8003470 <HAL_RCC_ClockConfig+0x364>)
 8003444:	5ccb      	ldrb	r3, [r1, r3]
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	4a0a      	ldr	r2, [pc, #40]	@ (8003474 <HAL_RCC_ClockConfig+0x368>)
 800344c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RCC_ClockConfig+0x36c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd febc 	bl	80011d0 <HAL_InitTick>
 8003458:	4603      	mov	r3, r0
 800345a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800345c:	7afb      	ldrb	r3, [r7, #11]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	44020c00 	.word	0x44020c00
 800346c:	40022000 	.word	0x40022000
 8003470:	08009944 	.word	0x08009944
 8003474:	20000000 	.word	0x20000000
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	@ 0x24
 8003480:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003482:	4b8c      	ldr	r3, [pc, #560]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f003 0318 	and.w	r3, r3, #24
 800348a:	2b08      	cmp	r3, #8
 800348c:	d102      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800348e:	4b8a      	ldr	r3, [pc, #552]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e107      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003494:	4b87      	ldr	r3, [pc, #540]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	f003 0318 	and.w	r3, r3, #24
 800349c:	2b00      	cmp	r3, #0
 800349e:	d112      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80034a0:	4b84      	ldr	r3, [pc, #528]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d009      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80034ac:	4b81      	ldr	r3, [pc, #516]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	4a81      	ldr	r2, [pc, #516]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x240>)
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	e0f1      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80034c0:	4b7e      	ldr	r3, [pc, #504]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x240>)
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	e0ee      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c6:	4b7b      	ldr	r3, [pc, #492]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 0318 	and.w	r3, r3, #24
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d102      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034d2:	4b7b      	ldr	r3, [pc, #492]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x244>)
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	e0e5      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d8:	4b76      	ldr	r3, [pc, #472]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 0318 	and.w	r3, r3, #24
 80034e0:	2b18      	cmp	r3, #24
 80034e2:	f040 80dd 	bne.w	80036a0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80034e6:	4b73      	ldr	r3, [pc, #460]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80034e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80034f0:	4b70      	ldr	r3, [pc, #448]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80034fc:	4b6d      	ldr	r3, [pc, #436]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003508:	4b6a      	ldr	r3, [pc, #424]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800350c:	08db      	lsrs	r3, r3, #3
 800350e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003520:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80b7 	beq.w	800369a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0xbe>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d056      	beq.n	80035e6 <HAL_RCC_GetSysClockFreq+0x16a>
 8003538:	e077      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800353a:	4b5e      	ldr	r3, [pc, #376]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02d      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003546:	4b5b      	ldr	r3, [pc, #364]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	08db      	lsrs	r3, r3, #3
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	4a5a      	ldr	r2, [pc, #360]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x240>)
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003570:	4b50      	ldr	r3, [pc, #320]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003580:	ed97 6a02 	vldr	s12, [r7, #8]
 8003584:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80036c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003588:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800358c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003590:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003594:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80035a0:	e065      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	ee07 3a90 	vmov	s15, r3
 80035a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ac:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80036c8 <HAL_RCC_GetSysClockFreq+0x24c>
 80035b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b4:	4b3f      	ldr	r3, [pc, #252]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80035b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80035c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80036c4 <HAL_RCC_GetSysClockFreq+0x248>
 80035cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80035d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80035e4:	e043      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80036cc <HAL_RCC_GetSysClockFreq+0x250>
 80035f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f8:	4b2e      	ldr	r3, [pc, #184]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80035fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003608:	ed97 6a02 	vldr	s12, [r7, #8]
 800360c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80036c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003610:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003614:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800361c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003624:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003628:	e021      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003634:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036d0 <HAL_RCC_GetSysClockFreq+0x254>
 8003638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363c:	4b1d      	ldr	r3, [pc, #116]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800363e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003644:	ee07 3a90 	vmov	s15, r3
 8003648:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800364c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003650:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80036c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003654:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003658:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800365c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003660:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003668:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800366c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800366e:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003672:	0a5b      	lsrs	r3, r3, #9
 8003674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003678:	3301      	adds	r3, #1
 800367a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003686:	edd7 6a06 	vldr	s13, [r7, #24]
 800368a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800368e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003692:	ee17 3a90 	vmov	r3, s15
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	e004      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e001      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x240>)
 80036a2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80036a4:	69fb      	ldr	r3, [r7, #28]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	@ 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	44020c00 	.word	0x44020c00
 80036b8:	003d0900 	.word	0x003d0900
 80036bc:	03d09000 	.word	0x03d09000
 80036c0:	017d7840 	.word	0x017d7840
 80036c4:	46000000 	.word	0x46000000
 80036c8:	4c742400 	.word	0x4c742400
 80036cc:	4bbebc20 	.word	0x4bbebc20
 80036d0:	4a742400 	.word	0x4a742400

080036d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80036d8:	f7ff fed0 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <HAL_RCC_GetHCLKFreq+0x2c>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80036e2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80036e6:	4907      	ldr	r1, [pc, #28]	@ (8003704 <HAL_RCC_GetHCLKFreq+0x30>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80036ea:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80036ee:	fa22 f303 	lsr.w	r3, r2, r3
 80036f2:	4a05      	ldr	r2, [pc, #20]	@ (8003708 <HAL_RCC_GetHCLKFreq+0x34>)
 80036f4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80036f6:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <HAL_RCC_GetHCLKFreq+0x34>)
 80036f8:	681b      	ldr	r3, [r3, #0]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	44020c00 	.word	0x44020c00
 8003704:	08009944 	.word	0x08009944
 8003708:	20000000 	.word	0x20000000

0800370c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003710:	f7ff ffe0 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4904      	ldr	r1, [pc, #16]	@ (8003734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	44020c00 	.word	0x44020c00
 8003734:	08009954 	.word	0x08009954

08003738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800373c:	f7ff ffca 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4904      	ldr	r1, [pc, #16]	@ (8003760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	44020c00 	.word	0x44020c00
 8003760:	08009954 	.word	0x08009954

08003764 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003768:	f7ff ffb4 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	0b1b      	lsrs	r3, r3, #12
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4904      	ldr	r1, [pc, #16]	@ (800378c <HAL_RCC_GetPCLK3Freq+0x28>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	44020c00 	.word	0x44020c00
 800378c:	08009954 	.word	0x08009954

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b0ba      	sub	sp, #232	@ 0xe8
 8003796:	af00      	add	r7, sp, #0
 8003798:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800379c:	2300      	movs	r3, #0
 800379e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80037b4:	2500      	movs	r5, #0
 80037b6:	ea54 0305 	orrs.w	r3, r4, r5
 80037ba:	d00b      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80037bc:	4bcd      	ldr	r3, [pc, #820]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80037be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037c2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80037c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	4ac9      	ldr	r2, [pc, #804]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80037ce:	430b      	orrs	r3, r1
 80037d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f002 0801 	and.w	r8, r2, #1
 80037e0:	f04f 0900 	mov.w	r9, #0
 80037e4:	ea58 0309 	orrs.w	r3, r8, r9
 80037e8:	d042      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80037ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d823      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80037f4:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003845 	.word	0x08003845
 8003800:	08003815 	.word	0x08003815
 8003804:	08003829 	.word	0x08003829
 8003808:	08003845 	.word	0x08003845
 800380c:	08003845 	.word	0x08003845
 8003810:	08003845 	.word	0x08003845
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003818:	3308      	adds	r3, #8
 800381a:	4618      	mov	r0, r3
 800381c:	f003 f90c 	bl	8006a38 <RCCEx_PLL2_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003826:	e00e      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800382c:	3330      	adds	r3, #48	@ 0x30
 800382e:	4618      	mov	r0, r3
 8003830:	f003 f99a 	bl	8006b68 <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800383a:	e004      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003846:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800384e:	4ba9      	ldr	r3, [pc, #676]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003854:	f023 0107 	bic.w	r1, r3, #7
 8003858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	4aa5      	ldr	r2, [pc, #660]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003860:	430b      	orrs	r3, r1
 8003862:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003866:	e003      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800386c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f002 0a02 	and.w	sl, r2, #2
 800387c:	f04f 0b00 	mov.w	fp, #0
 8003880:	ea5a 030b 	orrs.w	r3, sl, fp
 8003884:	f000 8088 	beq.w	8003998 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	2b28      	cmp	r3, #40	@ 0x28
 8003890:	d868      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003892:	a201      	add	r2, pc, #4	@ (adr r2, 8003898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	0800396d 	.word	0x0800396d
 800389c:	08003965 	.word	0x08003965
 80038a0:	08003965 	.word	0x08003965
 80038a4:	08003965 	.word	0x08003965
 80038a8:	08003965 	.word	0x08003965
 80038ac:	08003965 	.word	0x08003965
 80038b0:	08003965 	.word	0x08003965
 80038b4:	08003965 	.word	0x08003965
 80038b8:	0800393d 	.word	0x0800393d
 80038bc:	08003965 	.word	0x08003965
 80038c0:	08003965 	.word	0x08003965
 80038c4:	08003965 	.word	0x08003965
 80038c8:	08003965 	.word	0x08003965
 80038cc:	08003965 	.word	0x08003965
 80038d0:	08003965 	.word	0x08003965
 80038d4:	08003965 	.word	0x08003965
 80038d8:	08003951 	.word	0x08003951
 80038dc:	08003965 	.word	0x08003965
 80038e0:	08003965 	.word	0x08003965
 80038e4:	08003965 	.word	0x08003965
 80038e8:	08003965 	.word	0x08003965
 80038ec:	08003965 	.word	0x08003965
 80038f0:	08003965 	.word	0x08003965
 80038f4:	08003965 	.word	0x08003965
 80038f8:	0800396d 	.word	0x0800396d
 80038fc:	08003965 	.word	0x08003965
 8003900:	08003965 	.word	0x08003965
 8003904:	08003965 	.word	0x08003965
 8003908:	08003965 	.word	0x08003965
 800390c:	08003965 	.word	0x08003965
 8003910:	08003965 	.word	0x08003965
 8003914:	08003965 	.word	0x08003965
 8003918:	0800396d 	.word	0x0800396d
 800391c:	08003965 	.word	0x08003965
 8003920:	08003965 	.word	0x08003965
 8003924:	08003965 	.word	0x08003965
 8003928:	08003965 	.word	0x08003965
 800392c:	08003965 	.word	0x08003965
 8003930:	08003965 	.word	0x08003965
 8003934:	08003965 	.word	0x08003965
 8003938:	0800396d 	.word	0x0800396d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800393c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003940:	3308      	adds	r3, #8
 8003942:	4618      	mov	r0, r3
 8003944:	f003 f878 	bl	8006a38 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800394e:	e00e      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003954:	3330      	adds	r3, #48	@ 0x30
 8003956:	4618      	mov	r0, r3
 8003958:	f003 f906 	bl	8006b68 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003962:	e004      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800396c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10c      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003976:	4b5f      	ldr	r3, [pc, #380]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800397c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003986:	4a5b      	ldr	r2, [pc, #364]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003988:	430b      	orrs	r3, r1
 800398a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003994:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f002 0304 	and.w	r3, r2, #4
 80039a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d04e      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80039b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80039c2:	d02c      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80039c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80039c8:	d825      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ce:	d028      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80039d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d4:	d81f      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80039d8:	d025      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80039da:	2bc0      	cmp	r3, #192	@ 0xc0
 80039dc:	d81b      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039de:	2b80      	cmp	r3, #128	@ 0x80
 80039e0:	d00f      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80039e2:	2b80      	cmp	r3, #128	@ 0x80
 80039e4:	d817      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01f      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80039ea:	2b40      	cmp	r3, #64	@ 0x40
 80039ec:	d113      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039f2:	3308      	adds	r3, #8
 80039f4:	4618      	mov	r0, r3
 80039f6:	f003 f81f 	bl	8006a38 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003a00:	e014      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a06:	3330      	adds	r3, #48	@ 0x30
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 f8ad 	bl	8006b68 <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003a14:	e00a      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e004      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003a34:	4b2f      	ldr	r3, [pc, #188]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003a36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a3a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a44:	4a2b      	ldr	r2, [pc, #172]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003a46:	430b      	orrs	r3, r1
 8003a48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a4c:	e003      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a52:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f002 0308 	and.w	r3, r2, #8
 8003a62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	d056      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003a80:	d031      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003a82:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003a86:	d82a      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a8c:	d02d      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a92:	d824      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a98:	d029      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003a9a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a9e:	d81e      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa4:	d011      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aaa:	d818      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d023      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab4:	d113      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aba:	3308      	adds	r3, #8
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 ffbb 	bl	8006a38 <RCCEx_PLL2_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8003ac8:	e017      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ace:	3330      	adds	r3, #48	@ 0x30
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 f849 	bl	8006b68 <RCCEx_PLL3_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8003adc:	e00d      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003ae4:	e009      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e007      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003aea:	bf00      	nop
 8003aec:	e005      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003aee:	bf00      	nop
 8003af0:	e003      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003af2:	bf00      	nop
 8003af4:	44020c00 	.word	0x44020c00
        break;
 8003af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003b02:	4bb9      	ldr	r3, [pc, #740]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b08:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003b0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b12:	4ab5      	ldr	r2, [pc, #724]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003b14:	430b      	orrs	r3, r1
 8003b16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f002 0310 	and.w	r3, r2, #16
 8003b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4313      	orrs	r3, r2
 8003b42:	d053      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b4e:	d031      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003b50:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b54:	d82a      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b5a:	d02d      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b60:	d824      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b66:	d029      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003b68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b6c:	d81e      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b72:	d011      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b78:	d818      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d020      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b82:	d113      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b88:	3308      	adds	r3, #8
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 ff54 	bl	8006a38 <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8003b96:	e014      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b9c:	3330      	adds	r3, #48	@ 0x30
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 ffe2 	bl	8006b68 <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003bb2:	e006      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003bb4:	bf00      	nop
 8003bb6:	e004      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003bca:	4b87      	ldr	r3, [pc, #540]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003bd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bda:	4a83      	ldr	r2, [pc, #524]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003be8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f002 0320 	and.w	r3, r2, #32
 8003bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	d053      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003c16:	d031      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003c18:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003c1c:	d82a      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003c1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c22:	d02d      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c28:	d824      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003c2a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003c2e:	d029      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003c30:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003c34:	d81e      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3a:	d011      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c40:	d818      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d020      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c4a:	d113      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c50:	3308      	adds	r3, #8
 8003c52:	4618      	mov	r0, r3
 8003c54:	f002 fef0 	bl	8006a38 <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8003c5e:	e014      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c64:	3330      	adds	r3, #48	@ 0x30
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 ff7e 	bl	8006b68 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8003c72:	e00a      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c7a:	e006      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e004      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003c80:	bf00      	nop
 8003c82:	e002      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003c92:	4b55      	ldr	r3, [pc, #340]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c98:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8003c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca2:	4a51      	ldr	r2, [pc, #324]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003caa:	e003      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003cb0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	d053      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cda:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003cde:	d031      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003ce0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003ce4:	d82a      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003ce6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cea:	d02d      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003cec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cf0:	d824      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003cf2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cf6:	d029      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cfc:	d81e      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003cfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d02:	d011      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d08:	d818      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d020      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003d0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d12:	d113      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d18:	3308      	adds	r3, #8
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 fe8c 	bl	8006a38 <RCCEx_PLL2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003d26:	e014      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d2c:	3330      	adds	r3, #48	@ 0x30
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 ff1a 	bl	8006b68 <RCCEx_PLL3_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003d42:	e006      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003d44:	bf00      	nop
 8003d46:	e004      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003d5a:	4b23      	ldr	r3, [pc, #140]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d92:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	d03d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003da2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003da6:	d01b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003da8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003dac:	d814      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003db2:	d017      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8003db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003db8:	d80e      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc2:	d109      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dc8:	3330      	adds	r3, #48	@ 0x30
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 fecc 	bl	8006b68 <RCCEx_PLL3_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003dd6:	e00a      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003dde:	e006      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8003de0:	bf00      	nop
 8003de2:	e004      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8003de4:	bf00      	nop
 8003de6:	e002      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8003de8:	44020c00 	.word	0x44020c00
        break;
 8003dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003df6:	4b99      	ldr	r3, [pc, #612]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003df8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dfc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e06:	4a95      	ldr	r2, [pc, #596]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e0e:	e003      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d03b      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e42:	d01b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8003e44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e48:	d814      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8003e4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e4e:	d017      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8003e50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e54:	d80e      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d014      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8003e5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e5e:	d109      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e64:	3330      	adds	r3, #48	@ 0x30
 8003e66:	4618      	mov	r0, r3
 8003e68:	f002 fe7e 	bl	8006b68 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003e72:	e008      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e7a:	e004      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e002      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003e80:	bf00      	nop
 8003e82:	e000      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e86:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003e8e:	4b73      	ldr	r3, [pc, #460]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e94:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e9e:	4a6f      	ldr	r2, [pc, #444]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ea6:	e003      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003eac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ec6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	d03d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003edc:	d01b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8003ede:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ee2:	d814      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ee8:	d017      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8003eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eee:	d80e      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d014      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef8:	d109      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efe:	3330      	adds	r3, #48	@ 0x30
 8003f00:	4618      	mov	r0, r3
 8003f02:	f002 fe31 	bl	8006b68 <RCCEx_PLL3_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003f0c:	e008      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f14:	e004      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8003f16:	bf00      	nop
 8003f18:	e002      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8003f1a:	bf00      	nop
 8003f1c:	e000      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8003f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10d      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003f28:	4b4c      	ldr	r3, [pc, #304]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f3a:	4a48      	ldr	r2, [pc, #288]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f42:	e003      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f48:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f62:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d035      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f78:	d015      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003f7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f7e:	d80e      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d012      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f88:	d109      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f8e:	3330      	adds	r3, #48	@ 0x30
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 fde9 	bl	8006b68 <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003f9c:	e006      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003fa4:	e002      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003fb4:	4b29      	ldr	r3, [pc, #164]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fba:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc6:	4a25      	ldr	r2, [pc, #148]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003fce:	e003      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003fd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8003fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d037      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004004:	d015      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800400a:	d80e      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d012      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8004010:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004014:	d109      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800401a:	3330      	adds	r3, #48	@ 0x30
 800401c:	4618      	mov	r0, r3
 800401e:	f002 fda3 	bl	8006b68 <RCCEx_PLL3_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004028:	e006      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004036:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004038:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10f      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004040:	4b06      	ldr	r3, [pc, #24]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004042:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004046:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800404a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004052:	4a02      	ldr	r2, [pc, #8]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004054:	430b      	orrs	r3, r1
 8004056:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800405a:	e005      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800405c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004064:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	2100      	movs	r1, #0
 8004072:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004078:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800407a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800407e:	460b      	mov	r3, r1
 8004080:	4313      	orrs	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004084:	4bb8      	ldr	r3, [pc, #736]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4ab7      	ldr	r2, [pc, #732]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800408a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800408e:	61d3      	str	r3, [r2, #28]
 8004090:	4bb5      	ldr	r3, [pc, #724]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004092:	69d9      	ldr	r1, [r3, #28]
 8004094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004098:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800409c:	4ab2      	ldr	r2, [pc, #712]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800409e:	430b      	orrs	r3, r1
 80040a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80040ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80040b0:	2300      	movs	r3, #0
 80040b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80040b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80040b8:	460b      	mov	r3, r1
 80040ba:	4313      	orrs	r3, r2
 80040bc:	d055      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80040be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040c6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040ca:	d031      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80040cc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040d0:	d82a      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d6:	d02d      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040dc:	d824      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80040de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e2:	d029      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80040e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e8:	d81e      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80040ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ee:	d011      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80040f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f4:	d818      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040fe:	d113      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004104:	3308      	adds	r3, #8
 8004106:	4618      	mov	r0, r3
 8004108:	f002 fc96 	bl	8006a38 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004112:	e014      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004118:	3330      	adds	r3, #48	@ 0x30
 800411a:	4618      	mov	r0, r3
 800411c:	f002 fd24 	bl	8006b68 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004126:	e00a      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800412e:	e006      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004130:	bf00      	nop
 8004132:	e004      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800413c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10d      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004146:	4b88      	ldr	r3, [pc, #544]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004148:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800414c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004158:	4a83      	ldr	r2, [pc, #524]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800415a:	430b      	orrs	r3, r1
 800415c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004160:	e003      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004166:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800416a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004178:	2300      	movs	r3, #0
 800417a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800417c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d055      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004192:	d031      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8004194:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004198:	d82a      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800419a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800419e:	d02d      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80041a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041a4:	d824      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80041a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041aa:	d029      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041b0:	d81e      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80041b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b6:	d011      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80041b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041bc:	d818      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c6:	d113      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041cc:	3308      	adds	r3, #8
 80041ce:	4618      	mov	r0, r3
 80041d0:	f002 fc32 	bl	8006a38 <RCCEx_PLL2_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80041da:	e014      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041e0:	3330      	adds	r3, #48	@ 0x30
 80041e2:	4618      	mov	r0, r3
 80041e4:	f002 fcc0 	bl	8006b68 <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80041ee:	e00a      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80041f6:	e006      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80041f8:	bf00      	nop
 80041fa:	e004      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80041fc:	bf00      	nop
 80041fe:	e002      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004206:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10d      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800420e:	4b56      	ldr	r3, [pc, #344]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004210:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004214:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004220:	4a51      	ldr	r2, [pc, #324]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004222:	430b      	orrs	r3, r1
 8004224:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004228:	e003      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800422e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800423e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004240:	2300      	movs	r3, #0
 8004242:	667b      	str	r3, [r7, #100]	@ 0x64
 8004244:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004248:	460b      	mov	r3, r1
 800424a:	4313      	orrs	r3, r2
 800424c:	d032      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800424e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004256:	2b05      	cmp	r3, #5
 8004258:	d80f      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800425a:	2b03      	cmp	r3, #3
 800425c:	d211      	bcs.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800425e:	2b01      	cmp	r3, #1
 8004260:	d911      	bls.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8004262:	2b02      	cmp	r3, #2
 8004264:	d109      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800426a:	3308      	adds	r3, #8
 800426c:	4618      	mov	r0, r3
 800426e:	f002 fbe3 	bl	8006a38 <RCCEx_PLL2_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004280:	e002      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8004286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004288:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10d      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004290:	4b35      	ldr	r3, [pc, #212]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004296:	f023 0107 	bic.w	r1, r3, #7
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042a2:	4a31      	ldr	r2, [pc, #196]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80042b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	2100      	movs	r1, #0
 80042be:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d024      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80042d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d005      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80042e6:	e002      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80042e8:	bf00      	nop
 80042ea:	e000      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80042ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80042f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80042f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042fc:	f023 0108 	bic.w	r1, r3, #8
 8004300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004308:	4a17      	ldr	r2, [pc, #92]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800430a:	430b      	orrs	r3, r1
 800430c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004310:	e003      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004316:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800431a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004322:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004326:	653b      	str	r3, [r7, #80]	@ 0x50
 8004328:	2300      	movs	r3, #0
 800432a:	657b      	str	r3, [r7, #84]	@ 0x54
 800432c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004330:	460b      	mov	r3, r1
 8004332:	4313      	orrs	r3, r2
 8004334:	f000 80b9 	beq.w	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	4a0b      	ldr	r2, [pc, #44]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004344:	f7fc ffce 	bl	80012e4 <HAL_GetTick>
 8004348:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800434c:	e010      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434e:	f7fc ffc9 	bl	80012e4 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d908      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004364:	e00a      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004366:	bf00      	nop
 8004368:	44020c00 	.word	0x44020c00
 800436c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004370:	4bba      	ldr	r3, [pc, #744]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0e8      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 800437c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 808e 	bne.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004386:	4bb6      	ldr	r3, [pc, #728]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800438c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d023      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800439c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043a0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80043a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043ac:	4bac      	ldr	r3, [pc, #688]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80043ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ba:	4ba9      	ldr	r3, [pc, #676]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80043bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043c0:	4aa7      	ldr	r2, [pc, #668]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ca:	4ba5      	ldr	r3, [pc, #660]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80043cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043d0:	4aa3      	ldr	r2, [pc, #652]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043da:	4aa1      	ldr	r2, [pc, #644]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d019      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fc ff78 	bl	80012e4 <HAL_GetTick>
 80043f4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f8:	e00d      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fc ff73 	bl	80012e4 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004404:	1ad2      	subs	r2, r2, r3
 8004406:	f241 3388 	movw	r3, #5000	@ 0x1388
 800440a:	429a      	cmp	r2, r3
 800440c:	d903      	bls.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004414:	e006      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004416:	4b92      	ldr	r3, [pc, #584]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ea      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004424:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d135      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800442c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004430:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800443c:	d110      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800443e:	4b88      	ldr	r3, [pc, #544]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800444a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004454:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004458:	4a81      	ldr	r2, [pc, #516]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800445a:	430b      	orrs	r3, r1
 800445c:	61d3      	str	r3, [r2, #28]
 800445e:	e005      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004460:	4b7f      	ldr	r3, [pc, #508]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4a7e      	ldr	r2, [pc, #504]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004466:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800446a:	61d3      	str	r3, [r2, #28]
 800446c:	4b7c      	ldr	r3, [pc, #496]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800446e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004472:	4a7b      	ldr	r2, [pc, #492]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004478:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800447c:	4b78      	ldr	r3, [pc, #480]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800447e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004486:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800448a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448e:	4a74      	ldr	r2, [pc, #464]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004490:	430b      	orrs	r3, r1
 8004492:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004496:	e008      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004498:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800449c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044a6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80044b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b8:	2300      	movs	r3, #0
 80044ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044c0:	460b      	mov	r3, r1
 80044c2:	4313      	orrs	r3, r2
 80044c4:	d035      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80044c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ce:	2b30      	cmp	r3, #48	@ 0x30
 80044d0:	d014      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80044d2:	2b30      	cmp	r3, #48	@ 0x30
 80044d4:	d80e      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d012      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d80a      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d106      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e6:	4b5e      	ldr	r3, [pc, #376]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	4a5d      	ldr	r2, [pc, #372]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80044ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80044f2:	e008      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80044fa:	e004      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80044fc:	bf00      	nop
 80044fe:	e002      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004500:	bf00      	nop
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004506:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800450e:	4b54      	ldr	r3, [pc, #336]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004514:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800451c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004520:	4a4f      	ldr	r2, [pc, #316]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004522:	430b      	orrs	r3, r1
 8004524:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004528:	e003      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800452e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800453e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004540:	2300      	movs	r3, #0
 8004542:	647b      	str	r3, [r7, #68]	@ 0x44
 8004544:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d033      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800454e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004552:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800455a:	2b40      	cmp	r3, #64	@ 0x40
 800455c:	d007      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800455e:	e010      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004560:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	4a3e      	ldr	r2, [pc, #248]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800456c:	e00d      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800456e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004572:	3308      	adds	r3, #8
 8004574:	4618      	mov	r0, r3
 8004576:	f002 fa5f 	bl	8006a38 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004580:	e003      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004592:	4b33      	ldr	r3, [pc, #204]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004594:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004598:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800459c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045b2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80045b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80045c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045c4:	2300      	movs	r3, #0
 80045c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045cc:	460b      	mov	r3, r1
 80045ce:	4313      	orrs	r3, r2
 80045d0:	d04c      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80045d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d827      	bhi.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80045de:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	080045f9 	.word	0x080045f9
 80045e8:	08004607 	.word	0x08004607
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004637 	.word	0x08004637
 80045f4:	08004637 	.word	0x08004637
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004602:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004604:	e018      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800460a:	3308      	adds	r3, #8
 800460c:	4618      	mov	r0, r3
 800460e:	f002 fa13 	bl	8006a38 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004618:	e00e      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800461a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800461e:	3330      	adds	r3, #48	@ 0x30
 8004620:	4618      	mov	r0, r3
 8004622:	f002 faa1 	bl	8006b68 <RCCEx_PLL3_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800462c:	e004      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004638:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d111      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004640:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004646:	f023 0107 	bic.w	r1, r3, #7
 800464a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800464e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004652:	4a03      	ldr	r2, [pc, #12]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004654:	430b      	orrs	r3, r1
 8004656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800465a:	e007      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800465c:	44020800 	.word	0x44020800
 8004660:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004668:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800466c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004678:	633b      	str	r3, [r7, #48]	@ 0x30
 800467a:	2300      	movs	r3, #0
 800467c:	637b      	str	r3, [r7, #52]	@ 0x34
 800467e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	f000 8081 	beq.w	800478c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800468a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800468e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004692:	2b20      	cmp	r3, #32
 8004694:	d85f      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8004696:	a201      	add	r2, pc, #4	@ (adr r2, 800469c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	08004721 	.word	0x08004721
 80046a0:	08004757 	.word	0x08004757
 80046a4:	08004757 	.word	0x08004757
 80046a8:	08004757 	.word	0x08004757
 80046ac:	08004757 	.word	0x08004757
 80046b0:	08004757 	.word	0x08004757
 80046b4:	08004757 	.word	0x08004757
 80046b8:	08004757 	.word	0x08004757
 80046bc:	0800472f 	.word	0x0800472f
 80046c0:	08004757 	.word	0x08004757
 80046c4:	08004757 	.word	0x08004757
 80046c8:	08004757 	.word	0x08004757
 80046cc:	08004757 	.word	0x08004757
 80046d0:	08004757 	.word	0x08004757
 80046d4:	08004757 	.word	0x08004757
 80046d8:	08004757 	.word	0x08004757
 80046dc:	08004743 	.word	0x08004743
 80046e0:	08004757 	.word	0x08004757
 80046e4:	08004757 	.word	0x08004757
 80046e8:	08004757 	.word	0x08004757
 80046ec:	08004757 	.word	0x08004757
 80046f0:	08004757 	.word	0x08004757
 80046f4:	08004757 	.word	0x08004757
 80046f8:	08004757 	.word	0x08004757
 80046fc:	0800475f 	.word	0x0800475f
 8004700:	08004757 	.word	0x08004757
 8004704:	08004757 	.word	0x08004757
 8004708:	08004757 	.word	0x08004757
 800470c:	08004757 	.word	0x08004757
 8004710:	08004757 	.word	0x08004757
 8004714:	08004757 	.word	0x08004757
 8004718:	08004757 	.word	0x08004757
 800471c:	0800475f 	.word	0x0800475f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004720:	4bb9      	ldr	r3, [pc, #740]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004724:	4ab8      	ldr	r2, [pc, #736]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800472a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800472c:	e018      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800472e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004732:	3308      	adds	r3, #8
 8004734:	4618      	mov	r0, r3
 8004736:	f002 f97f 	bl	8006a38 <RCCEx_PLL2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004740:	e00e      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004746:	3330      	adds	r3, #48	@ 0x30
 8004748:	4618      	mov	r0, r3
 800474a:	f002 fa0d 	bl	8006b68 <RCCEx_PLL3_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004754:	e004      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800475e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004760:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10d      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004768:	4ba7      	ldr	r3, [pc, #668]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800476a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800476e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800477a:	4aa3      	ldr	r2, [pc, #652]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800477c:	430b      	orrs	r3, r1
 800477e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004788:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800478c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800479a:	2300      	movs	r3, #0
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800479e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d04e      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80047a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b4:	d02e      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80047b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ba:	d827      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80047bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80047be:	d02b      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80047c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80047c2:	d823      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80047c4:	2b80      	cmp	r3, #128	@ 0x80
 80047c6:	d017      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80047c8:	2b80      	cmp	r3, #128	@ 0x80
 80047ca:	d81f      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80047d0:	2b40      	cmp	r3, #64	@ 0x40
 80047d2:	d007      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80047d4:	e01a      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d6:	4b8c      	ldr	r3, [pc, #560]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80047d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047da:	4a8b      	ldr	r2, [pc, #556]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80047dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80047e2:	e01a      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e8:	3308      	adds	r3, #8
 80047ea:	4618      	mov	r0, r3
 80047ec:	f002 f924 	bl	8006a38 <RCCEx_PLL2_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80047f6:	e010      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047fc:	3330      	adds	r3, #48	@ 0x30
 80047fe:	4618      	mov	r0, r3
 8004800:	f002 f9b2 	bl	8006b68 <RCCEx_PLL3_Config>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800480a:	e006      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004812:	e002      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004814:	bf00      	nop
 8004816:	e000      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004822:	4b79      	ldr	r3, [pc, #484]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004828:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800482c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004834:	4974      	ldr	r1, [pc, #464]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800483c:	e003      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004842:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
 8004858:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d055      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004866:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800486a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800486e:	d031      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8004870:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004874:	d82a      	bhi.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800487a:	d02d      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004880:	d824      	bhi.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004882:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004886:	d029      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8004888:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800488c:	d81e      	bhi.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004892:	d011      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004898:	d818      	bhi.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d020      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800489e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a2:	d113      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048a8:	3308      	adds	r3, #8
 80048aa:	4618      	mov	r0, r3
 80048ac:	f002 f8c4 	bl	8006a38 <RCCEx_PLL2_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80048b6:	e014      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048bc:	3330      	adds	r3, #48	@ 0x30
 80048be:	4618      	mov	r0, r3
 80048c0:	f002 f952 	bl	8006b68 <RCCEx_PLL3_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80048ca:	e00a      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048d2:	e006      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80048d4:	bf00      	nop
 80048d6:	e004      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80048d8:	bf00      	nop
 80048da:	e002      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80048dc:	bf00      	nop
 80048de:	e000      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80048e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80048ea:	4b47      	ldr	r3, [pc, #284]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80048ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048f0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80048f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048fc:	4942      	ldr	r1, [pc, #264]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800490a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800490e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	2100      	movs	r1, #0
 8004918:	61b9      	str	r1, [r7, #24]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004924:	460b      	mov	r3, r1
 8004926:	4313      	orrs	r3, r2
 8004928:	d03c      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800492a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800492e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004932:	2b03      	cmp	r3, #3
 8004934:	d81b      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8004936:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004977 	.word	0x08004977
 8004940:	0800494d 	.word	0x0800494d
 8004944:	0800495b 	.word	0x0800495b
 8004948:	08004977 	.word	0x08004977
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	4a2d      	ldr	r2, [pc, #180]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004956:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004958:	e00e      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800495a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495e:	3308      	adds	r3, #8
 8004960:	4618      	mov	r0, r3
 8004962:	f002 f869 	bl	8006a38 <RCCEx_PLL2_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800496c:	e004      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8004976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004978:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004980:	4b21      	ldr	r3, [pc, #132]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004986:	f023 0203 	bic.w	r2, r3, #3
 800498a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800498e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004992:	491d      	ldr	r1, [pc, #116]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800499a:	e003      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	2100      	movs	r1, #0
 80049ae:	6139      	str	r1, [r7, #16]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049ba:	460b      	mov	r3, r1
 80049bc:	4313      	orrs	r3, r2
 80049be:	d03c      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80049c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049cc:	d00e      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80049ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d2:	d815      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d019      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80049d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049dc:	d110      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049de:	4b0a      	ldr	r3, [pc, #40]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80049e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e2:	4a09      	ldr	r2, [pc, #36]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80049e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80049ea:	e010      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049f0:	3308      	adds	r3, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f002 f820 	bl	8006a38 <RCCEx_PLL2_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80049fe:	e006      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a06:	e002      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8004a08:	44020c00 	.word	0x44020c00
        break;
 8004a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10d      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004a16:	4b3d      	ldr	r3, [pc, #244]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a28:	4938      	ldr	r1, [pc, #224]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a36:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	2100      	movs	r1, #0
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a50:	460b      	mov	r3, r1
 8004a52:	4313      	orrs	r3, r2
 8004a54:	d038      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a5e:	2b30      	cmp	r3, #48	@ 0x30
 8004a60:	d01b      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8004a62:	2b30      	cmp	r3, #48	@ 0x30
 8004a64:	d815      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d002      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d007      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8004a6e:	e010      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a70:	4b26      	ldr	r3, [pc, #152]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	4a25      	ldr	r2, [pc, #148]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a7a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a7c:	e00e      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a82:	3330      	adds	r3, #48	@ 0x30
 8004a84:	4618      	mov	r0, r3
 8004a86:	f002 f86f 	bl	8006b68 <RCCEx_PLL3_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004a90:	e004      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a98:	e000      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8004a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10d      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004aa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004aaa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004ab6:	4915      	ldr	r1, [pc, #84]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004abe:	e003      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ac4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	6039      	str	r1, [r7, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	607b      	str	r3, [r7, #4]
 8004ada:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	d00c      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004ae4:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004aea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004af6:	4905      	ldr	r1, [pc, #20]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004afe:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	37e8      	adds	r7, #232	@ 0xe8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0c:	44020c00 	.word	0x44020c00

08004b10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b08b      	sub	sp, #44	@ 0x2c
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004b18:	4bae      	ldr	r3, [pc, #696]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b20:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004b22:	4bac      	ldr	r3, [pc, #688]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004b2c:	4ba9      	ldr	r3, [pc, #676]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b36:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004b38:	4ba6      	ldr	r3, [pc, #664]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b44:	4ba3      	ldr	r3, [pc, #652]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	08db      	lsrs	r3, r3, #3
 8004b4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	fb02 f303 	mul.w	r3, r2, r3
 8004b54:	ee07 3a90 	vmov	s15, r3
 8004b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8126 	beq.w	8004db4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d053      	beq.n	8004c16 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d86f      	bhi.n	8004c54 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d003      	beq.n	8004b82 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d02b      	beq.n	8004bd8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8004b80:	e068      	b.n	8004c54 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b82:	4b94      	ldr	r3, [pc, #592]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	08db      	lsrs	r3, r3, #3
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	4a92      	ldr	r2, [pc, #584]	@ (8004dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	ed97 6a04 	vldr	s12, [r7, #16]
 8004bba:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004ddc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004bd6:	e068      	b.n	8004caa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004de0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004bf8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ddc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004c14:	e049      	b.n	8004caa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c20:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004de4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8004c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c36:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004ddc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004c52:	e02a      	b.n	8004caa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c54:	4b5f      	ldr	r3, [pc, #380]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	ee07 3a90 	vmov	s15, r3
 8004c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c88:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c8c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004ddc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004ca8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004caa:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cb6:	d121      	bne.n	8004cfc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004cb8:	4b46      	ldr	r3, [pc, #280]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cc4:	4b43      	ldr	r3, [pc, #268]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc8:	0a5b      	lsrs	r3, r3, #9
 8004cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004cd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cda:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004cde:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cea:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e006      	b.n	8004d02 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e002      	b.n	8004d02 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d02:	4b34      	ldr	r3, [pc, #208]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d0e:	d121      	bne.n	8004d54 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004d10:	4b30      	ldr	r3, [pc, #192]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d32:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004d36:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d42:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	e006      	b.n	8004d5a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	e002      	b.n	8004d5a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d66:	d121      	bne.n	8004dac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004d68:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d017      	beq.n	8004da4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004d74:	4b17      	ldr	r3, [pc, #92]	@ (8004dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d78:	0e1b      	lsrs	r3, r3, #24
 8004d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004d86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004d8e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004da2:	e010      	b.n	8004dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
}
 8004daa:	e00c      	b.n	8004dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
}
 8004db2:	e008      	b.n	8004dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	609a      	str	r2, [r3, #8]
}
 8004dc6:	bf00      	nop
 8004dc8:	372c      	adds	r7, #44	@ 0x2c
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	44020c00 	.word	0x44020c00
 8004dd8:	03d09000 	.word	0x03d09000
 8004ddc:	46000000 	.word	0x46000000
 8004de0:	4a742400 	.word	0x4a742400
 8004de4:	4bbebc20 	.word	0x4bbebc20

08004de8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b08b      	sub	sp, #44	@ 0x2c
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004df0:	4bae      	ldr	r3, [pc, #696]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004dfa:	4bac      	ldr	r3, [pc, #688]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004e04:	4ba9      	ldr	r3, [pc, #676]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e0e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8004e10:	4ba6      	ldr	r3, [pc, #664]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004e1c:	4ba3      	ldr	r3, [pc, #652]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	08db      	lsrs	r3, r3, #3
 8004e22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e34:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8126 	beq.w	800508c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d053      	beq.n	8004eee <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d86f      	bhi.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d003      	beq.n	8004e5a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d02b      	beq.n	8004eb0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004e58:	e068      	b.n	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e5a:	4b94      	ldr	r3, [pc, #592]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	4a92      	ldr	r2, [pc, #584]	@ (80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004e66:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e92:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eaa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004eae:	e068      	b.n	8004f82 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ecc:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ed0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004edc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004eec:	e049      	b.n	8004f82 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8004efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f0e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004f2a:	e02a      	b.n	8004f82 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	08db      	lsrs	r3, r3, #3
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	4a5e      	ldr	r2, [pc, #376]	@ (80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	ee07 3a90 	vmov	s15, r3
 8004f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f60:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f64:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004f80:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f82:	4b4a      	ldr	r3, [pc, #296]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f8e:	d121      	bne.n	8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004f90:	4b46      	ldr	r3, [pc, #280]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d017      	beq.n	8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f9c:	4b43      	ldr	r3, [pc, #268]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	0a5b      	lsrs	r3, r3, #9
 8004fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004fb6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e006      	b.n	8004fda <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fda:	4b34      	ldr	r3, [pc, #208]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe6:	d121      	bne.n	800502c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004fe8:	4b30      	ldr	r3, [pc, #192]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800500a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800500e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800501a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	e006      	b.n	8005032 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	e002      	b.n	8005032 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005032:	4b1e      	ldr	r3, [pc, #120]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800503a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800503e:	d121      	bne.n	8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005040:	4b1a      	ldr	r3, [pc, #104]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d017      	beq.n	800507c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800504c:	4b17      	ldr	r3, [pc, #92]	@ (80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	0e1b      	lsrs	r3, r3, #24
 8005052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800505e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005062:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005066:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800506a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800506e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005072:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800507a:	e010      	b.n	800509e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	609a      	str	r2, [r3, #8]
}
 8005082:	e00c      	b.n	800509e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	609a      	str	r2, [r3, #8]
}
 800508a:	e008      	b.n	800509e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	609a      	str	r2, [r3, #8]
}
 800509e:	bf00      	nop
 80050a0:	372c      	adds	r7, #44	@ 0x2c
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	44020c00 	.word	0x44020c00
 80050b0:	03d09000 	.word	0x03d09000
 80050b4:	46000000 	.word	0x46000000
 80050b8:	4a742400 	.word	0x4a742400
 80050bc:	4bbebc20 	.word	0x4bbebc20

080050c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b08b      	sub	sp, #44	@ 0x2c
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80050c8:	4bae      	ldr	r3, [pc, #696]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80050ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80050d2:	4bac      	ldr	r3, [pc, #688]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80050dc:	4ba9      	ldr	r3, [pc, #676]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80050e8:	4ba6      	ldr	r3, [pc, #664]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	091b      	lsrs	r3, r3, #4
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80050f4:	4ba3      	ldr	r3, [pc, #652]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80050f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f8:	08db      	lsrs	r3, r3, #3
 80050fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8126 	beq.w	8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d053      	beq.n	80051c6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d86f      	bhi.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d003      	beq.n	8005132 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d02b      	beq.n	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005130:	e068      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005132:	4b94      	ldr	r3, [pc, #592]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	08db      	lsrs	r3, r3, #3
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	4a92      	ldr	r2, [pc, #584]	@ (8005388 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	ee07 3a90 	vmov	s15, r3
 8005154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a04 	vldr	s12, [r7, #16]
 800516a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800538c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005186:	e068      	b.n	800525a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005390 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	ee07 3a90 	vmov	s15, r3
 80051a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80051a8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800538c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80051ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80051c4:	e049      	b.n	800525a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005394 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80051d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80051e6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800538c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005202:	e02a      	b.n	800525a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005204:	4b5f      	ldr	r3, [pc, #380]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	4a5e      	ldr	r2, [pc, #376]	@ (8005388 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
 8005214:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005238:	ed97 6a04 	vldr	s12, [r7, #16]
 800523c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800538c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005248:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800524c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005254:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005258:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800525a:	4b4a      	ldr	r3, [pc, #296]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005266:	d121      	bne.n	80052ac <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005268:	4b46      	ldr	r3, [pc, #280]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d017      	beq.n	80052a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005274:	4b43      	ldr	r3, [pc, #268]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005278:	0a5b      	lsrs	r3, r3, #9
 800527a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800528a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800528e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e006      	b.n	80052b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052b2:	4b34      	ldr	r3, [pc, #208]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052be:	d121      	bne.n	8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80052c0:	4b30      	ldr	r3, [pc, #192]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80052cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80052ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d0:	0c1b      	lsrs	r3, r3, #16
 80052d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80052de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052e2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80052e6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80052ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	e006      	b.n	800530a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	e002      	b.n	800530a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800530a:	4b1e      	ldr	r3, [pc, #120]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005316:	d121      	bne.n	800535c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005318:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d017      	beq.n	8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005324:	4b17      	ldr	r3, [pc, #92]	@ (8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005328:	0e1b      	lsrs	r3, r3, #24
 800532a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800533a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800533e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005352:	e010      	b.n	8005376 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]
}
 800535a:	e00c      	b.n	8005376 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	609a      	str	r2, [r3, #8]
}
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]
}
 8005376:	bf00      	nop
 8005378:	372c      	adds	r7, #44	@ 0x2c
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	44020c00 	.word	0x44020c00
 8005388:	03d09000 	.word	0x03d09000
 800538c:	46000000 	.word	0x46000000
 8005390:	4a742400 	.word	0x4a742400
 8005394:	4bbebc20 	.word	0x4bbebc20

08005398 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b08f      	sub	sp, #60	@ 0x3c
 800539c:	af00      	add	r7, sp, #0
 800539e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80053a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053a6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80053aa:	4321      	orrs	r1, r4
 80053ac:	d150      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80053ae:	4b26      	ldr	r3, [pc, #152]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80053ba:	4b23      	ldr	r3, [pc, #140]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d108      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ce:	d104      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80053d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d6:	f001 bb20 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80053da:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053e8:	d108      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f0:	d104      	bne.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80053f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f8:	f001 bb0f 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80053fc:	4b12      	ldr	r3, [pc, #72]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005408:	d119      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005410:	d115      	bne.n	800543e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005412:	4b0d      	ldr	r3, [pc, #52]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800541a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800541e:	d30a      	bcc.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800542a:	4a08      	ldr	r2, [pc, #32]	@ (800544c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005432:	f001 baf2 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800543a:	f001 baee 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	637b      	str	r3, [r7, #52]	@ 0x34
 8005442:	f001 baea 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005446:	bf00      	nop
 8005448:	44020c00 	.word	0x44020c00
 800544c:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005454:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8005458:	ea50 0104 	orrs.w	r1, r0, r4
 800545c:	f000 8615 	beq.w	800608a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8005460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005464:	2801      	cmp	r0, #1
 8005466:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 800546a:	f081 82d3 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800546e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005472:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005476:	ea50 0104 	orrs.w	r1, r0, r4
 800547a:	f000 84d8 	beq.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800547e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005482:	2801      	cmp	r0, #1
 8005484:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005488:	f081 82c4 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800548c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005490:	f1a1 0410 	sub.w	r4, r1, #16
 8005494:	ea50 0104 	orrs.w	r1, r0, r4
 8005498:	f001 8288 	beq.w	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 800549c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054a0:	2801      	cmp	r0, #1
 80054a2:	f171 0110 	sbcs.w	r1, r1, #16
 80054a6:	f081 82b5 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80054aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ae:	f1a1 0408 	sub.w	r4, r1, #8
 80054b2:	ea50 0104 	orrs.w	r1, r0, r4
 80054b6:	f001 81fe 	beq.w	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80054ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054be:	2801      	cmp	r0, #1
 80054c0:	f171 0108 	sbcs.w	r1, r1, #8
 80054c4:	f081 82a6 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80054c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054cc:	1f0c      	subs	r4, r1, #4
 80054ce:	ea50 0104 	orrs.w	r1, r0, r4
 80054d2:	f000 8753 	beq.w	800637c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80054d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054da:	2801      	cmp	r0, #1
 80054dc:	f171 0104 	sbcs.w	r1, r1, #4
 80054e0:	f081 8298 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80054e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054e8:	1e8c      	subs	r4, r1, #2
 80054ea:	ea50 0104 	orrs.w	r1, r0, r4
 80054ee:	f001 8173 	beq.w	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80054f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054f6:	2801      	cmp	r0, #1
 80054f8:	f171 0102 	sbcs.w	r1, r1, #2
 80054fc:	f081 828a 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005504:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005508:	4321      	orrs	r1, r4
 800550a:	f001 80fe 	beq.w	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800550e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005512:	4ccb      	ldr	r4, [pc, #812]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005514:	42a0      	cmp	r0, r4
 8005516:	f171 0100 	sbcs.w	r1, r1, #0
 800551a:	f081 827b 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800551e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005522:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005526:	4321      	orrs	r1, r4
 8005528:	f001 8076 	beq.w	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 800552c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005530:	4cc4      	ldr	r4, [pc, #784]	@ (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8005532:	42a0      	cmp	r0, r4
 8005534:	f171 0100 	sbcs.w	r1, r1, #0
 8005538:	f081 826c 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800553c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005540:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005544:	4321      	orrs	r1, r4
 8005546:	f000 87b5 	beq.w	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 800554a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800554e:	4cbe      	ldr	r4, [pc, #760]	@ (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8005550:	42a0      	cmp	r0, r4
 8005552:	f171 0100 	sbcs.w	r1, r1, #0
 8005556:	f081 825d 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800555a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800555e:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005562:	4321      	orrs	r1, r4
 8005564:	f000 8738 	beq.w	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8005568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800556c:	4cb7      	ldr	r4, [pc, #732]	@ (800584c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 800556e:	42a0      	cmp	r0, r4
 8005570:	f171 0100 	sbcs.w	r1, r1, #0
 8005574:	f081 824e 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800557c:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005580:	4321      	orrs	r1, r4
 8005582:	f001 81cd 	beq.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 8005586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800558a:	4cb1      	ldr	r4, [pc, #708]	@ (8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 800558c:	42a0      	cmp	r0, r4
 800558e:	f171 0100 	sbcs.w	r1, r1, #0
 8005592:	f081 823f 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8005596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800559a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800559e:	4321      	orrs	r1, r4
 80055a0:	f000 80d9 	beq.w	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80055a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055a8:	4caa      	ldr	r4, [pc, #680]	@ (8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 80055aa:	42a0      	cmp	r0, r4
 80055ac:	f171 0100 	sbcs.w	r1, r1, #0
 80055b0:	f081 8230 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80055b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055b8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80055bc:	4321      	orrs	r1, r4
 80055be:	f000 83da 	beq.w	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80055c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055c6:	4ca4      	ldr	r4, [pc, #656]	@ (8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80055c8:	42a0      	cmp	r0, r4
 80055ca:	f171 0100 	sbcs.w	r1, r1, #0
 80055ce:	f081 8221 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80055d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80055da:	4321      	orrs	r1, r4
 80055dc:	f000 8627 	beq.w	800622e <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80055e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055e4:	4c9d      	ldr	r4, [pc, #628]	@ (800585c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80055e6:	42a0      	cmp	r0, r4
 80055e8:	f171 0100 	sbcs.w	r1, r1, #0
 80055ec:	f081 8212 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80055f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055f4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80055f8:	4321      	orrs	r1, r4
 80055fa:	f000 857a 	beq.w	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80055fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005602:	4c97      	ldr	r4, [pc, #604]	@ (8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 8005604:	42a0      	cmp	r0, r4
 8005606:	f171 0100 	sbcs.w	r1, r1, #0
 800560a:	f081 8203 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800560e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005612:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005616:	4321      	orrs	r1, r4
 8005618:	f000 84fb 	beq.w	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800561c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005620:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005624:	f171 0100 	sbcs.w	r1, r1, #0
 8005628:	f081 81f4 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800562c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005630:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005634:	4321      	orrs	r1, r4
 8005636:	f000 84a9 	beq.w	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800563a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800563e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005642:	42a0      	cmp	r0, r4
 8005644:	f171 0100 	sbcs.w	r1, r1, #0
 8005648:	f081 81e4 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800564c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005650:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005654:	4321      	orrs	r1, r4
 8005656:	f000 8456 	beq.w	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 800565a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800565e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005662:	42a0      	cmp	r0, r4
 8005664:	f171 0100 	sbcs.w	r1, r1, #0
 8005668:	f081 81d4 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800566c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005670:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005674:	4321      	orrs	r1, r4
 8005676:	f000 8403 	beq.w	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800567a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800567e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005682:	42a0      	cmp	r0, r4
 8005684:	f171 0100 	sbcs.w	r1, r1, #0
 8005688:	f081 81c4 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800568c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005690:	2821      	cmp	r0, #33	@ 0x21
 8005692:	f171 0100 	sbcs.w	r1, r1, #0
 8005696:	d255      	bcs.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800569c:	4301      	orrs	r1, r0
 800569e:	f001 81b9 	beq.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80056a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056a6:	1e42      	subs	r2, r0, #1
 80056a8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80056ac:	2a20      	cmp	r2, #32
 80056ae:	f173 0100 	sbcs.w	r1, r3, #0
 80056b2:	f081 81af 	bcs.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80056b6:	2a1f      	cmp	r2, #31
 80056b8:	f201 81ac 	bhi.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80056bc:	a101      	add	r1, pc, #4	@ (adr r1, 80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80056be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	0800579b 	.word	0x0800579b
 80056c8:	08005899 	.word	0x08005899
 80056cc:	08006a15 	.word	0x08006a15
 80056d0:	08005959 	.word	0x08005959
 80056d4:	08006a15 	.word	0x08006a15
 80056d8:	08006a15 	.word	0x08006a15
 80056dc:	08006a15 	.word	0x08006a15
 80056e0:	08005a29 	.word	0x08005a29
 80056e4:	08006a15 	.word	0x08006a15
 80056e8:	08006a15 	.word	0x08006a15
 80056ec:	08006a15 	.word	0x08006a15
 80056f0:	08006a15 	.word	0x08006a15
 80056f4:	08006a15 	.word	0x08006a15
 80056f8:	08006a15 	.word	0x08006a15
 80056fc:	08006a15 	.word	0x08006a15
 8005700:	08005b0d 	.word	0x08005b0d
 8005704:	08006a15 	.word	0x08006a15
 8005708:	08006a15 	.word	0x08006a15
 800570c:	08006a15 	.word	0x08006a15
 8005710:	08006a15 	.word	0x08006a15
 8005714:	08006a15 	.word	0x08006a15
 8005718:	08006a15 	.word	0x08006a15
 800571c:	08006a15 	.word	0x08006a15
 8005720:	08006a15 	.word	0x08006a15
 8005724:	08006a15 	.word	0x08006a15
 8005728:	08006a15 	.word	0x08006a15
 800572c:	08006a15 	.word	0x08006a15
 8005730:	08006a15 	.word	0x08006a15
 8005734:	08006a15 	.word	0x08006a15
 8005738:	08006a15 	.word	0x08006a15
 800573c:	08006a15 	.word	0x08006a15
 8005740:	08005be3 	.word	0x08005be3
 8005744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005748:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800574c:	430b      	orrs	r3, r1
 800574e:	f000 82b3 	beq.w	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8005752:	f001 b95f 	b.w	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005756:	4b43      	ldr	r3, [pc, #268]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800575c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005760:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	2b00      	cmp	r3, #0
 8005766:	d108      	bne.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005768:	f107 0320 	add.w	r3, r7, #32
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff f9cf 	bl	8004b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005776:	f001 b950 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d108      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005780:	f107 0314 	add.w	r3, r7, #20
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fb2f 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800578e:	f001 b944 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005796:	f001 b940 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800579a:	4b32      	ldr	r3, [pc, #200]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 800579c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7fd ffc4 	bl	8003738 <HAL_RCC_GetPCLK2Freq>
 80057b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80057b2:	f001 b932 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80057b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057c2:	d10a      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d107      	bne.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ca:	f107 0314 	add.w	r3, r7, #20
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff fb0a 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d8:	e05c      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80057da:	4b22      	ldr	r3, [pc, #136]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057e6:	d10a      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d107      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ee:	f107 0308 	add.w	r3, r7, #8
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fc64 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fc:	e04a      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80057fe:	4b19      	ldr	r3, [pc, #100]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d10c      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	2b03      	cmp	r3, #3
 800580e:	d109      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005810:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	08db      	lsrs	r3, r3, #3
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	4a13      	ldr	r2, [pc, #76]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
 8005820:	637b      	str	r3, [r7, #52]	@ 0x34
 8005822:	e037      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005824:	4b0f      	ldr	r3, [pc, #60]	@ (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800582c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005830:	d11e      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	2b04      	cmp	r3, #4
 8005836:	d11b      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8005838:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800583a:	637b      	str	r3, [r7, #52]	@ 0x34
 800583c:	e02a      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800583e:	bf00      	nop
 8005840:	40000001 	.word	0x40000001
 8005844:	20000001 	.word	0x20000001
 8005848:	10000001 	.word	0x10000001
 800584c:	08000001 	.word	0x08000001
 8005850:	04000001 	.word	0x04000001
 8005854:	00400001 	.word	0x00400001
 8005858:	00200001 	.word	0x00200001
 800585c:	00040001 	.word	0x00040001
 8005860:	00020001 	.word	0x00020001
 8005864:	44020c00 	.word	0x44020c00
 8005868:	03d09000 	.word	0x03d09000
 800586c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005870:	4ba3      	ldr	r3, [pc, #652]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b02      	cmp	r3, #2
 800587c:	d106      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	2b05      	cmp	r3, #5
 8005882:	d103      	bne.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8005884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005888:	637b      	str	r3, [r7, #52]	@ 0x34
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005890:	f001 b8c3 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005894:	f001 b8c1 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005898:	4b99      	ldr	r3, [pc, #612]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800589a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800589e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80058aa:	f7fd ff2f 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 80058ae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80058b0:	f001 b8b3 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80058b4:	4b92      	ldr	r3, [pc, #584]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058c0:	d10a      	bne.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d107      	bne.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fa8b 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d6:	e03d      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d108      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058de:	f107 0308 	add.w	r3, r7, #8
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fbec 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058ec:	f001 b895 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80058f0:	4b83      	ldr	r3, [pc, #524]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d10c      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	2b18      	cmp	r3, #24
 8005900:	d109      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005902:	4b7f      	ldr	r3, [pc, #508]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	08db      	lsrs	r3, r3, #3
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	4a7d      	ldr	r2, [pc, #500]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 800590e:	fa22 f303 	lsr.w	r3, r2, r3
 8005912:	637b      	str	r3, [r7, #52]	@ 0x34
 8005914:	e01e      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005916:	4b7a      	ldr	r3, [pc, #488]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800591e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005922:	d105      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	2b20      	cmp	r3, #32
 8005928:	d102      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 800592a:	4b77      	ldr	r3, [pc, #476]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 800592c:	637b      	str	r3, [r7, #52]	@ 0x34
 800592e:	e011      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005930:	4b73      	ldr	r3, [pc, #460]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b02      	cmp	r3, #2
 800593c:	d106      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	2b28      	cmp	r3, #40	@ 0x28
 8005942:	d103      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8005944:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005948:	637b      	str	r3, [r7, #52]	@ 0x34
 800594a:	e003      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005950:	f001 b863 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005954:	f001 b861 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005958:	4b69      	ldr	r3, [pc, #420]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800595a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800595e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005962:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800596a:	f7fd fecf 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 800596e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005970:	f001 b853 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005974:	4b62      	ldr	r3, [pc, #392]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800597c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005980:	d10a      	bne.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	2b40      	cmp	r3, #64	@ 0x40
 8005986:	d107      	bne.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff fa2b 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	637b      	str	r3, [r7, #52]	@ 0x34
 8005996:	e045      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005998:	4b59      	ldr	r3, [pc, #356]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a4:	d10a      	bne.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	2b80      	cmp	r3, #128	@ 0x80
 80059aa:	d107      	bne.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ac:	f107 0308 	add.w	r3, r7, #8
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fb85 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ba:	e033      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80059bc:	4b50      	ldr	r3, [pc, #320]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d10c      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80059cc:	d109      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80059da:	fa22 f303 	lsr.w	r3, r2, r3
 80059de:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e0:	e020      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80059e2:	4b47      	ldr	r3, [pc, #284]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ee:	d106      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80059f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f6:	d102      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 80059f8:	4b43      	ldr	r3, [pc, #268]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 80059fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fc:	e012      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80059fe:	4b40      	ldr	r3, [pc, #256]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005a12:	d103      	bne.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8005a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1a:	e003      	b.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a20:	f000 bffb 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005a24:	f000 bff9 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005a28:	4b35      	ldr	r3, [pc, #212]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a2e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005a32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d104      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a3a:	f7fd fe67 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8005a3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005a40:	f000 bfeb 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005a44:	4b2e      	ldr	r3, [pc, #184]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a50:	d10b      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a58:	d107      	bne.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff f9c2 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a68:	e047      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005a6a:	4b25      	ldr	r3, [pc, #148]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a76:	d10b      	bne.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a7e:	d107      	bne.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a80:	f107 0308 	add.w	r3, r7, #8
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fb1b 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a8e:	e034      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005a90:	4b1b      	ldr	r3, [pc, #108]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d10d      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005aa2:	d109      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005aa4:	4b16      	ldr	r3, [pc, #88]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	08db      	lsrs	r3, r3, #3
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	4a15      	ldr	r2, [pc, #84]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab6:	e020      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005ab8:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac4:	d106      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005acc:	d102      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8005ace:	4b0e      	ldr	r3, [pc, #56]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad2:	e012      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8005ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d107      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005ae8:	d103      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005af0:	e003      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005af6:	f000 bf90 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005afa:	f000 bf8e 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005afe:	bf00      	nop
 8005b00:	44020c00 	.word	0x44020c00
 8005b04:	03d09000 	.word	0x03d09000
 8005b08:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005b0c:	4ba5      	ldr	r3, [pc, #660]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005b16:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b1e:	f7fd fdf5 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8005b22:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b24:	f000 bf79 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005b28:	4b9e      	ldr	r3, [pc, #632]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b34:	d10b      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b3e:	f107 0314 	add.w	r3, r7, #20
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff f950 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b4c:	e047      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005b4e:	4b95      	ldr	r3, [pc, #596]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b5a:	d10b      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b62:	d107      	bne.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b64:	f107 0308 	add.w	r3, r7, #8
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff faa9 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b72:	e034      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005b74:	4b8b      	ldr	r3, [pc, #556]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d10d      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8005b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b86:	d109      	bne.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b88:	4b86      	ldr	r3, [pc, #536]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	08db      	lsrs	r3, r3, #3
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	4a85      	ldr	r2, [pc, #532]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
 8005b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b9a:	e020      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005b9c:	4b81      	ldr	r3, [pc, #516]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb0:	d102      	bne.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8005bb2:	4b7e      	ldr	r3, [pc, #504]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8005bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb6:	e012      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005bb8:	4b7a      	ldr	r3, [pc, #488]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005bcc:	d103      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8005bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd4:	e003      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bda:	f000 bf1e 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005bde:	f000 bf1c 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005be2:	4b70      	ldr	r3, [pc, #448]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005be8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8005bec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d104      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fd fd8a 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8005bf8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005bfa:	f000 bf0e 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005bfe:	4b69      	ldr	r3, [pc, #420]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c0a:	d10b      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c12:	d107      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c14:	f107 0314 	add.w	r3, r7, #20
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff f8e5 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c22:	e047      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005c24:	4b5f      	ldr	r3, [pc, #380]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c30:	d10b      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c38:	d107      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff fa3e 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c48:	e034      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005c4a:	4b56      	ldr	r3, [pc, #344]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d10d      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005c5c:	d109      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c5e:	4b51      	ldr	r3, [pc, #324]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	08db      	lsrs	r3, r3, #3
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	4a4f      	ldr	r2, [pc, #316]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8005c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c70:	e020      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005c72:	4b4c      	ldr	r3, [pc, #304]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c86:	d102      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8005c88:	4b48      	ldr	r3, [pc, #288]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8005c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c8c:	e012      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005c8e:	4b45      	ldr	r3, [pc, #276]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d107      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005ca2:	d103      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005caa:	e003      	b.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cb0:	f000 beb3 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005cb4:	f000 beb1 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cbe:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005cc2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d104      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005cca:	f7fd fd4b 	bl	8003764 <HAL_RCC_GetPCLK3Freq>
 8005cce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005cd0:	f000 bea3 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cda:	d108      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cdc:	f107 0314 	add.w	r3, r7, #20
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff f881 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005cea:	f000 be96 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cf4:	d108      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff f9e0 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d04:	f000 be89 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005d08:	4b26      	ldr	r3, [pc, #152]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d10d      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d1a:	d109      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d1c:	4b21      	ldr	r3, [pc, #132]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	08db      	lsrs	r3, r3, #3
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	4a20      	ldr	r2, [pc, #128]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d2e:	e020      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005d30:	4b1c      	ldr	r3, [pc, #112]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d3c:	d106      	bne.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d44:	d102      	bne.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8005d46:	4b19      	ldr	r3, [pc, #100]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d4a:	e012      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005d4c:	4b15      	ldr	r3, [pc, #84]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d107      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d60:	d103      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8005d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d6e:	f000 be54 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005d72:	f000 be52 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005d76:	4b0b      	ldr	r3, [pc, #44]	@ (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8005d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8005d88:	f7fd fca4 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8005d8c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005d8e:	f000 be44 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d10b      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d98:	f7fd fb70 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8005d9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005d9e:	f000 be3c 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005da2:	bf00      	nop
 8005da4:	44020c00 	.word	0x44020c00
 8005da8:	03d09000 	.word	0x03d09000
 8005dac:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d108      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005db6:	f107 0314 	add.w	r3, r7, #20
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff f814 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dc4:	f000 be29 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005dc8:	4b9f      	ldr	r3, [pc, #636]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dd4:	d105      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d102      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8005ddc:	4b9b      	ldr	r3, [pc, #620]	@ (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de0:	e023      	b.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005de2:	4b99      	ldr	r3, [pc, #612]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d109      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005df4:	4b94      	ldr	r3, [pc, #592]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	08db      	lsrs	r3, r3, #3
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	4a94      	ldr	r2, [pc, #592]	@ (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e06:	e010      	b.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005e08:	4b8f      	ldr	r3, [pc, #572]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e14:	d105      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	2b05      	cmp	r3, #5
 8005e1a:	d102      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8005e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e20:	e003      	b.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e26:	f000 bdf8 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005e2a:	f000 bdf6 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005e2e:	4b86      	ldr	r3, [pc, #536]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005e3a:	4b83      	ldr	r3, [pc, #524]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d106      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8005e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e54:	e012      	b.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005e56:	4b7c      	ldr	r3, [pc, #496]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e64:	d106      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d103      	bne.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8005e6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e72:	e003      	b.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005e78:	f000 bdcf 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005e7c:	f000 bdcd 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005e80:	4b71      	ldr	r3, [pc, #452]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005e82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e8a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e92:	f7fd fc3b 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8005e96:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e98:	f000 bdbf 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea2:	d108      	bne.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ea4:	f107 0308 	add.w	r3, r7, #8
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff f909 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eb2:	f000 bdb2 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005eb6:	4b64      	ldr	r3, [pc, #400]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d10d      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ec8:	d109      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005eca:	4b5f      	ldr	r3, [pc, #380]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	08db      	lsrs	r3, r3, #3
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005edc:	e011      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005ede:	4b5a      	ldr	r3, [pc, #360]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eea:	d106      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ef2:	d102      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 8005ef4:	4b57      	ldr	r3, [pc, #348]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef8:	e003      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005efe:	f000 bd8c 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005f02:	f000 bd8a 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005f06:	4b50      	ldr	r3, [pc, #320]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f0c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005f10:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fd fbf8 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8005f1c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f1e:	f000 bd7c 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f28:	d108      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f2a:	f107 0308 	add.w	r3, r7, #8
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff f8c6 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f38:	f000 bd6f 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005f3c:	4b42      	ldr	r3, [pc, #264]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d10d      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f4e:	d109      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f50:	4b3d      	ldr	r3, [pc, #244]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	4a3d      	ldr	r2, [pc, #244]	@ (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f62:	e011      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005f64:	4b38      	ldr	r3, [pc, #224]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f70:	d106      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8005f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f74:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f78:	d102      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8005f7a:	4b36      	ldr	r3, [pc, #216]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7e:	e003      	b.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f84:	f000 bd49 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005f88:	f000 bd47 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005f8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f92:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005f96:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005f9e:	f7fd fbe1 	bl	8003764 <HAL_RCC_GetPCLK3Freq>
 8005fa2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005fa4:	f000 bd39 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fae:	d108      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff f883 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fbe:	f000 bd2c 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005fc2:	4b21      	ldr	r3, [pc, #132]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d10d      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fd4:	d109      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	08db      	lsrs	r3, r3, #3
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe8:	e011      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8005fea:	4b17      	ldr	r3, [pc, #92]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ff6:	d106      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ffe:	d102      	bne.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 8006000:	4b14      	ldr	r3, [pc, #80]	@ (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8006002:	637b      	str	r3, [r7, #52]	@ 0x34
 8006004:	e003      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800600a:	f000 bd06 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800600e:	f000 bd04 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006012:	4b0d      	ldr	r3, [pc, #52]	@ (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8006014:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006018:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800601c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006024:	f7fd fb72 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8006028:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800602a:	f000 bcf6 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800602e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006034:	d110      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006036:	f107 0308 	add.w	r3, r7, #8
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff f840 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006044:	f000 bce9 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006048:	44020c00 	.word	0x44020c00
 800604c:	017d7840 	.word	0x017d7840
 8006050:	03d09000 	.word	0x03d09000
 8006054:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006058:	4ba4      	ldr	r3, [pc, #656]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b02      	cmp	r3, #2
 8006062:	d10e      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800606a:	d10a      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800606c:	4b9f      	ldr	r3, [pc, #636]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	08db      	lsrs	r3, r3, #3
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	4a9e      	ldr	r2, [pc, #632]	@ (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800607e:	f000 bccc 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006086:	f000 bcc8 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800608a:	4b98      	ldr	r3, [pc, #608]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800608c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006090:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006094:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800609c:	f7fd fb62 	bl	8003764 <HAL_RCC_GetPCLK3Freq>
 80060a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80060a2:	f000 bcba 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060ac:	d108      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ae:	f107 0308 	add.w	r3, r7, #8
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff f804 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060bc:	f000 bcad 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80060c0:	4b8a      	ldr	r3, [pc, #552]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d10e      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060d2:	d10a      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060d4:	4b85      	ldr	r3, [pc, #532]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	08db      	lsrs	r3, r3, #3
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	4a84      	ldr	r2, [pc, #528]	@ (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060e6:	f000 bc98 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060ee:	f000 bc94 	b.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80060f2:	4b7e      	ldr	r3, [pc, #504]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80060f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060fc:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006104:	d056      	beq.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 8006106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006108:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800610c:	f200 808b 	bhi.w	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006116:	d03e      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800611e:	f200 8082 	bhi.w	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006128:	d027      	beq.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006130:	d879      	bhi.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006138:	d017      	beq.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006140:	d871      	bhi.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 8006142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800614e:	d004      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8006150:	e069      	b.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006152:	f7fd fb07 	bl	8003764 <HAL_RCC_GetPCLK3Freq>
 8006156:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006158:	e068      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fe42 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006168:	e060      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe ffa6 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006178:	e058      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800617a:	4b5c      	ldr	r3, [pc, #368]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800617c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b02      	cmp	r3, #2
 8006186:	d103      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8006188:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800618c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800618e:	e04d      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006194:	e04a      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006196:	4b55      	ldr	r3, [pc, #340]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800619c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061a4:	d103      	bne.n	80061ae <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 80061a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80061ac:	e03e      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80061b2:	e03b      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061b4:	4b4d      	ldr	r3, [pc, #308]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80061b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80061be:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061c0:	4b4a      	ldr	r3, [pc, #296]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d10c      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80061cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061d2:	4b46      	ldr	r3, [pc, #280]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	08db      	lsrs	r3, r3, #3
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	4a44      	ldr	r2, [pc, #272]	@ (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80061de:	fa22 f303 	lsr.w	r3, r2, r3
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e4:	e01e      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061e6:	4b41      	ldr	r3, [pc, #260]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f2:	d106      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fa:	d102      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80061fc:	4b3d      	ldr	r3, [pc, #244]	@ (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006200:	e010      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006202:	4b3a      	ldr	r3, [pc, #232]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800620e:	d106      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006216:	d102      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006218:	4b37      	ldr	r3, [pc, #220]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
 800621c:	e002      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006222:	e003      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006224:	e002      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800622a:	bf00      	nop
          }
        }
        break;
 800622c:	e3f5      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800622e:	4b2f      	ldr	r3, [pc, #188]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8006230:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006234:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006238:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006240:	d05f      	beq.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006248:	f200 8094 	bhi.w	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006252:	d03f      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800625a:	f200 808b 	bhi.w	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006264:	d028      	beq.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800626c:	f200 8082 	bhi.w	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006276:	d017      	beq.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627e:	d879      	bhi.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	2b00      	cmp	r3, #0
 8006284:	d004      	beq.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628c:	d004      	beq.n	8006298 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800628e:	e071      	b.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006290:	f7fd fa3c 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8006294:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006296:	e070      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006298:	f107 0314 	add.w	r3, r7, #20
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fda3 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80062a6:	e068      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fe ff07 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80062b6:	e060      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062b8:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80062ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d103      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80062cc:	e055      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80062d2:	e052      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80062d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062e2:	d10b      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80062e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80062ea:	e046      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80062ec:	44020c00 	.word	0x44020c00
 80062f0:	03d09000 	.word	0x03d09000
 80062f4:	003d0900 	.word	0x003d0900
 80062f8:	017d7840 	.word	0x017d7840
              frequency = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006300:	e03b      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006302:	4bae      	ldr	r3, [pc, #696]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006308:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800630e:	4bab      	ldr	r3, [pc, #684]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b02      	cmp	r3, #2
 8006318:	d10c      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 800631a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006320:	4ba6      	ldr	r3, [pc, #664]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	08db      	lsrs	r3, r3, #3
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	4aa5      	ldr	r2, [pc, #660]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
 8006330:	637b      	str	r3, [r7, #52]	@ 0x34
 8006332:	e01e      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006334:	4ba1      	ldr	r3, [pc, #644]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800633c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006340:	d106      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006348:	d102      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800634a:	4b9e      	ldr	r3, [pc, #632]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800634c:	637b      	str	r3, [r7, #52]	@ 0x34
 800634e:	e010      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006350:	4b9a      	ldr	r3, [pc, #616]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800635c:	d106      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 800635e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006360:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006364:	d102      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006366:	4b98      	ldr	r3, [pc, #608]	@ (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
 800636a:	e002      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8006370:	e003      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 8006372:	e002      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006378:	bf00      	nop
          }
        }
        break;
 800637a:	e34e      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800637c:	4b8f      	ldr	r3, [pc, #572]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800637e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006386:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006388:	4b8c      	ldr	r3, [pc, #560]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006394:	d105      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 800639c:	4b8a      	ldr	r3, [pc, #552]	@ (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 800639e:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80063a0:	e33b      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063a8:	d107      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063aa:	f107 0320 	add.w	r3, r7, #32
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fbae 	bl	8004b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063b8:	e32f      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063c0:	d107      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063c2:	f107 0314 	add.w	r3, r7, #20
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fd0e 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063d0:	e323      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063d6:	e320      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80063d8:	4b78      	ldr	r3, [pc, #480]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80063da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d860      	bhi.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80063ea:	a201      	add	r2, pc, #4	@ (adr r2, 80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006405 	.word	0x08006405
 80063f4:	08006415 	.word	0x08006415
 80063f8:	08006425 	.word	0x08006425
 80063fc:	08006435 	.word	0x08006435
 8006400:	0800643b 	.word	0x0800643b
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006404:	f107 0320 	add.w	r3, r7, #32
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fb81 	bl	8004b10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006412:	e04e      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006414:	f107 0314 	add.w	r3, r7, #20
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fce5 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006422:	e046      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006424:	f107 0308 	add.w	r3, r7, #8
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe fe49 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006432:	e03e      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006434:	4b65      	ldr	r3, [pc, #404]	@ (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006436:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006438:	e03b      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800643a:	4b60      	ldr	r3, [pc, #384]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800643c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006440:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006444:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006446:	4b5d      	ldr	r3, [pc, #372]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b02      	cmp	r3, #2
 8006450:	d10c      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d109      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006458:	4b58      	ldr	r3, [pc, #352]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	08db      	lsrs	r3, r3, #3
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	4a57      	ldr	r2, [pc, #348]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
 8006468:	637b      	str	r3, [r7, #52]	@ 0x34
 800646a:	e01e      	b.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800646c:	4b53      	ldr	r3, [pc, #332]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006478:	d106      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006480:	d102      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006482:	4b50      	ldr	r3, [pc, #320]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
 8006486:	e010      	b.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006488:	4b4c      	ldr	r3, [pc, #304]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006494:	d106      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 8006496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800649c:	d102      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800649e:	4b4a      	ldr	r3, [pc, #296]	@ (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a2:	e002      	b.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80064a8:	e003      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80064aa:	e002      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80064b0:	bf00      	nop
          }
        }
        break;
 80064b2:	e2b2      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80064b4:	4b41      	ldr	r3, [pc, #260]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80064b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064be:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	f200 80a4 	bhi.w	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80064c8:	a201      	add	r2, pc, #4	@ (adr r2, 80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	08006555 	.word	0x08006555
 80064d4:	08006611 	.word	0x08006611
 80064d8:	08006611 	.word	0x08006611
 80064dc:	08006611 	.word	0x08006611
 80064e0:	08006611 	.word	0x08006611
 80064e4:	08006611 	.word	0x08006611
 80064e8:	08006611 	.word	0x08006611
 80064ec:	08006611 	.word	0x08006611
 80064f0:	08006565 	.word	0x08006565
 80064f4:	08006611 	.word	0x08006611
 80064f8:	08006611 	.word	0x08006611
 80064fc:	08006611 	.word	0x08006611
 8006500:	08006611 	.word	0x08006611
 8006504:	08006611 	.word	0x08006611
 8006508:	08006611 	.word	0x08006611
 800650c:	08006611 	.word	0x08006611
 8006510:	08006575 	.word	0x08006575
 8006514:	08006611 	.word	0x08006611
 8006518:	08006611 	.word	0x08006611
 800651c:	08006611 	.word	0x08006611
 8006520:	08006611 	.word	0x08006611
 8006524:	08006611 	.word	0x08006611
 8006528:	08006611 	.word	0x08006611
 800652c:	08006611 	.word	0x08006611
 8006530:	08006585 	.word	0x08006585
 8006534:	08006611 	.word	0x08006611
 8006538:	08006611 	.word	0x08006611
 800653c:	08006611 	.word	0x08006611
 8006540:	08006611 	.word	0x08006611
 8006544:	08006611 	.word	0x08006611
 8006548:	08006611 	.word	0x08006611
 800654c:	08006611 	.word	0x08006611
 8006550:	0800658b 	.word	0x0800658b
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006554:	f107 0320 	add.w	r3, r7, #32
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fad9 	bl	8004b10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006562:	e058      	b.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006564:	f107 0314 	add.w	r3, r7, #20
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe fc3d 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006572:	e050      	b.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006574:	f107 0308 	add.w	r3, r7, #8
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe fda1 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006582:	e048      	b.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006584:	4b11      	ldr	r3, [pc, #68]	@ (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 8006586:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006588:	e045      	b.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800658a:	4b0c      	ldr	r3, [pc, #48]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800658c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006590:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006594:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006596:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d116      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d113      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065a8:	4b04      	ldr	r3, [pc, #16]	@ (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	08db      	lsrs	r3, r3, #3
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	4a03      	ldr	r2, [pc, #12]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
 80065b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ba:	e028      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 80065bc:	44020c00 	.word	0x44020c00
 80065c0:	03d09000 	.word	0x03d09000
 80065c4:	003d0900 	.word	0x003d0900
 80065c8:	017d7840 	.word	0x017d7840
 80065cc:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065d0:	4b95      	ldr	r3, [pc, #596]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065dc:	d106      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80065de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e4:	d102      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80065e6:	4b91      	ldr	r3, [pc, #580]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80065e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ea:	e010      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065ec:	4b8e      	ldr	r3, [pc, #568]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065f8:	d106      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80065fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006600:	d102      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006602:	4b8b      	ldr	r3, [pc, #556]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
 8006606:	e002      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800660c:	e003      	b.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800660e:	e002      	b.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006614:	bf00      	nop
          }
        }
        break;
 8006616:	e200      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006618:	4b83      	ldr	r3, [pc, #524]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800661a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800661e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006622:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8006624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800662a:	d031      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006632:	d866      	bhi.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006636:	2bc0      	cmp	r3, #192	@ 0xc0
 8006638:	d027      	beq.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	2bc0      	cmp	r3, #192	@ 0xc0
 800663e:	d860      	bhi.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	2b80      	cmp	r3, #128	@ 0x80
 8006644:	d019      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	2b80      	cmp	r3, #128	@ 0x80
 800664a:	d85a      	bhi.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	2b40      	cmp	r3, #64	@ 0x40
 8006656:	d008      	beq.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8006658:	e053      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800665a:	f107 0320 	add.w	r3, r7, #32
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fa56 	bl	8004b10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006668:	e04e      	b.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800666a:	f107 0314 	add.w	r3, r7, #20
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe fbba 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006678:	e046      	b.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800667a:	f107 0308 	add.w	r3, r7, #8
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fd1e 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006688:	e03e      	b.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800668a:	4b6a      	ldr	r3, [pc, #424]	@ (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800668e:	e03b      	b.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006690:	4b65      	ldr	r3, [pc, #404]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006696:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800669a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800669c:	4b62      	ldr	r3, [pc, #392]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d10c      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80066a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066ae:	4b5e      	ldr	r3, [pc, #376]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	08db      	lsrs	r3, r3, #3
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	4a5f      	ldr	r2, [pc, #380]	@ (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c0:	e01e      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066c2:	4b59      	ldr	r3, [pc, #356]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ce:	d106      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d6:	d102      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80066d8:	4b54      	ldr	r3, [pc, #336]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80066da:	637b      	str	r3, [r7, #52]	@ 0x34
 80066dc:	e010      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066de:	4b52      	ldr	r3, [pc, #328]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ea:	d106      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80066ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066f2:	d102      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80066f4:	4b4e      	ldr	r3, [pc, #312]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f8:	e002      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80066fe:	e003      	b.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 8006700:	e002      	b.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006706:	bf00      	nop
          }
        }
        break;
 8006708:	e187      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800670a:	4b47      	ldr	r3, [pc, #284]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800670c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006710:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006714:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800671c:	f7fd f80c 	bl	8003738 <HAL_RCC_GetPCLK2Freq>
 8006720:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006722:	e17a      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8006724:	4b40      	ldr	r3, [pc, #256]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800672c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006730:	d10b      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006738:	d107      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fb52 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	637b      	str	r3, [r7, #52]	@ 0x34
 8006748:	e045      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800674a:	4b37      	ldr	r3, [pc, #220]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006756:	d10b      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675e:	d107      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006760:	f107 0308 	add.w	r3, r7, #8
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fcab 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
 800676e:	e032      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006770:	4b2d      	ldr	r3, [pc, #180]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d10d      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006782:	d109      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006784:	4b28      	ldr	r3, [pc, #160]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	08db      	lsrs	r3, r3, #3
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	4a2a      	ldr	r2, [pc, #168]	@ (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
 8006796:	e01e      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8006798:	4b23      	ldr	r3, [pc, #140]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a4:	d106      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ac:	d102      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 80067ae:	4b1f      	ldr	r3, [pc, #124]	@ (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80067b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b2:	e010      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80067b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067c0:	d106      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80067c8:	d102      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80067ca:	4b19      	ldr	r3, [pc, #100]	@ (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80067cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ce:	e002      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067d4:	e121      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80067d6:	e120      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80067d8:	4b13      	ldr	r3, [pc, #76]	@ (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80067da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d861      	bhi.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80067ea:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006801 	.word	0x08006801
 80067f4:	08006809 	.word	0x08006809
 80067f8:	08006819 	.word	0x08006819
 80067fc:	0800683d 	.word	0x0800683d
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8006800:	f7fc ff68 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 8006804:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8006806:	e055      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006808:	f107 0320 	add.w	r3, r7, #32
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe f97f 	bl	8004b10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006816:	e04d      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006818:	f107 0314 	add.w	r3, r7, #20
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fae3 	bl	8004de8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006826:	e045      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006828:	44020c00 	.word	0x44020c00
 800682c:	003d0900 	.word	0x003d0900
 8006830:	017d7840 	.word	0x017d7840
 8006834:	00bb8000 	.word	0x00bb8000
 8006838:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800683c:	4b79      	ldr	r3, [pc, #484]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800683e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006842:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006846:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006848:	4b76      	ldr	r3, [pc, #472]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b02      	cmp	r3, #2
 8006852:	d10c      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800685a:	4b72      	ldr	r3, [pc, #456]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	08db      	lsrs	r3, r3, #3
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	4a70      	ldr	r2, [pc, #448]	@ (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	637b      	str	r3, [r7, #52]	@ 0x34
 800686c:	e01e      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800686e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687a:	d106      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006882:	d102      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006884:	4b69      	ldr	r3, [pc, #420]	@ (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
 8006888:	e010      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800688a:	4b66      	ldr	r3, [pc, #408]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006896:	d106      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8006898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800689e:	d102      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80068a0:	4b63      	ldr	r3, [pc, #396]	@ (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 80068a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a4:	e002      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80068aa:	e003      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80068b2:	bf00      	nop
          }
        }
        break;
 80068b4:	e0b1      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80068b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80068b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80068c2:	4b58      	ldr	r3, [pc, #352]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80068c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d106      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068da:	637b      	str	r3, [r7, #52]	@ 0x34
 80068dc:	e01f      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80068de:	4b51      	ldr	r3, [pc, #324]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80068e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ec:	d106      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	2b40      	cmp	r3, #64	@ 0x40
 80068f2:	d103      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 80068f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fa:	e010      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80068fc:	4b49      	ldr	r3, [pc, #292]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006908:	d106      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	2b80      	cmp	r3, #128	@ 0x80
 800690e:	d103      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8006910:	f248 0312 	movw	r3, #32786	@ 0x8012
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
 8006916:	e002      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800691c:	e07d      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800691e:	e07c      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006920:	4b40      	ldr	r3, [pc, #256]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006926:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800692a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800692c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006938:	d105      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8006940:	4b3c      	ldr	r3, [pc, #240]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8006942:	637b      	str	r3, [r7, #52]	@ 0x34
 8006944:	e031      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006946:	4b37      	ldr	r3, [pc, #220]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800694e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006952:	d10a      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	2b10      	cmp	r3, #16
 8006958:	d107      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800695a:	f107 0320 	add.w	r3, r7, #32
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe f8d6 	bl	8004b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	637b      	str	r3, [r7, #52]	@ 0x34
 8006968:	e01f      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800696a:	4b2e      	ldr	r3, [pc, #184]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 800696c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b02      	cmp	r3, #2
 8006976:	d106      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	2b20      	cmp	r3, #32
 800697c:	d103      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 800697e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
 8006984:	e011      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006986:	4b27      	ldr	r3, [pc, #156]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8006988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800698c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006994:	d106      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	2b30      	cmp	r3, #48	@ 0x30
 800699a:	d103      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 800699c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a2:	e002      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80069a8:	e037      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80069aa:	e036      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80069ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80069ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d107      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069be:	f107 0320 	add.w	r3, r7, #32
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe f8a4 	bl	8004b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80069cc:	e025      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80069ce:	4b15      	ldr	r3, [pc, #84]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069da:	d10a      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d107      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe fb6a 	bl	80050c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f0:	e00f      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80069f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fe:	d105      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	2b30      	cmp	r3, #48	@ 0x30
 8006a04:	d102      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8006a06:	4b0b      	ldr	r3, [pc, #44]	@ (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8006a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0a:	e002      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8006a10:	e003      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8006a12:	e002      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a18:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	373c      	adds	r7, #60	@ 0x3c
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd90      	pop	{r4, r7, pc}
 8006a24:	44020c00 	.word	0x44020c00
 8006a28:	03d09000 	.word	0x03d09000
 8006a2c:	003d0900 	.word	0x003d0900
 8006a30:	017d7840 	.word	0x017d7840
 8006a34:	02dc6c00 	.word	0x02dc6c00

08006a38 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006a40:	4b48      	ldr	r3, [pc, #288]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a47      	ldr	r2, [pc, #284]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006a46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a4c:	f7fa fc4a 	bl	80012e4 <HAL_GetTick>
 8006a50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a52:	e008      	b.n	8006a66 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a54:	f7fa fc46 	bl	80012e4 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e07a      	b.n	8006b5c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a66:	4b3f      	ldr	r3, [pc, #252]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006a72:	4b3c      	ldr	r3, [pc, #240]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a7a:	f023 0303 	bic.w	r3, r3, #3
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6811      	ldr	r1, [r2, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6852      	ldr	r2, [r2, #4]
 8006a86:	0212      	lsls	r2, r2, #8
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	4936      	ldr	r1, [pc, #216]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	025b      	lsls	r3, r3, #9
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	061b      	lsls	r3, r3, #24
 8006abc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ac0:	4928      	ldr	r1, [pc, #160]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006ac6:	4b27      	ldr	r3, [pc, #156]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aca:	f023 020c 	bic.w	r2, r3, #12
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	4924      	ldr	r1, [pc, #144]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006ad8:	4b22      	ldr	r3, [pc, #136]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	f023 0220 	bic.w	r2, r3, #32
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	491f      	ldr	r1, [pc, #124]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006aea:	4b1e      	ldr	r3, [pc, #120]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	491c      	ldr	r1, [pc, #112]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006af8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	4a19      	ldr	r2, [pc, #100]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006afe:	f023 0310 	bic.w	r3, r3, #16
 8006b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006b04:	4b17      	ldr	r3, [pc, #92]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b0c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6a12      	ldr	r2, [r2, #32]
 8006b14:	00d2      	lsls	r2, r2, #3
 8006b16:	4913      	ldr	r1, [pc, #76]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006b1c:	4b11      	ldr	r3, [pc, #68]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b20:	4a10      	ldr	r2, [pc, #64]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006b22:	f043 0310 	orr.w	r3, r3, #16
 8006b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006b28:	4b0e      	ldr	r3, [pc, #56]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006b2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b32:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b34:	f7fa fbd6 	bl	80012e4 <HAL_GetTick>
 8006b38:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b3a:	e008      	b.n	8006b4e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b3c:	f7fa fbd2 	bl	80012e4 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e006      	b.n	8006b5c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b4e:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <RCCEx_PLL2_Config+0x12c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0

}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	44020c00 	.word	0x44020c00

08006b68 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8006b70:	4b48      	ldr	r3, [pc, #288]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a47      	ldr	r2, [pc, #284]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b7c:	f7fa fbb2 	bl	80012e4 <HAL_GetTick>
 8006b80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b82:	e008      	b.n	8006b96 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b84:	f7fa fbae 	bl	80012e4 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e07a      	b.n	8006c8c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b96:	4b3f      	ldr	r3, [pc, #252]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f0      	bne.n	8006b84 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6852      	ldr	r2, [r2, #4]
 8006bb6:	0212      	lsls	r2, r2, #8
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	4936      	ldr	r1, [pc, #216]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	630b      	str	r3, [r1, #48]	@ 0x30
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	025b      	lsls	r3, r3, #9
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	041b      	lsls	r3, r3, #16
 8006bde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	061b      	lsls	r3, r3, #24
 8006bec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006bf0:	4928      	ldr	r1, [pc, #160]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006bf6:	4b27      	ldr	r3, [pc, #156]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfa:	f023 020c 	bic.w	r2, r3, #12
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	4924      	ldr	r1, [pc, #144]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8006c08:	4b22      	ldr	r3, [pc, #136]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0c:	f023 0220 	bic.w	r2, r3, #32
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	491f      	ldr	r1, [pc, #124]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	491c      	ldr	r1, [pc, #112]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8006c28:	4b1a      	ldr	r3, [pc, #104]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c2c:	4a19      	ldr	r2, [pc, #100]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c2e:	f023 0310 	bic.w	r3, r3, #16
 8006c32:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8006c34:	4b17      	ldr	r3, [pc, #92]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c3c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6a12      	ldr	r2, [r2, #32]
 8006c44:	00d2      	lsls	r2, r2, #3
 8006c46:	4913      	ldr	r1, [pc, #76]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8006c4c:	4b11      	ldr	r3, [pc, #68]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c50:	4a10      	ldr	r2, [pc, #64]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c52:	f043 0310 	orr.w	r3, r3, #16
 8006c56:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8006c58:	4b0e      	ldr	r3, [pc, #56]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c64:	f7fa fb3e 	bl	80012e4 <HAL_GetTick>
 8006c68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c6a:	e008      	b.n	8006c7e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c6c:	f7fa fb3a 	bl	80012e4 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e006      	b.n	8006c8c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c7e:	4b05      	ldr	r3, [pc, #20]	@ (8006c94 <RCCEx_PLL3_Config+0x12c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	44020c00 	.word	0x44020c00

08006c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e049      	b.n	8006d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fa f8b4 	bl	8000e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f000 fb7a 	bl	80073d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d001      	beq.n	8006d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e07c      	b.n	8006e5a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8006e68 <HAL_TIM_Base_Start_IT+0x120>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d04a      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a39      	ldr	r2, [pc, #228]	@ (8006e6c <HAL_TIM_Base_Start_IT+0x124>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d045      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d94:	d040      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d9e:	d03b      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a32      	ldr	r2, [pc, #200]	@ (8006e70 <HAL_TIM_Base_Start_IT+0x128>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d036      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a31      	ldr	r2, [pc, #196]	@ (8006e74 <HAL_TIM_Base_Start_IT+0x12c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d031      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2f      	ldr	r2, [pc, #188]	@ (8006e78 <HAL_TIM_Base_Start_IT+0x130>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d02c      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8006e7c <HAL_TIM_Base_Start_IT+0x134>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d027      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8006e80 <HAL_TIM_Base_Start_IT+0x138>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d022      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006e84 <HAL_TIM_Base_Start_IT+0x13c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d01d      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a29      	ldr	r2, [pc, #164]	@ (8006e88 <HAL_TIM_Base_Start_IT+0x140>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d018      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a28      	ldr	r2, [pc, #160]	@ (8006e8c <HAL_TIM_Base_Start_IT+0x144>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <HAL_TIM_Base_Start_IT+0x148>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00e      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a25      	ldr	r2, [pc, #148]	@ (8006e94 <HAL_TIM_Base_Start_IT+0x14c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d009      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a23      	ldr	r2, [pc, #140]	@ (8006e98 <HAL_TIM_Base_Start_IT+0x150>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xd0>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a22      	ldr	r2, [pc, #136]	@ (8006e9c <HAL_TIM_Base_Start_IT+0x154>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d115      	bne.n	8006e44 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	4b20      	ldr	r3, [pc, #128]	@ (8006ea0 <HAL_TIM_Base_Start_IT+0x158>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b06      	cmp	r3, #6
 8006e28:	d015      	beq.n	8006e56 <HAL_TIM_Base_Start_IT+0x10e>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e30:	d011      	beq.n	8006e56 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e42:	e008      	b.n	8006e56 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e000      	b.n	8006e58 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	50012c00 	.word	0x50012c00
 8006e70:	40000400 	.word	0x40000400
 8006e74:	50000400 	.word	0x50000400
 8006e78:	40000800 	.word	0x40000800
 8006e7c:	50000800 	.word	0x50000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	50000c00 	.word	0x50000c00
 8006e88:	40013400 	.word	0x40013400
 8006e8c:	50013400 	.word	0x50013400
 8006e90:	40001800 	.word	0x40001800
 8006e94:	50001800 	.word	0x50001800
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	50014000 	.word	0x50014000
 8006ea0:	00010007 	.word	0x00010007

08006ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d020      	beq.n	8006f08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01b      	beq.n	8006f08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0202 	mvn.w	r2, #2
 8006ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa50 	bl	8007394 <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fa42 	bl	8007380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa53 	bl	80073a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d020      	beq.n	8006f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01b      	beq.n	8006f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0204 	mvn.w	r2, #4
 8006f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa2a 	bl	8007394 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa1c 	bl	8007380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa2d 	bl	80073a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d020      	beq.n	8006fa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0308 	and.w	r3, r3, #8
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01b      	beq.n	8006fa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0208 	mvn.w	r2, #8
 8006f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2204      	movs	r2, #4
 8006f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa04 	bl	8007394 <HAL_TIM_IC_CaptureCallback>
 8006f8c:	e005      	b.n	8006f9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f9f6 	bl	8007380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa07 	bl	80073a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d020      	beq.n	8006fec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f003 0310 	and.w	r3, r3, #16
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01b      	beq.n	8006fec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0210 	mvn.w	r2, #16
 8006fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f9de 	bl	8007394 <HAL_TIM_IC_CaptureCallback>
 8006fd8:	e005      	b.n	8006fe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f9d0 	bl	8007380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f9e1 	bl	80073a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00c      	beq.n	8007010 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0201 	mvn.w	r2, #1
 8007008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7f9 fe84 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d104      	bne.n	8007024 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00c      	beq.n	800703e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fc29 	bl	8007890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800705a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fc21 	bl	80078a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800707e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f99b 	bl	80073bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f06f 0220 	mvn.w	r2, #32
 80070a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fbe9 	bl	800787c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00c      	beq.n	80070ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80070c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fbf5 	bl	80078b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80070ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fbed 	bl	80078cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00c      	beq.n	8007116 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800710e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fbe5 	bl	80078e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00c      	beq.n	800713a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fbdd 	bl	80078f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_TIM_ConfigClockSource+0x1c>
 800715c:	2302      	movs	r3, #2
 800715e:	e0fe      	b.n	800735e <HAL_TIM_ConfigClockSource+0x21a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800717e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800718a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800719c:	f000 80c9 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 80071a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071a4:	f200 80ce 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 80071a8:	4a6f      	ldr	r2, [pc, #444]	@ (8007368 <HAL_TIM_ConfigClockSource+0x224>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	f000 80c1 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 80071b0:	4a6d      	ldr	r2, [pc, #436]	@ (8007368 <HAL_TIM_ConfigClockSource+0x224>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	f200 80c6 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 80071b8:	4a6c      	ldr	r2, [pc, #432]	@ (800736c <HAL_TIM_ConfigClockSource+0x228>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	f000 80b9 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 80071c0:	4a6a      	ldr	r2, [pc, #424]	@ (800736c <HAL_TIM_ConfigClockSource+0x228>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	f200 80be 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 80071c8:	4a69      	ldr	r2, [pc, #420]	@ (8007370 <HAL_TIM_ConfigClockSource+0x22c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	f000 80b1 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 80071d0:	4a67      	ldr	r2, [pc, #412]	@ (8007370 <HAL_TIM_ConfigClockSource+0x22c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	f200 80b6 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 80071d8:	4a66      	ldr	r2, [pc, #408]	@ (8007374 <HAL_TIM_ConfigClockSource+0x230>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	f000 80a9 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 80071e0:	4a64      	ldr	r2, [pc, #400]	@ (8007374 <HAL_TIM_ConfigClockSource+0x230>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	f200 80ae 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 80071e8:	4a63      	ldr	r2, [pc, #396]	@ (8007378 <HAL_TIM_ConfigClockSource+0x234>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	f000 80a1 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 80071f0:	4a61      	ldr	r2, [pc, #388]	@ (8007378 <HAL_TIM_ConfigClockSource+0x234>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	f200 80a6 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 80071f8:	4a60      	ldr	r2, [pc, #384]	@ (800737c <HAL_TIM_ConfigClockSource+0x238>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	f000 8099 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 8007200:	4a5e      	ldr	r2, [pc, #376]	@ (800737c <HAL_TIM_ConfigClockSource+0x238>)
 8007202:	4293      	cmp	r3, r2
 8007204:	f200 809e 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 8007208:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800720c:	f000 8091 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 8007210:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007214:	f200 8096 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 8007218:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800721c:	f000 8089 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 8007220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007224:	f200 808e 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 8007228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800722c:	d03e      	beq.n	80072ac <HAL_TIM_ConfigClockSource+0x168>
 800722e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007232:	f200 8087 	bhi.w	8007344 <HAL_TIM_ConfigClockSource+0x200>
 8007236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800723a:	f000 8086 	beq.w	800734a <HAL_TIM_ConfigClockSource+0x206>
 800723e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007242:	d87f      	bhi.n	8007344 <HAL_TIM_ConfigClockSource+0x200>
 8007244:	2b70      	cmp	r3, #112	@ 0x70
 8007246:	d01a      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x13a>
 8007248:	2b70      	cmp	r3, #112	@ 0x70
 800724a:	d87b      	bhi.n	8007344 <HAL_TIM_ConfigClockSource+0x200>
 800724c:	2b60      	cmp	r3, #96	@ 0x60
 800724e:	d050      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007250:	2b60      	cmp	r3, #96	@ 0x60
 8007252:	d877      	bhi.n	8007344 <HAL_TIM_ConfigClockSource+0x200>
 8007254:	2b50      	cmp	r3, #80	@ 0x50
 8007256:	d03c      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x18e>
 8007258:	2b50      	cmp	r3, #80	@ 0x50
 800725a:	d873      	bhi.n	8007344 <HAL_TIM_ConfigClockSource+0x200>
 800725c:	2b40      	cmp	r3, #64	@ 0x40
 800725e:	d058      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x1ce>
 8007260:	2b40      	cmp	r3, #64	@ 0x40
 8007262:	d86f      	bhi.n	8007344 <HAL_TIM_ConfigClockSource+0x200>
 8007264:	2b30      	cmp	r3, #48	@ 0x30
 8007266:	d064      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 8007268:	2b30      	cmp	r3, #48	@ 0x30
 800726a:	d86b      	bhi.n	8007344 <HAL_TIM_ConfigClockSource+0x200>
 800726c:	2b20      	cmp	r3, #32
 800726e:	d060      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 8007270:	2b20      	cmp	r3, #32
 8007272:	d867      	bhi.n	8007344 <HAL_TIM_ConfigClockSource+0x200>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d05c      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 8007278:	2b10      	cmp	r3, #16
 800727a:	d05a      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ee>
 800727c:	e062      	b.n	8007344 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800728e:	f000 fa05 	bl	800769c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	609a      	str	r2, [r3, #8]
      break;
 80072aa:	e04f      	b.n	800734c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072bc:	f000 f9ee 	bl	800769c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072ce:	609a      	str	r2, [r3, #8]
      break;
 80072d0:	e03c      	b.n	800734c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072de:	461a      	mov	r2, r3
 80072e0:	f000 f960 	bl	80075a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2150      	movs	r1, #80	@ 0x50
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f9b9 	bl	8007662 <TIM_ITRx_SetConfig>
      break;
 80072f0:	e02c      	b.n	800734c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072fe:	461a      	mov	r2, r3
 8007300:	f000 f97f 	bl	8007602 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2160      	movs	r1, #96	@ 0x60
 800730a:	4618      	mov	r0, r3
 800730c:	f000 f9a9 	bl	8007662 <TIM_ITRx_SetConfig>
      break;
 8007310:	e01c      	b.n	800734c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800731e:	461a      	mov	r2, r3
 8007320:	f000 f940 	bl	80075a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2140      	movs	r1, #64	@ 0x40
 800732a:	4618      	mov	r0, r3
 800732c:	f000 f999 	bl	8007662 <TIM_ITRx_SetConfig>
      break;
 8007330:	e00c      	b.n	800734c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4619      	mov	r1, r3
 800733c:	4610      	mov	r0, r2
 800733e:	f000 f990 	bl	8007662 <TIM_ITRx_SetConfig>
      break;
 8007342:	e003      	b.n	800734c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
      break;
 8007348:	e000      	b.n	800734c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800734a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	00100070 	.word	0x00100070
 800736c:	00100060 	.word	0x00100060
 8007370:	00100050 	.word	0x00100050
 8007374:	00100040 	.word	0x00100040
 8007378:	00100030 	.word	0x00100030
 800737c:	00100020 	.word	0x00100020

08007380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a62      	ldr	r2, [pc, #392]	@ (800756c <TIM_Base_SetConfig+0x19c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d02b      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a61      	ldr	r2, [pc, #388]	@ (8007570 <TIM_Base_SetConfig+0x1a0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d027      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f6:	d023      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073fe:	d01f      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a5c      	ldr	r2, [pc, #368]	@ (8007574 <TIM_Base_SetConfig+0x1a4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d01b      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a5b      	ldr	r2, [pc, #364]	@ (8007578 <TIM_Base_SetConfig+0x1a8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d017      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a5a      	ldr	r2, [pc, #360]	@ (800757c <TIM_Base_SetConfig+0x1ac>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d013      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a59      	ldr	r2, [pc, #356]	@ (8007580 <TIM_Base_SetConfig+0x1b0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00f      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a58      	ldr	r2, [pc, #352]	@ (8007584 <TIM_Base_SetConfig+0x1b4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00b      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a57      	ldr	r2, [pc, #348]	@ (8007588 <TIM_Base_SetConfig+0x1b8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d007      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a56      	ldr	r2, [pc, #344]	@ (800758c <TIM_Base_SetConfig+0x1bc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d003      	beq.n	8007440 <TIM_Base_SetConfig+0x70>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a55      	ldr	r2, [pc, #340]	@ (8007590 <TIM_Base_SetConfig+0x1c0>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d108      	bne.n	8007452 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a45      	ldr	r2, [pc, #276]	@ (800756c <TIM_Base_SetConfig+0x19c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d03b      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a44      	ldr	r2, [pc, #272]	@ (8007570 <TIM_Base_SetConfig+0x1a0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d037      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007468:	d033      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007470:	d02f      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a3f      	ldr	r2, [pc, #252]	@ (8007574 <TIM_Base_SetConfig+0x1a4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d02b      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a3e      	ldr	r2, [pc, #248]	@ (8007578 <TIM_Base_SetConfig+0x1a8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d027      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a3d      	ldr	r2, [pc, #244]	@ (800757c <TIM_Base_SetConfig+0x1ac>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d023      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a3c      	ldr	r2, [pc, #240]	@ (8007580 <TIM_Base_SetConfig+0x1b0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d01f      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a3b      	ldr	r2, [pc, #236]	@ (8007584 <TIM_Base_SetConfig+0x1b4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01b      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a3a      	ldr	r2, [pc, #232]	@ (8007588 <TIM_Base_SetConfig+0x1b8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d017      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a39      	ldr	r2, [pc, #228]	@ (800758c <TIM_Base_SetConfig+0x1bc>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a38      	ldr	r2, [pc, #224]	@ (8007590 <TIM_Base_SetConfig+0x1c0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00f      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a37      	ldr	r2, [pc, #220]	@ (8007594 <TIM_Base_SetConfig+0x1c4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00b      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a36      	ldr	r2, [pc, #216]	@ (8007598 <TIM_Base_SetConfig+0x1c8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a35      	ldr	r2, [pc, #212]	@ (800759c <TIM_Base_SetConfig+0x1cc>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_Base_SetConfig+0x102>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a34      	ldr	r2, [pc, #208]	@ (80075a0 <TIM_Base_SetConfig+0x1d0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d108      	bne.n	80074e4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a18      	ldr	r2, [pc, #96]	@ (800756c <TIM_Base_SetConfig+0x19c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d013      	beq.n	8007538 <TIM_Base_SetConfig+0x168>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a17      	ldr	r2, [pc, #92]	@ (8007570 <TIM_Base_SetConfig+0x1a0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00f      	beq.n	8007538 <TIM_Base_SetConfig+0x168>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a1c      	ldr	r2, [pc, #112]	@ (800758c <TIM_Base_SetConfig+0x1bc>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00b      	beq.n	8007538 <TIM_Base_SetConfig+0x168>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a1b      	ldr	r2, [pc, #108]	@ (8007590 <TIM_Base_SetConfig+0x1c0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <TIM_Base_SetConfig+0x168>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1c      	ldr	r2, [pc, #112]	@ (800759c <TIM_Base_SetConfig+0x1cc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_Base_SetConfig+0x168>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1b      	ldr	r2, [pc, #108]	@ (80075a0 <TIM_Base_SetConfig+0x1d0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d103      	bne.n	8007540 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b01      	cmp	r3, #1
 8007550:	d105      	bne.n	800755e <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f023 0201 	bic.w	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	611a      	str	r2, [r3, #16]
  }
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40012c00 	.word	0x40012c00
 8007570:	50012c00 	.word	0x50012c00
 8007574:	40000400 	.word	0x40000400
 8007578:	50000400 	.word	0x50000400
 800757c:	40000800 	.word	0x40000800
 8007580:	50000800 	.word	0x50000800
 8007584:	40000c00 	.word	0x40000c00
 8007588:	50000c00 	.word	0x50000c00
 800758c:	40013400 	.word	0x40013400
 8007590:	50013400 	.word	0x50013400
 8007594:	40001800 	.word	0x40001800
 8007598:	50001800 	.word	0x50001800
 800759c:	40014000 	.word	0x40014000
 80075a0:	50014000 	.word	0x50014000

080075a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f023 0201 	bic.w	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f023 030a 	bic.w	r3, r3, #10
 80075e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	621a      	str	r2, [r3, #32]
}
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007602:	b480      	push	{r7}
 8007604:	b087      	sub	sp, #28
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f023 0210 	bic.w	r2, r3, #16
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800762c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	031b      	lsls	r3, r3, #12
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800763e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	621a      	str	r2, [r3, #32]
}
 8007656:	bf00      	nop
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	f043 0307 	orr.w	r3, r3, #7
 8007688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	609a      	str	r2, [r3, #8]
}
 8007690:	bf00      	nop
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	021a      	lsls	r2, r3, #8
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	431a      	orrs	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	371c      	adds	r7, #28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e0a1      	b.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a4a      	ldr	r2, [pc, #296]	@ (8007844 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d00e      	beq.n	800773c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a49      	ldr	r2, [pc, #292]	@ (8007848 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d009      	beq.n	800773c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a47      	ldr	r2, [pc, #284]	@ (800784c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a46      	ldr	r2, [pc, #280]	@ (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d108      	bne.n	800774e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007742:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a34      	ldr	r2, [pc, #208]	@ (8007844 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d04a      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a33      	ldr	r2, [pc, #204]	@ (8007848 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d045      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007788:	d040      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007792:	d03b      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a2e      	ldr	r2, [pc, #184]	@ (8007854 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d036      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a2d      	ldr	r2, [pc, #180]	@ (8007858 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d031      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a2b      	ldr	r2, [pc, #172]	@ (800785c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d02c      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007860 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d027      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a28      	ldr	r2, [pc, #160]	@ (8007864 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d022      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a27      	ldr	r2, [pc, #156]	@ (8007868 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d01d      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1d      	ldr	r2, [pc, #116]	@ (800784c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d018      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a1c      	ldr	r2, [pc, #112]	@ (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a20      	ldr	r2, [pc, #128]	@ (800786c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007870 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d009      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a1c      	ldr	r2, [pc, #112]	@ (8007878 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d10c      	bne.n	8007826 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	4313      	orrs	r3, r2
 800781c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40012c00 	.word	0x40012c00
 8007848:	50012c00 	.word	0x50012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	50013400 	.word	0x50013400
 8007854:	40000400 	.word	0x40000400
 8007858:	50000400 	.word	0x50000400
 800785c:	40000800 	.word	0x40000800
 8007860:	50000800 	.word	0x50000800
 8007864:	40000c00 	.word	0x40000c00
 8007868:	50000c00 	.word	0x50000c00
 800786c:	40001800 	.word	0x40001800
 8007870:	50001800 	.word	0x50001800
 8007874:	40014000 	.word	0x40014000
 8007878:	50014000 	.word	0x50014000

0800787c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e042      	b.n	80079a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007920:	2b00      	cmp	r3, #0
 8007922:	d106      	bne.n	8007932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7f9 fac3 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2224      	movs	r2, #36	@ 0x24
 8007936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0201 	bic.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fde4 	bl	8008520 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc33 	bl	80081c4 <UART_SetConfig>
 800795e:	4603      	mov	r3, r0
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e01b      	b.n	80079a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fe63 	bl	8008664 <UART_CheckIdleState>
 800799e:	4603      	mov	r3, r0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08a      	sub	sp, #40	@ 0x28
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079be:	2b20      	cmp	r3, #32
 80079c0:	f040 808b 	bne.w	8007ada <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_UART_Transmit+0x28>
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e083      	b.n	8007adc <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079de:	2b80      	cmp	r3, #128	@ 0x80
 80079e0:	d107      	bne.n	80079f2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079f0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2221      	movs	r2, #33	@ 0x21
 80079fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a02:	f7f9 fc6f 	bl	80012e4 <HAL_GetTick>
 8007a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	88fa      	ldrh	r2, [r7, #6]
 8007a0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	88fa      	ldrh	r2, [r7, #6]
 8007a14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a20:	d108      	bne.n	8007a34 <HAL_UART_Transmit+0x8c>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d104      	bne.n	8007a34 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	e003      	b.n	8007a3c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a3c:	e030      	b.n	8007aa0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2200      	movs	r2, #0
 8007a46:	2180      	movs	r1, #128	@ 0x80
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 feb5 	bl	80087b8 <UART_WaitOnFlagUntilTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e03d      	b.n	8007adc <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10b      	bne.n	8007a7e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	3302      	adds	r3, #2
 8007a7a:	61bb      	str	r3, [r7, #24]
 8007a7c:	e007      	b.n	8007a8e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	781a      	ldrb	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1c8      	bne.n	8007a3e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2140      	movs	r1, #64	@ 0x40
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fe7e 	bl	80087b8 <UART_WaitOnFlagUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e006      	b.n	8007adc <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e000      	b.n	8007adc <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007ada:	2302      	movs	r3, #2
  }
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	@ 0x28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	d14b      	bne.n	8007b94 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_UART_Receive_IT+0x24>
 8007b02:	88fb      	ldrh	r3, [r7, #6]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e044      	b.n	8007b96 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1c:	2b40      	cmp	r3, #64	@ 0x40
 8007b1e:	d107      	bne.n	8007b30 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689a      	ldr	r2, [r3, #8]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b2e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1a      	ldr	r2, [pc, #104]	@ (8007ba0 <HAL_UART_Receive_IT+0xbc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d024      	beq.n	8007b84 <HAL_UART_Receive_IT+0xa0>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a19      	ldr	r2, [pc, #100]	@ (8007ba4 <HAL_UART_Receive_IT+0xc0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d01f      	beq.n	8007b84 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d018      	beq.n	8007b84 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b70:	623b      	str	r3, [r7, #32]
 8007b72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	69f9      	ldr	r1, [r7, #28]
 8007b76:	6a3a      	ldr	r2, [r7, #32]
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e6      	bne.n	8007b52 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b84:	88fb      	ldrh	r3, [r7, #6]
 8007b86:	461a      	mov	r2, r3
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 fe82 	bl	8008894 <UART_Start_Receive_IT>
 8007b90:	4603      	mov	r3, r0
 8007b92:	e000      	b.n	8007b96 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007b94:	2302      	movs	r3, #2
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3728      	adds	r7, #40	@ 0x28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	44002400 	.word	0x44002400
 8007ba4:	54002400 	.word	0x54002400

08007ba8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b0ae      	sub	sp, #184	@ 0xb8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bd2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8007bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d11b      	bne.n	8007c1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007be4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d015      	beq.n	8007c1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007bf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d105      	bne.n	8007c08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d009      	beq.n	8007c1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 82ac 	beq.w	800816a <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
      }
      return;
 8007c1a:	e2a6      	b.n	800816a <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80fd 	beq.w	8007e20 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8007e14 <HAL_UART_IRQHandler+0x26c>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c36:	4b78      	ldr	r3, [pc, #480]	@ (8007e18 <HAL_UART_IRQHandler+0x270>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 80f0 	beq.w	8007e20 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d011      	beq.n	8007c70 <HAL_UART_IRQHandler+0xc8>
 8007c4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c66:	f043 0201 	orr.w	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d011      	beq.n	8007ca0 <HAL_UART_IRQHandler+0xf8>
 8007c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c96:	f043 0204 	orr.w	r2, r3, #4
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d011      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x128>
 8007cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc6:	f043 0202 	orr.w	r2, r3, #2
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d017      	beq.n	8007d0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d105      	bne.n	8007cf4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007cec:	4b49      	ldr	r3, [pc, #292]	@ (8007e14 <HAL_UART_IRQHandler+0x26c>)
 8007cee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d02:	f043 0208 	orr.w	r2, r3, #8
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d012      	beq.n	8007d3e <HAL_UART_IRQHandler+0x196>
 8007d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00c      	beq.n	8007d3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d34:	f043 0220 	orr.w	r2, r3, #32
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 8212 	beq.w	800816e <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d013      	beq.n	8007d7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d007      	beq.n	8007d7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d92:	2b40      	cmp	r3, #64	@ 0x40
 8007d94:	d005      	beq.n	8007da2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02e      	beq.n	8007e00 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fe98 	bl	8008ad8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db2:	2b40      	cmp	r3, #64	@ 0x40
 8007db4:	d120      	bne.n	8007df8 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d017      	beq.n	8007df0 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dc6:	4a15      	ldr	r2, [pc, #84]	@ (8007e1c <HAL_UART_IRQHandler+0x274>)
 8007dc8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7f9 fcc3 	bl	800175c <HAL_DMA_Abort_IT>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d019      	beq.n	8007e10 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007dea:	4610      	mov	r0, r2
 8007dec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dee:	e00f      	b.n	8007e10 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f9d1 	bl	8008198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df6:	e00b      	b.n	8007e10 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f9cd 	bl	8008198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfe:	e007      	b.n	8007e10 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f9c9 	bl	8008198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007e0e:	e1ae      	b.n	800816e <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e10:	bf00      	nop
    return;
 8007e12:	e1ac      	b.n	800816e <HAL_UART_IRQHandler+0x5c6>
 8007e14:	10000001 	.word	0x10000001
 8007e18:	04000120 	.word	0x04000120
 8007e1c:	08008ba5 	.word	0x08008ba5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	f040 8142 	bne.w	80080ae <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e2e:	f003 0310 	and.w	r3, r3, #16
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 813b 	beq.w	80080ae <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 8134 	beq.w	80080ae <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2210      	movs	r2, #16
 8007e4c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e58:	2b40      	cmp	r3, #64	@ 0x40
 8007e5a:	f040 80aa 	bne.w	8007fb2 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e68:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8007e6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8084 	beq.w	8007f7e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e7c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d27c      	bcs.n	8007f7e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007e8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e96:	2b81      	cmp	r3, #129	@ 0x81
 8007e98:	d060      	beq.n	8007f5c <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ea8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007eaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ec0:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ec4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e2      	bne.n	8007e9a <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3308      	adds	r3, #8
 8007eda:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ee4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007ef8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007efa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007efe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f00:	e841 2300 	strex	r3, r2, [r1]
 8007f04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e3      	bne.n	8007ed4 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f3e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e4      	bne.n	8007f1a <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7f9 fb84 	bl	8001664 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f918 	bl	80081ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007f7c:	e0f9      	b.n	8008172 <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f84:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	f040 80f2 	bne.w	8008172 <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f96:	2b81      	cmp	r3, #129	@ 0x81
 8007f98:	f040 80eb 	bne.w	8008172 <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f8fe 	bl	80081ac <HAL_UARTEx_RxEventCallback>
      return;
 8007fb0:	e0df      	b.n	8008172 <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 80d1 	beq.w	8008176 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8007fd4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 80cc 	beq.w	8008176 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008000:	647b      	str	r3, [r7, #68]	@ 0x44
 8008002:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800800e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e4      	bne.n	8007fde <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	623b      	str	r3, [r7, #32]
   return(result);
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800802a:	f023 0301 	bic.w	r3, r3, #1
 800802e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800803c:	633a      	str	r2, [r7, #48]	@ 0x30
 800803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e1      	bne.n	8008014 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	60fb      	str	r3, [r7, #12]
   return(result);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f023 0310 	bic.w	r3, r3, #16
 8008078:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	69b9      	ldr	r1, [r7, #24]
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	617b      	str	r3, [r7, #20]
   return(result);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e4      	bne.n	8008064 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080a0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f880 	bl	80081ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080ac:	e063      	b.n	8008176 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00e      	beq.n	80080d8 <HAL_UART_IRQHandler+0x530>
 80080ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d008      	beq.n	80080d8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80080ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 fadd 	bl	8009690 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080d6:	e051      	b.n	800817c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d014      	beq.n	800810e <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80080e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d105      	bne.n	80080fc <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d008      	beq.n	800810e <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008100:	2b00      	cmp	r3, #0
 8008102:	d03a      	beq.n	800817a <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	4798      	blx	r3
    }
    return;
 800810c:	e035      	b.n	800817a <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800810e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <HAL_UART_IRQHandler+0x586>
 800811a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800811e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fd4e 	bl	8008bc8 <UART_EndTransmit_IT>
    return;
 800812c:	e026      	b.n	800817c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800812e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <HAL_UART_IRQHandler+0x5a6>
 800813a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800813e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 fab6 	bl	80096b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800814c:	e016      	b.n	800817c <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800814e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008152:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d010      	beq.n	800817c <HAL_UART_IRQHandler+0x5d4>
 800815a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800815e:	2b00      	cmp	r3, #0
 8008160:	da0c      	bge.n	800817c <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 fa9e 	bl	80096a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008168:	e008      	b.n	800817c <HAL_UART_IRQHandler+0x5d4>
      return;
 800816a:	bf00      	nop
 800816c:	e006      	b.n	800817c <HAL_UART_IRQHandler+0x5d4>
    return;
 800816e:	bf00      	nop
 8008170:	e004      	b.n	800817c <HAL_UART_IRQHandler+0x5d4>
      return;
 8008172:	bf00      	nop
 8008174:	e002      	b.n	800817c <HAL_UART_IRQHandler+0x5d4>
      return;
 8008176:	bf00      	nop
 8008178:	e000      	b.n	800817c <HAL_UART_IRQHandler+0x5d4>
    return;
 800817a:	bf00      	nop
  }
}
 800817c:	37b8      	adds	r7, #184	@ 0xb8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop

08008184 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c8:	b094      	sub	sp, #80	@ 0x50
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	4b83      	ldr	r3, [pc, #524]	@ (80083e8 <UART_SetConfig+0x224>)
 80081da:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	497c      	ldr	r1, [pc, #496]	@ (80083ec <UART_SetConfig+0x228>)
 80081fc:	4019      	ands	r1, r3
 80081fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008204:	430b      	orrs	r3, r1
 8008206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	68d9      	ldr	r1, [r3, #12]
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	ea40 0301 	orr.w	r3, r0, r1
 800821e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4b6f      	ldr	r3, [pc, #444]	@ (80083e8 <UART_SetConfig+0x224>)
 800822c:	429a      	cmp	r2, r3
 800822e:	d009      	beq.n	8008244 <UART_SetConfig+0x80>
 8008230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	4b6e      	ldr	r3, [pc, #440]	@ (80083f0 <UART_SetConfig+0x22c>)
 8008236:	429a      	cmp	r2, r3
 8008238:	d004      	beq.n	8008244 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800823a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823c:	6a1a      	ldr	r2, [r3, #32]
 800823e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008240:	4313      	orrs	r3, r2
 8008242:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800824e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008258:	430b      	orrs	r3, r1
 800825a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	f023 000f 	bic.w	r0, r3, #15
 8008266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008268:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800826a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	ea40 0301 	orr.w	r3, r0, r1
 8008272:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b5e      	ldr	r3, [pc, #376]	@ (80083f4 <UART_SetConfig+0x230>)
 800827a:	429a      	cmp	r2, r3
 800827c:	d102      	bne.n	8008284 <UART_SetConfig+0xc0>
 800827e:	2301      	movs	r3, #1
 8008280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008282:	e032      	b.n	80082ea <UART_SetConfig+0x126>
 8008284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	4b5b      	ldr	r3, [pc, #364]	@ (80083f8 <UART_SetConfig+0x234>)
 800828a:	429a      	cmp	r2, r3
 800828c:	d102      	bne.n	8008294 <UART_SetConfig+0xd0>
 800828e:	2302      	movs	r3, #2
 8008290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008292:	e02a      	b.n	80082ea <UART_SetConfig+0x126>
 8008294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	4b58      	ldr	r3, [pc, #352]	@ (80083fc <UART_SetConfig+0x238>)
 800829a:	429a      	cmp	r2, r3
 800829c:	d102      	bne.n	80082a4 <UART_SetConfig+0xe0>
 800829e:	2304      	movs	r3, #4
 80082a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082a2:	e022      	b.n	80082ea <UART_SetConfig+0x126>
 80082a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	4b55      	ldr	r3, [pc, #340]	@ (8008400 <UART_SetConfig+0x23c>)
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d102      	bne.n	80082b4 <UART_SetConfig+0xf0>
 80082ae:	2308      	movs	r3, #8
 80082b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082b2:	e01a      	b.n	80082ea <UART_SetConfig+0x126>
 80082b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4b52      	ldr	r3, [pc, #328]	@ (8008404 <UART_SetConfig+0x240>)
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d102      	bne.n	80082c4 <UART_SetConfig+0x100>
 80082be:	2310      	movs	r3, #16
 80082c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082c2:	e012      	b.n	80082ea <UART_SetConfig+0x126>
 80082c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b4f      	ldr	r3, [pc, #316]	@ (8008408 <UART_SetConfig+0x244>)
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d102      	bne.n	80082d4 <UART_SetConfig+0x110>
 80082ce:	2320      	movs	r3, #32
 80082d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082d2:	e00a      	b.n	80082ea <UART_SetConfig+0x126>
 80082d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4b43      	ldr	r3, [pc, #268]	@ (80083e8 <UART_SetConfig+0x224>)
 80082da:	429a      	cmp	r2, r3
 80082dc:	d103      	bne.n	80082e6 <UART_SetConfig+0x122>
 80082de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80082e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082e4:	e001      	b.n	80082ea <UART_SetConfig+0x126>
 80082e6:	2300      	movs	r3, #0
 80082e8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b3e      	ldr	r3, [pc, #248]	@ (80083e8 <UART_SetConfig+0x224>)
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d005      	beq.n	8008300 <UART_SetConfig+0x13c>
 80082f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	4b3d      	ldr	r3, [pc, #244]	@ (80083f0 <UART_SetConfig+0x22c>)
 80082fa:	429a      	cmp	r2, r3
 80082fc:	f040 8088 	bne.w	8008410 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008302:	2200      	movs	r2, #0
 8008304:	623b      	str	r3, [r7, #32]
 8008306:	627a      	str	r2, [r7, #36]	@ 0x24
 8008308:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800830c:	f7fd f844 	bl	8005398 <HAL_RCCEx_GetPeriphCLKFreq>
 8008310:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 80eb 	beq.w	80084f0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800831a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831e:	4a3b      	ldr	r2, [pc, #236]	@ (800840c <UART_SetConfig+0x248>)
 8008320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008324:	461a      	mov	r2, r3
 8008326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008328:	fbb3 f3f2 	udiv	r3, r3, r2
 800832c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800832e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	4413      	add	r3, r2
 8008338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800833a:	429a      	cmp	r2, r3
 800833c:	d305      	bcc.n	800834a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800833e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008346:	429a      	cmp	r2, r3
 8008348:	d903      	bls.n	8008352 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008350:	e048      	b.n	80083e4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008354:	2200      	movs	r2, #0
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	61fa      	str	r2, [r7, #28]
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	4a2b      	ldr	r2, [pc, #172]	@ (800840c <UART_SetConfig+0x248>)
 8008360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008364:	b29b      	uxth	r3, r3
 8008366:	2200      	movs	r2, #0
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	617a      	str	r2, [r7, #20]
 800836c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008370:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008374:	f7f7 ff8e 	bl	8000294 <__aeabi_uldivmod>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4610      	mov	r0, r2
 800837e:	4619      	mov	r1, r3
 8008380:	f04f 0200 	mov.w	r2, #0
 8008384:	f04f 0300 	mov.w	r3, #0
 8008388:	020b      	lsls	r3, r1, #8
 800838a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800838e:	0202      	lsls	r2, r0, #8
 8008390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008392:	6849      	ldr	r1, [r1, #4]
 8008394:	0849      	lsrs	r1, r1, #1
 8008396:	2000      	movs	r0, #0
 8008398:	460c      	mov	r4, r1
 800839a:	4605      	mov	r5, r0
 800839c:	eb12 0804 	adds.w	r8, r2, r4
 80083a0:	eb43 0905 	adc.w	r9, r3, r5
 80083a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	60bb      	str	r3, [r7, #8]
 80083ac:	60fa      	str	r2, [r7, #12]
 80083ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083b2:	4640      	mov	r0, r8
 80083b4:	4649      	mov	r1, r9
 80083b6:	f7f7 ff6d 	bl	8000294 <__aeabi_uldivmod>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4613      	mov	r3, r2
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083c8:	d308      	bcc.n	80083dc <UART_SetConfig+0x218>
 80083ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083d0:	d204      	bcs.n	80083dc <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80083d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80083d8:	60da      	str	r2, [r3, #12]
 80083da:	e003      	b.n	80083e4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80083e2:	e085      	b.n	80084f0 <UART_SetConfig+0x32c>
 80083e4:	e084      	b.n	80084f0 <UART_SetConfig+0x32c>
 80083e6:	bf00      	nop
 80083e8:	44002400 	.word	0x44002400
 80083ec:	cfff69f3 	.word	0xcfff69f3
 80083f0:	54002400 	.word	0x54002400
 80083f4:	40013800 	.word	0x40013800
 80083f8:	40004400 	.word	0x40004400
 80083fc:	40004800 	.word	0x40004800
 8008400:	40004c00 	.word	0x40004c00
 8008404:	40005000 	.word	0x40005000
 8008408:	40006400 	.word	0x40006400
 800840c:	0800995c 	.word	0x0800995c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008418:	d13c      	bne.n	8008494 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800841a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800841c:	2200      	movs	r2, #0
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008426:	f7fc ffb7 	bl	8005398 <HAL_RCCEx_GetPeriphCLKFreq>
 800842a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800842c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d05e      	beq.n	80084f0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008436:	4a39      	ldr	r2, [pc, #228]	@ (800851c <UART_SetConfig+0x358>)
 8008438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800843c:	461a      	mov	r2, r3
 800843e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008440:	fbb3 f3f2 	udiv	r3, r3, r2
 8008444:	005a      	lsls	r2, r3, #1
 8008446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	085b      	lsrs	r3, r3, #1
 800844c:	441a      	add	r2, r3
 800844e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	fbb2 f3f3 	udiv	r3, r2, r3
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800845a:	2b0f      	cmp	r3, #15
 800845c:	d916      	bls.n	800848c <UART_SetConfig+0x2c8>
 800845e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008464:	d212      	bcs.n	800848c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008468:	b29b      	uxth	r3, r3
 800846a:	f023 030f 	bic.w	r3, r3, #15
 800846e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	b29b      	uxth	r3, r3
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	b29a      	uxth	r2, r3
 800847c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800847e:	4313      	orrs	r3, r2
 8008480:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008488:	60da      	str	r2, [r3, #12]
 800848a:	e031      	b.n	80084f0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008492:	e02d      	b.n	80084f0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008496:	2200      	movs	r2, #0
 8008498:	469a      	mov	sl, r3
 800849a:	4693      	mov	fp, r2
 800849c:	4650      	mov	r0, sl
 800849e:	4659      	mov	r1, fp
 80084a0:	f7fc ff7a 	bl	8005398 <HAL_RCCEx_GetPeriphCLKFreq>
 80084a4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80084a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d021      	beq.n	80084f0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b0:	4a1a      	ldr	r2, [pc, #104]	@ (800851c <UART_SetConfig+0x358>)
 80084b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80084be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	441a      	add	r2, r3
 80084c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084d2:	2b0f      	cmp	r3, #15
 80084d4:	d909      	bls.n	80084ea <UART_SetConfig+0x326>
 80084d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084dc:	d205      	bcs.n	80084ea <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60da      	str	r2, [r3, #12]
 80084e8:	e002      	b.n	80084f0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f2:	2201      	movs	r2, #1
 80084f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fa:	2201      	movs	r2, #1
 80084fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008502:	2200      	movs	r2, #0
 8008504:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	2200      	movs	r2, #0
 800850a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800850c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008510:	4618      	mov	r0, r3
 8008512:	3750      	adds	r7, #80	@ 0x50
 8008514:	46bd      	mov	sp, r7
 8008516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800851a:	bf00      	nop
 800851c:	0800995c 	.word	0x0800995c

08008520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008592:	f003 0304 	and.w	r3, r3, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01a      	beq.n	8008636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800861e:	d10a      	bne.n	8008636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	605a      	str	r2, [r3, #4]
  }
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b098      	sub	sp, #96	@ 0x60
 8008668:	af02      	add	r7, sp, #8
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008674:	f7f8 fe36 	bl	80012e4 <HAL_GetTick>
 8008678:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0308 	and.w	r3, r3, #8
 8008684:	2b08      	cmp	r3, #8
 8008686:	d12f      	bne.n	80086e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008688:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008690:	2200      	movs	r2, #0
 8008692:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f88e 	bl	80087b8 <UART_WaitOnFlagUntilTimeout>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d022      	beq.n	80086e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	461a      	mov	r2, r3
 80086be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80086c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e6      	bne.n	80086a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e063      	b.n	80087b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d149      	bne.n	800878a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086fe:	2200      	movs	r2, #0
 8008700:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f857 	bl	80087b8 <UART_WaitOnFlagUntilTimeout>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d03c      	beq.n	800878a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	623b      	str	r3, [r7, #32]
   return(result);
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800872e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008730:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e6      	bne.n	8008710 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	60fb      	str	r3, [r7, #12]
   return(result);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f023 0301 	bic.w	r3, r3, #1
 8008758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008762:	61fa      	str	r2, [r7, #28]
 8008764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	69b9      	ldr	r1, [r7, #24]
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	617b      	str	r3, [r7, #20]
   return(result);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e5      	bne.n	8008742 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2220      	movs	r2, #32
 800877a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e012      	b.n	80087b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2220      	movs	r2, #32
 800878e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2220      	movs	r2, #32
 8008796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3758      	adds	r7, #88	@ 0x58
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	603b      	str	r3, [r7, #0]
 80087c4:	4613      	mov	r3, r2
 80087c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c8:	e04f      	b.n	800886a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d0:	d04b      	beq.n	800886a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d2:	f7f8 fd87 	bl	80012e4 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d302      	bcc.n	80087e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e04e      	b.n	800888a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d037      	beq.n	800886a <UART_WaitOnFlagUntilTimeout+0xb2>
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b80      	cmp	r3, #128	@ 0x80
 80087fe:	d034      	beq.n	800886a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b40      	cmp	r3, #64	@ 0x40
 8008804:	d031      	beq.n	800886a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	f003 0308 	and.w	r3, r3, #8
 8008810:	2b08      	cmp	r3, #8
 8008812:	d110      	bne.n	8008836 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2208      	movs	r2, #8
 800881a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 f95b 	bl	8008ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2208      	movs	r2, #8
 8008826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e029      	b.n	800888a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008840:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008844:	d111      	bne.n	800886a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800884e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 f941 	bl	8008ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2220      	movs	r2, #32
 800885a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e00f      	b.n	800888a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4013      	ands	r3, r2
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	429a      	cmp	r2, r3
 8008878:	bf0c      	ite	eq
 800887a:	2301      	moveq	r3, #1
 800887c:	2300      	movne	r3, #0
 800887e:	b2db      	uxtb	r3, r3
 8008880:	461a      	mov	r2, r3
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	429a      	cmp	r2, r3
 8008886:	d0a0      	beq.n	80087ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008894:	b480      	push	{r7}
 8008896:	b0a3      	sub	sp, #140	@ 0x8c
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	4613      	mov	r3, r2
 80088a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	88fa      	ldrh	r2, [r7, #6]
 80088ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	88fa      	ldrh	r2, [r7, #6]
 80088b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c6:	d10e      	bne.n	80088e6 <UART_Start_Receive_IT+0x52>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d105      	bne.n	80088dc <UART_Start_Receive_IT+0x48>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80088d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088da:	e02d      	b.n	8008938 <UART_Start_Receive_IT+0xa4>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	22ff      	movs	r2, #255	@ 0xff
 80088e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088e4:	e028      	b.n	8008938 <UART_Start_Receive_IT+0xa4>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10d      	bne.n	800890a <UART_Start_Receive_IT+0x76>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d104      	bne.n	8008900 <UART_Start_Receive_IT+0x6c>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	22ff      	movs	r2, #255	@ 0xff
 80088fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088fe:	e01b      	b.n	8008938 <UART_Start_Receive_IT+0xa4>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	227f      	movs	r2, #127	@ 0x7f
 8008904:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008908:	e016      	b.n	8008938 <UART_Start_Receive_IT+0xa4>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008912:	d10d      	bne.n	8008930 <UART_Start_Receive_IT+0x9c>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d104      	bne.n	8008926 <UART_Start_Receive_IT+0x92>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	227f      	movs	r2, #127	@ 0x7f
 8008920:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008924:	e008      	b.n	8008938 <UART_Start_Receive_IT+0xa4>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	223f      	movs	r2, #63	@ 0x3f
 800892a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800892e:	e003      	b.n	8008938 <UART_Start_Receive_IT+0xa4>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2222      	movs	r2, #34	@ 0x22
 8008944:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3308      	adds	r3, #8
 800894e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800895a:	f043 0301 	orr.w	r3, r3, #1
 800895e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3308      	adds	r3, #8
 8008968:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800896c:	673a      	str	r2, [r7, #112]	@ 0x70
 800896e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008972:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800897a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e3      	bne.n	8008948 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008988:	d14f      	bne.n	8008a2a <UART_Start_Receive_IT+0x196>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008990:	88fa      	ldrh	r2, [r7, #6]
 8008992:	429a      	cmp	r2, r3
 8008994:	d349      	bcc.n	8008a2a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800899e:	d107      	bne.n	80089b0 <UART_Start_Receive_IT+0x11c>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d103      	bne.n	80089b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4a47      	ldr	r2, [pc, #284]	@ (8008ac8 <UART_Start_Receive_IT+0x234>)
 80089ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80089ae:	e002      	b.n	80089b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4a46      	ldr	r2, [pc, #280]	@ (8008acc <UART_Start_Receive_IT+0x238>)
 80089b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d01a      	beq.n	80089f4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089e2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80089e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80089ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e4      	bne.n	80089be <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3308      	adds	r3, #8
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3308      	adds	r3, #8
 8008a12:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008a14:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a16:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e5      	bne.n	80089f4 <UART_Start_Receive_IT+0x160>
 8008a28:	e046      	b.n	8008ab8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a32:	d107      	bne.n	8008a44 <UART_Start_Receive_IT+0x1b0>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d103      	bne.n	8008a44 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4a24      	ldr	r2, [pc, #144]	@ (8008ad0 <UART_Start_Receive_IT+0x23c>)
 8008a40:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a42:	e002      	b.n	8008a4a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4a23      	ldr	r2, [pc, #140]	@ (8008ad4 <UART_Start_Receive_IT+0x240>)
 8008a48:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d019      	beq.n	8008a86 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a62:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a66:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a72:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_Start_Receive_IT+0x1be>
 8008a84:	e018      	b.n	8008ab8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	613b      	str	r3, [r7, #16]
   return(result);
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f043 0320 	orr.w	r3, r3, #32
 8008a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aa4:	623b      	str	r3, [r7, #32]
 8008aa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	69f9      	ldr	r1, [r7, #28]
 8008aaa:	6a3a      	ldr	r2, [r7, #32]
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e6      	bne.n	8008a86 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	378c      	adds	r7, #140	@ 0x8c
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	08009319 	.word	0x08009319
 8008acc:	08008fa9 	.word	0x08008fa9
 8008ad0:	08008de5 	.word	0x08008de5
 8008ad4:	08008c21 	.word	0x08008c21

08008ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b095      	sub	sp, #84	@ 0x54
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008afe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e6      	bne.n	8008ae0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3308      	adds	r3, #8
 8008b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	e853 3f00 	ldrex	r3, [r3]
 8008b20:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e3      	bne.n	8008b12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d118      	bne.n	8008b84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f023 0310 	bic.w	r3, r3, #16
 8008b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6979      	ldr	r1, [r7, #20]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e6      	bne.n	8008b52 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b98:	bf00      	nop
 8008b9a:	3754      	adds	r7, #84	@ 0x54
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f7ff faec 	bl	8008198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008be4:	61fb      	str	r3, [r7, #28]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	61bb      	str	r3, [r7, #24]
 8008bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	6979      	ldr	r1, [r7, #20]
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e6      	bne.n	8008bd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2220      	movs	r2, #32
 8008c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff fab7 	bl	8008184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c16:	bf00      	nop
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b09c      	sub	sp, #112	@ 0x70
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c38:	2b22      	cmp	r3, #34	@ 0x22
 8008c3a:	f040 80c3 	bne.w	8008dc4 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c4c:	b2d9      	uxtb	r1, r3
 8008c4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c58:	400a      	ands	r2, r1
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f040 80a6 	bne.w	8008dd4 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ca6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ca8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e6      	bne.n	8008c88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ccc:	f023 0301 	bic.w	r3, r3, #1
 8008cd0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cda:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce2:	e841 2300 	strex	r3, r2, [r1]
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e5      	bne.n	8008cba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a35      	ldr	r2, [pc, #212]	@ (8008ddc <UART_RxISR_8BIT+0x1bc>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d024      	beq.n	8008d56 <UART_RxISR_8BIT+0x136>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a33      	ldr	r2, [pc, #204]	@ (8008de0 <UART_RxISR_8BIT+0x1c0>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d01f      	beq.n	8008d56 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d018      	beq.n	8008d56 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	623b      	str	r3, [r7, #32]
   return(result);
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e6      	bne.n	8008d24 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d12e      	bne.n	8008dbc <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f023 0310 	bic.w	r3, r3, #16
 8008d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	69b9      	ldr	r1, [r7, #24]
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e6      	bne.n	8008d64 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b10      	cmp	r3, #16
 8008da2:	d103      	bne.n	8008dac <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2210      	movs	r2, #16
 8008daa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff f9f9 	bl	80081ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dba:	e00b      	b.n	8008dd4 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7f7 ffa1 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 8008dc2:	e007      	b.n	8008dd4 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0208 	orr.w	r2, r2, #8
 8008dd2:	619a      	str	r2, [r3, #24]
}
 8008dd4:	bf00      	nop
 8008dd6:	3770      	adds	r7, #112	@ 0x70
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	44002400 	.word	0x44002400
 8008de0:	54002400 	.word	0x54002400

08008de4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b09c      	sub	sp, #112	@ 0x70
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008df2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dfc:	2b22      	cmp	r3, #34	@ 0x22
 8008dfe:	f040 80c3 	bne.w	8008f88 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e10:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e26:	1c9a      	adds	r2, r3, #2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 80a6 	bne.w	8008f98 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e6c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e6      	bne.n	8008e4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e5      	bne.n	8008e7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a35      	ldr	r2, [pc, #212]	@ (8008fa0 <UART_RxISR_16BIT+0x1bc>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d024      	beq.n	8008f1a <UART_RxISR_16BIT+0x136>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a33      	ldr	r2, [pc, #204]	@ (8008fa4 <UART_RxISR_16BIT+0x1c0>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d01f      	beq.n	8008f1a <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d018      	beq.n	8008f1a <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e6      	bne.n	8008ee8 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d12e      	bne.n	8008f80 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f023 0310 	bic.w	r3, r3, #16
 8008f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f46:	61bb      	str	r3, [r7, #24]
 8008f48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6979      	ldr	r1, [r7, #20]
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	613b      	str	r3, [r7, #16]
   return(result);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e6      	bne.n	8008f28 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d103      	bne.n	8008f70 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2210      	movs	r2, #16
 8008f6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff f917 	bl	80081ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f7e:	e00b      	b.n	8008f98 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7f7 febf 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 8008f86:	e007      	b.n	8008f98 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	699a      	ldr	r2, [r3, #24]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0208 	orr.w	r2, r2, #8
 8008f96:	619a      	str	r2, [r3, #24]
}
 8008f98:	bf00      	nop
 8008f9a:	3770      	adds	r7, #112	@ 0x70
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	44002400 	.word	0x44002400
 8008fa4:	54002400 	.word	0x54002400

08008fa8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b0ac      	sub	sp, #176	@ 0xb0
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fde:	2b22      	cmp	r3, #34	@ 0x22
 8008fe0:	f040 8188 	bne.w	80092f4 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fee:	e12b      	b.n	8009248 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ffa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008ffe:	b2d9      	uxtb	r1, r3
 8009000:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009004:	b2da      	uxtb	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800900a:	400a      	ands	r2, r1
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009020:	b29b      	uxth	r3, r3
 8009022:	3b01      	subs	r3, #1
 8009024:	b29a      	uxth	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903a:	f003 0307 	and.w	r3, r3, #7
 800903e:	2b00      	cmp	r3, #0
 8009040:	d053      	beq.n	80090ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d011      	beq.n	8009072 <UART_RxISR_8BIT_FIFOEN+0xca>
 800904e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2201      	movs	r2, #1
 8009060:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009068:	f043 0201 	orr.w	r2, r3, #1
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d011      	beq.n	80090a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800907e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00b      	beq.n	80090a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2202      	movs	r2, #2
 8009090:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009098:	f043 0204 	orr.w	r2, r3, #4
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d011      	beq.n	80090d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2204      	movs	r2, #4
 80090c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c8:	f043 0202 	orr.w	r2, r3, #2
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d006      	beq.n	80090ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff f85b 	bl	8008198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f040 80a8 	bne.w	8009248 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800910c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800911a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800911c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009120:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e4      	bne.n	80090f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3308      	adds	r3, #8
 8009134:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800913e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009144:	f023 0301 	bic.w	r3, r3, #1
 8009148:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3308      	adds	r3, #8
 8009152:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009156:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009158:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800915c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009164:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e1      	bne.n	800912e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a62      	ldr	r2, [pc, #392]	@ (800930c <UART_RxISR_8BIT_FIFOEN+0x364>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d026      	beq.n	80091d6 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a60      	ldr	r2, [pc, #384]	@ (8009310 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d021      	beq.n	80091d6 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01a      	beq.n	80091d6 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	461a      	mov	r2, r3
 80091be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80091c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e4      	bne.n	80091a0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d130      	bne.n	8009240 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f4:	f023 0310 	bic.w	r3, r3, #16
 80091f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009206:	643b      	str	r3, [r7, #64]	@ 0x40
 8009208:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800920c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800920e:	e841 2300 	strex	r3, r2, [r1]
 8009212:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1e4      	bne.n	80091e4 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	2b10      	cmp	r3, #16
 8009226:	d103      	bne.n	8009230 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2210      	movs	r2, #16
 800922e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe ffb7 	bl	80081ac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800923e:	e00e      	b.n	800925e <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7f7 fd5f 	bl	8000d04 <HAL_UART_RxCpltCallback>
        break;
 8009246:	e00a      	b.n	800925e <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009248:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800924c:	2b00      	cmp	r3, #0
 800924e:	d006      	beq.n	800925e <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8009250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	f47f aec9 	bne.w	8008ff0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009264:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009268:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800926c:	2b00      	cmp	r3, #0
 800926e:	d049      	beq.n	8009304 <UART_RxISR_8BIT_FIFOEN+0x35c>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009276:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800927a:	429a      	cmp	r2, r3
 800927c:	d242      	bcs.n	8009304 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	61fb      	str	r3, [r7, #28]
   return(result);
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3308      	adds	r3, #8
 800929e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80092a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e3      	bne.n	800927e <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a16      	ldr	r2, [pc, #88]	@ (8009314 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 80092ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f043 0320 	orr.w	r3, r3, #32
 80092d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092de:	61bb      	str	r3, [r7, #24]
 80092e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e2:	6979      	ldr	r1, [r7, #20]
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	613b      	str	r3, [r7, #16]
   return(result);
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e4      	bne.n	80092bc <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092f2:	e007      	b.n	8009304 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699a      	ldr	r2, [r3, #24]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0208 	orr.w	r2, r2, #8
 8009302:	619a      	str	r2, [r3, #24]
}
 8009304:	bf00      	nop
 8009306:	37b0      	adds	r7, #176	@ 0xb0
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	44002400 	.word	0x44002400
 8009310:	54002400 	.word	0x54002400
 8009314:	08008c21 	.word	0x08008c21

08009318 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b0ae      	sub	sp, #184	@ 0xb8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009326:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800934e:	2b22      	cmp	r3, #34	@ 0x22
 8009350:	f040 818c 	bne.w	800966c <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800935a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800935e:	e12f      	b.n	80095c0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009366:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800936e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009372:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009376:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800937a:	4013      	ands	r3, r2
 800937c:	b29a      	uxth	r2, r3
 800937e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009382:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009388:	1c9a      	adds	r2, r3, #2
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d053      	beq.n	800945e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d011      	beq.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80093c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00b      	beq.n	80093e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2201      	movs	r2, #1
 80093d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093dc:	f043 0201 	orr.w	r2, r3, #1
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d011      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2202      	movs	r2, #2
 8009404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800940c:	f043 0204 	orr.w	r2, r3, #4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009416:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	d011      	beq.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00b      	beq.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2204      	movs	r2, #4
 8009434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800943c:	f043 0202 	orr.w	r2, r3, #2
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800944c:	2b00      	cmp	r3, #0
 800944e:	d006      	beq.n	800945e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7fe fea1 	bl	8008198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	f040 80aa 	bne.w	80095c0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800947a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800947c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800948e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009492:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009496:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e2      	bne.n	800946c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3308      	adds	r3, #8
 80094ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094bc:	f023 0301 	bic.w	r3, r3, #1
 80094c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3308      	adds	r3, #8
 80094ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80094ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e1      	bne.n	80094a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a62      	ldr	r2, [pc, #392]	@ (8009684 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d026      	beq.n	800954e <UART_RxISR_16BIT_FIFOEN+0x236>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a60      	ldr	r2, [pc, #384]	@ (8009688 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d021      	beq.n	800954e <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01a      	beq.n	800954e <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009528:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800952c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800953a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800953c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e4      	bne.n	8009518 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009552:	2b01      	cmp	r3, #1
 8009554:	d130      	bne.n	80095b8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800956a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956c:	f023 0310 	bic.w	r3, r3, #16
 8009570:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800957e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009580:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800958c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e4      	bne.n	800955c <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	2b10      	cmp	r3, #16
 800959e:	d103      	bne.n	80095a8 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2210      	movs	r2, #16
 80095a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7fe fdfb 	bl	80081ac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80095b6:	e00e      	b.n	80095d6 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7f7 fba3 	bl	8000d04 <HAL_UART_RxCpltCallback>
        break;
 80095be:	e00a      	b.n	80095d6 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d006      	beq.n	80095d6 <UART_RxISR_16BIT_FIFOEN+0x2be>
 80095c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f47f aec5 	bne.w	8009360 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095dc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d049      	beq.n	800967c <UART_RxISR_16BIT_FIFOEN+0x364>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d242      	bcs.n	800967c <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3308      	adds	r3, #8
 80095fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	623b      	str	r3, [r7, #32]
   return(result);
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800960c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3308      	adds	r3, #8
 8009616:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800961a:	633a      	str	r2, [r7, #48]	@ 0x30
 800961c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009622:	e841 2300 	strex	r3, r2, [r1]
 8009626:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e3      	bne.n	80095f6 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a16      	ldr	r2, [pc, #88]	@ (800968c <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009632:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	60fb      	str	r3, [r7, #12]
   return(result);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f043 0320 	orr.w	r3, r3, #32
 8009648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009656:	61fb      	str	r3, [r7, #28]
 8009658:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	69b9      	ldr	r1, [r7, #24]
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	617b      	str	r3, [r7, #20]
   return(result);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e4      	bne.n	8009634 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800966a:	e007      	b.n	800967c <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699a      	ldr	r2, [r3, #24]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0208 	orr.w	r2, r2, #8
 800967a:	619a      	str	r2, [r3, #24]
}
 800967c:	bf00      	nop
 800967e:	37b8      	adds	r7, #184	@ 0xb8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	44002400 	.word	0x44002400
 8009688:	54002400 	.word	0x54002400
 800968c:	08008de5 	.word	0x08008de5

08009690 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d101      	bne.n	80096e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80096de:	2302      	movs	r3, #2
 80096e0:	e027      	b.n	8009732 <HAL_UARTEx_DisableFifoMode+0x66>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2224      	movs	r2, #36	@ 0x24
 80096ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0201 	bic.w	r2, r2, #1
 8009708:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009710:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2220      	movs	r2, #32
 8009724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009752:	2302      	movs	r3, #2
 8009754:	e02d      	b.n	80097b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2224      	movs	r2, #36	@ 0x24
 8009762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0201 	bic.w	r2, r2, #1
 800977c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f850 	bl	8009838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e02d      	b.n	800982e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2224      	movs	r2, #36	@ 0x24
 80097de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0201 	bic.w	r2, r2, #1
 80097f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f812 	bl	8009838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2220      	movs	r2, #32
 8009820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009844:	2b00      	cmp	r3, #0
 8009846:	d108      	bne.n	800985a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009858:	e031      	b.n	80098be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800985a:	2308      	movs	r3, #8
 800985c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800985e:	2308      	movs	r3, #8
 8009860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	0e5b      	lsrs	r3, r3, #25
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f003 0307 	and.w	r3, r3, #7
 8009870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	0f5b      	lsrs	r3, r3, #29
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	7b3a      	ldrb	r2, [r7, #12]
 8009886:	4911      	ldr	r1, [pc, #68]	@ (80098cc <UARTEx_SetNbDataToProcess+0x94>)
 8009888:	5c8a      	ldrb	r2, [r1, r2]
 800988a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800988e:	7b3a      	ldrb	r2, [r7, #12]
 8009890:	490f      	ldr	r1, [pc, #60]	@ (80098d0 <UARTEx_SetNbDataToProcess+0x98>)
 8009892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009894:	fb93 f3f2 	sdiv	r3, r3, r2
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	7b7a      	ldrb	r2, [r7, #13]
 80098a4:	4909      	ldr	r1, [pc, #36]	@ (80098cc <UARTEx_SetNbDataToProcess+0x94>)
 80098a6:	5c8a      	ldrb	r2, [r1, r2]
 80098a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098ac:	7b7a      	ldrb	r2, [r7, #13]
 80098ae:	4908      	ldr	r1, [pc, #32]	@ (80098d0 <UARTEx_SetNbDataToProcess+0x98>)
 80098b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80098be:	bf00      	nop
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	08009974 	.word	0x08009974
 80098d0:	0800997c 	.word	0x0800997c

080098d4 <memset>:
 80098d4:	4402      	add	r2, r0
 80098d6:	4603      	mov	r3, r0
 80098d8:	4293      	cmp	r3, r2
 80098da:	d100      	bne.n	80098de <memset+0xa>
 80098dc:	4770      	bx	lr
 80098de:	f803 1b01 	strb.w	r1, [r3], #1
 80098e2:	e7f9      	b.n	80098d8 <memset+0x4>

080098e4 <__libc_init_array>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	4d0d      	ldr	r5, [pc, #52]	@ (800991c <__libc_init_array+0x38>)
 80098e8:	2600      	movs	r6, #0
 80098ea:	4c0d      	ldr	r4, [pc, #52]	@ (8009920 <__libc_init_array+0x3c>)
 80098ec:	1b64      	subs	r4, r4, r5
 80098ee:	10a4      	asrs	r4, r4, #2
 80098f0:	42a6      	cmp	r6, r4
 80098f2:	d109      	bne.n	8009908 <__libc_init_array+0x24>
 80098f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009924 <__libc_init_array+0x40>)
 80098f6:	2600      	movs	r6, #0
 80098f8:	4c0b      	ldr	r4, [pc, #44]	@ (8009928 <__libc_init_array+0x44>)
 80098fa:	f000 f817 	bl	800992c <_init>
 80098fe:	1b64      	subs	r4, r4, r5
 8009900:	10a4      	asrs	r4, r4, #2
 8009902:	42a6      	cmp	r6, r4
 8009904:	d105      	bne.n	8009912 <__libc_init_array+0x2e>
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	f855 3b04 	ldr.w	r3, [r5], #4
 800990c:	3601      	adds	r6, #1
 800990e:	4798      	blx	r3
 8009910:	e7ee      	b.n	80098f0 <__libc_init_array+0xc>
 8009912:	f855 3b04 	ldr.w	r3, [r5], #4
 8009916:	3601      	adds	r6, #1
 8009918:	4798      	blx	r3
 800991a:	e7f2      	b.n	8009902 <__libc_init_array+0x1e>
 800991c:	0800998c 	.word	0x0800998c
 8009920:	0800998c 	.word	0x0800998c
 8009924:	0800998c 	.word	0x0800998c
 8009928:	08009990 	.word	0x08009990

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
